<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[larryhou]]></title>
  <link href="http://larryhou.github.com/atom.xml" rel="self"/>
  <link href="http://larryhou.github.com/"/>
  <updated>2013-08-21T11:00:15+08:00</updated>
  <id>http://larryhou.github.com/</id>
  <author>
    <name><![CDATA[larryhou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[flashdevelop cannot show up]]></title>
    <link href="http://larryhou.github.com/blog/2013/08/21/flashdevelop-cannot-show-up/"/>
    <updated>2013-08-21T10:55:00+08:00</updated>
    <id>http://larryhou.github.com/blog/2013/08/21/flashdevelop-cannot-show-up</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://larryhou.github.com/images/flashdevelop/01.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Mac系统安装佳能软件]]></title>
    <link href="http://larryhou.github.com/blog/2013/03/18/install-canon-tools-on-mac/"/>
    <updated>2013-03-18T11:40:00+08:00</updated>
    <id>http://larryhou.github.com/blog/2013/03/18/install-canon-tools-on-mac</id>
    <content type="html"><![CDATA[<p>如果你的安装光盘丢失了，怎么才能在Mac系统安装佳能工具软件呢？你可能已经在<a href="http://support-cn.canon-asia.com" title="佳能驱动与软件官网">官网</a>搜查过了，但是你会发现找不到对应的安装软件！是这样的，官网只有升级软件下载，那这岂不是很尴尬：升级软件安装的前提是先安装原版软件，但是现在又没有安装盘，死循环了！！其实这些升级软件另有玄机，里面都有安装包的，但是如果要直接运行，你可能要麻烦一下。<!--more--></p>

<p>首先，去<a href="http://support-cn.canon-asia.com" title="佳能驱动与软件官网">官网</a>下载系统版本对应的最新升级包，然后逐个测试一下三种方法，直至安装成功为止；如果，尝试了三种方式还是不能安装，那么表示本博客太旧了你需要另外google一下，或者联系作者（<em>larryhou@foxmail.com</em>）更新博客！</p>

<h2>DPP 3.12.52</h2>

<ul>
<li>从官网下载dpp3.12.52x.dmg</li>
<li>双击装载镜像，复制dpp3.12.52x_updater.app到任意其他目录（比如：下载）</li>
<li>在dpp3.12.52x_updater.app上鼠标右键，点击“显示包内容/Show Package Contents”</li>
<li>进入Contents/Resources/目录，删除Info.datx文件</li>
<li>返回上一级目录Contents，进入MacOS目录，双击运行OFICore</li>
</ul>


<h2>方法（一）</h2>

<blockquote><p>* Files you downloaded are compressed as “.zip” or “.gz” files<br/>* Double click on the file and it will expand to the disk image file extension “.dmg”<br/>* Click on image file EU211.4x-updater.dmg, it will mount it as disk mount<br/>* Transfer (copy) content where you want (exmp: desktop)<br/>* After copying unmount dmg image<br/>* Click on desktop copy: ‘Show Package Contents’<br/>* Navigate to ./Contents/Ressources/ and delete the Info.datx file<br/>* Close window<br/>* Run Installation</p></blockquote>


<h2>方法（二）</h2>

<blockquote><p>* Files you downloaded are compressed as “.zip” or “.gz” files<br/>* Double click on the file and it will expand to the disk image file extension “.dmg”<br/>* Click on that image file, it will mount it as disk<br/>* We should copy (extract) UpdateInstaller to our disk<br/>* Eject disk image<br/>* We will modify UpdateInstaller<br/>* Click on UpdateInstaller and go to “Show Package Contents”<br/>* It will open new window with Contents<br/>* Navigate to Contents/Resources and find the SDI.bundle file.<br/>* Click on the SDI.bundle and ‘Show Package Contents’ again<br/>* Now navigate to Contents/Resources and locate a file called update.plist<br/>* Delete update.plist file<br/>* Close opened windows and run UpdateInstaller it should install now!</p></blockquote>


<h2>方法（三）</h2>

<blockquote><p>* Files you downloaded are compressed as “.zip” or “.gz” files<br/>* Double click on the file and it will expand to the disk image file extension “.dmg”<br/>* Click on that image file, it will mount it as disk<br/>* We should copy (extract) UpdateInstaller to our disk<br/>* Eject disk image<br/>* We will modify UpdateInstaller<br/>* Click on UpdateInstaller and go to “Show Package Contents”<br/>* It will open new window with Contents<br/>* Now navigate to Resources and locate a file called update.plist<br/>* Delete update.plist file<br/>* Close opened windows and run UpdateInstaller it should install now!</p></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MAN输出文本可读性增强技巧]]></title>
    <link href="http://larryhou.github.com/blog/2012/11/29/make-man-output-readable/"/>
    <updated>2012-11-29T13:38:00+08:00</updated>
    <id>http://larryhou.github.com/blog/2012/11/29/make-man-output-readable</id>
    <content type="html"><![CDATA[<p>有时候在Terminal查看帮助实在是痛苦：只能显示几行，所以我就想在文本文件里面查看这些帮助（比如，TextMate），如果你使用类似<code>man col > ~/downloads/col.txt</code>，你会发现这简直是个悲剧，见下图</p>

<p><img src="http://larryhou.github.com/images/make-man-output-readable/fig01.png"></p>

<p>这完全不是我想要的结果，没有任何可读性，这是怎么回事儿呢？我Google到了一段文字可以解释这个问题：</p>

<blockquote><p>Ever try to open a man page in TextEdit using <code>man | open -f</code>? <br/>You end up with the kind of unreadable repeated characters shown here. This all dates back to the days of dot matrix and daisy wheel printing when the only way you could produce bold type was to repeatedly print characters. <br/>Fortunately, there&#8217;s an easy way to convert man pages into simple, non-redundant text. Use the command-line utility <code>col</code> with the <code>-b</code> flag enabled. For example, <code>man col | col -b | open -f</code> will open the col man page in TextEdit without repeated characters. The <code>-b</code> flag tells col to exclude all but the last character written to any column, ignoring any backspaces and repeats.</p></blockquote>


<p>这是一个历史遗留问题，可以追溯到使用点阵和菊花轮印刷的旧时代，那个时候为了得到粗体字体样式采用的是反复重复印刷的手段。幸运的是，有个简单的方法可以让man帮助变得简单可读、没有冗余字符，可以在man后面使用管道添加<code>col -b</code>来实现，其中<code>-b</code>标记位意思是忽略退格键以及去掉所有重复字符。比如，得到<code>col</code>的帮助可以使用<code>man col | col -b | open -f</code>，这里<code>open -f</code> 意思是使用默认文本编辑器打开，如下图</p>

<p><img src="http://larryhou.github.com/images/make-man-output-readable/fig02.png"></p>

<p>最后总结一下：</p>

<ul>
<li><p>man帮助输出到文本文件</p>

<blockquote><p>man [command] | col -b > [file saving path]</p></blockquote></li>
<li><p>man帮助直接用文本编辑器打开</p>

<blockquote><p>man [command] | col -b | open -f</p></blockquote></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[脚本中的嵌套变量]]></title>
    <link href="http://larryhou.github.com/blog/2012/11/26/nested-variable/"/>
    <updated>2012-11-26T20:38:00+08:00</updated>
    <id>http://larryhou.github.com/blog/2012/11/26/nested-variable</id>
    <content type="html"><![CDATA[<h2>OSX系统</h2>

<p>这里有一段简单脚本，</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">name1</span><span class="o">=</span>larry01
</span><span class='line'><span class="nv">name2</span><span class="o">=</span>larry02
</span><span class='line'><span class="nv">name3</span><span class="o">=</span>larry03
</span><span class='line'><span class="nv">name4</span><span class="o">=</span>larry04
</span><span class='line'><span class="nv">name5</span><span class="o">=</span>larry05
</span><span class='line'><span class="nv">name6</span><span class="o">=</span>larry06
</span><span class='line'><span class="nv">name7</span><span class="o">=</span>larry07
</span><span class='line'><span class="nv">name8</span><span class="o">=</span>larry08
</span><span class='line'><span class="nv">name9</span><span class="o">=</span>larry09
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$name1</span> wants to sleep.
</span><span class='line'><span class="nb">echo</span> <span class="nv">$name2</span> wants to sleep.
</span><span class='line'><span class="nb">echo</span> <span class="nv">$name3</span> wants to sleep.
</span><span class='line'><span class="nb">echo</span> <span class="nv">$name4</span> wants to sleep.
</span><span class='line'><span class="nb">echo</span> <span class="nv">$name5</span> wants to sleep.
</span><span class='line'><span class="nb">echo</span> <span class="nv">$name6</span> wants to sleep.
</span><span class='line'><span class="nb">echo</span> <span class="nv">$name7</span> wants to sleep.
</span><span class='line'><span class="nb">echo</span> <span class="nv">$name8</span> wants to sleep.
</span><span class='line'><span class="nb">echo</span> <span class="nv">$name9</span> wants to sleep.
</span></code></pre></td></tr></table></div></figure>


<p>在脚本中，我把每一个name都按照一定的规律做了一些操作，现在看来好像没什么问题。但是如果name有很多很多，这么写就很苦逼了，并且很容易出错。<!--more-->我们习惯让电脑做重复有规律的工作，让人从重复的劳动中解脱出来。那么这是一个很好的案例，该怎么解脱呢？看起来很简单，有代码经验的同学很容易想到使用循环来实现，这个思路是对的，name1~name9这几个有规律的字符串是很容通过脚本来实现的。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">i</span><span class="o">=</span>1
</span><span class='line'><span class="k">while</span> <span class="o">[</span> <span class="nv">$i</span> -le 9 <span class="o">]</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo </span>name<span class="nv">$i</span>
</span><span class='line'>  <span class="nv">i</span><span class="o">=</span><span class="nv">$[$i</span> + 1<span class="o">]</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是仅仅获得变量名对我们是没多大帮助的，要是这些动态计算出来的变量名能够动态计算出值来就太好了。其实我们可以通过<code>eval</code>命令来实现我们的想法，</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">name1</span><span class="o">=</span>larry01
</span><span class='line'><span class="nv">name2</span><span class="o">=</span>larry02
</span><span class='line'><span class="nv">name3</span><span class="o">=</span>larry03
</span><span class='line'><span class="nv">name4</span><span class="o">=</span>larry04
</span><span class='line'><span class="nv">name5</span><span class="o">=</span>larry05
</span><span class='line'><span class="nv">name6</span><span class="o">=</span>larry06
</span><span class='line'><span class="nv">name7</span><span class="o">=</span>larry07
</span><span class='line'><span class="nv">name8</span><span class="o">=</span>larry08
</span><span class='line'><span class="nv">name9</span><span class="o">=</span>larry09
</span><span class='line'>
</span><span class='line'><span class="nv">i</span><span class="o">=</span>1
</span><span class='line'><span class="k">while</span> <span class="o">[</span> <span class="nv">$i</span> -le 9 <span class="o">]</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nv">name</span><span class="o">=</span><span class="k">$(</span><span class="nb">eval echo</span> <span class="se">\$</span><span class="o">{</span>name<span class="nv">$i</span><span class="o">}</span><span class="k">)</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="nv">$name</span> wants to sleep.
</span><span class='line'>  <span class="nv">i</span><span class="o">=</span><span class="nv">$[$i</span> + 1<span class="o">]</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>是不是很好玩！</p>

<h2>WIN系统</h2>

<p>同样的需求在WIN系统该怎么实现？<br/>
我们可以使用DOS命令，虽然比起shell命令DOS弱爆了，但是它还是能够完成任务的。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="k">set</span> <span class="nv">name1</span><span class="o">=</span>larry<span class="m">01</span>
</span><span class='line'><span class="k">set</span> <span class="nv">name2</span><span class="o">=</span>larry<span class="m">02</span>
</span><span class='line'><span class="k">set</span> <span class="nv">name3</span><span class="o">=</span>larry<span class="m">03</span>
</span><span class='line'><span class="k">set</span> <span class="nv">name4</span><span class="o">=</span>larry<span class="m">04</span>
</span><span class='line'><span class="k">set</span> <span class="nv">name5</span><span class="o">=</span>larry<span class="m">05</span>
</span><span class='line'><span class="k">set</span> <span class="nv">name6</span><span class="o">=</span>larry<span class="m">06</span>
</span><span class='line'><span class="k">set</span> <span class="nv">name7</span><span class="o">=</span>larry<span class="m">07</span>
</span><span class='line'><span class="k">set</span> <span class="nv">name8</span><span class="o">=</span>larry<span class="m">08</span>
</span><span class='line'><span class="k">set</span> <span class="nv">name9</span><span class="o">=</span>larry<span class="m">09</span>
</span><span class='line'>
</span><span class='line'><span class="k">SETLOCAL</span> ENABLEDELAYEDEXPANSION
</span><span class='line'><span class="k">FOR</span> <span class="n">/L</span> <span class="nv">%%i</span> in (<span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">9</span>) <span class="k">do</span> <span class="k">echo</span> !name<span class="nv">%%i</span>! wants to sleep.
</span><span class='line'><span class="k">ENDLOCAL</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出DOS里面使用两个感叹号括住对应变量组合就可以计算出相应的变量值，但是有个前提：要先设置<code>SETLOCAL ENABLEDELAYEDEXPANSION</code>。待处理结束后再运行<code>ENDLOCAL</code>，否则后面含有感叹号的地方都不能正常显示。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义Xcode代码模板：Code Snippet]]></title>
    <link href="http://larryhou.github.com/blog/2012/11/26/customize-xcode-snippet/"/>
    <updated>2012-11-26T09:40:00+08:00</updated>
    <id>http://larryhou.github.com/blog/2012/11/26/customize-xcode-snippet</id>
    <content type="html"><![CDATA[<p>Xcode强大的代码提示功能是有目共睹的，用过都知道，可是你是否想过添加一些自定义的代码提示模板？你是否想让if默认的左括号挪到下一行？还有for、while、switch等等……如果你有这方面的需求的话，这篇文章刚好可以帮到你！ <!--more--></p>

<p>在Xcode左下角有个花括号的页签，这里面存储了很多代码提示模板，如下图</p>

<p><img src="http://larryhou.github.com/images/customize-xcode-snippet/fig01.png"><br/>
点击列表里面任一个项目都会弹出一个说明框，里面有个<strong>Edit</strong>和<strong>Done</strong>按钮，这很容易让人产生编辑的想法，其实这是个错觉：这些内置的代码模板是不可编辑的！你看到这里可能会有点着急，因为你可能想问那if左括号是不是不能挪到下一行了？！其实，你如果用过Apple的产品，那你应该会想到Apple不会这么SB，这些都是可以编辑的！下面我们介绍编辑Xcode内置代码模板。</p>

<h2>编辑Xcode内置代码模板</h2>

<p>Xcode的所有代码模板是用一个plist格式xml文件描述的，这文件存储在Xcode的安装目录：</p>

<blockquote><p>/Applications/Xcode.app/Contents/PlugIns/IDECodeSnippetLibrary.ideplugin/Contents/Resources/¬
SystemCodeSnippets.codesnippets</p></blockquote>

<p>可以用任意文本编辑器打开这个代码模板配置文件，这是一段if的代码模板的XML配置,</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>IDECodeSnippetVersion<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;integer&gt;</span>1<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>IDECodeSnippetCompletionPrefix<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>if<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>IDECodeSnippetContents<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>if (<span class="ni">&amp;lt;</span>#condition#<span class="ni">&amp;gt;</span>) {
</span><span class='line'><span class="ni">&amp;lt;</span>#statements#<span class="ni">&amp;gt;</span>
</span><span class='line'>}<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>IDECodeSnippetIdentifier<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>D70E6D11-0297-4BAB-88AA-86D5D5CBBC5D<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>IDECodeSnippetLanguage<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>Xcode.SourceCodeLanguage.C<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>IDECodeSnippetSummary<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>Used for executing code only when a certain condition is true.<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>IDECodeSnippetTitle<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>If Statement<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>IDECodeSnippetCompletionScopes<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;array&gt;</span>
</span><span class='line'>        <span class="nt">&lt;string&gt;</span>CodeBlock<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/array&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中IDECodeSnippetContents字段表示具体代码模板的内容，虽然Xcode不允许编辑内置的代码模板，但是Xcode允许用户自定义代码模板，并且每个模板有一个唯一标识符IDECodeSnippetIdentifier，其中if模板的唯一标记是D70E6D11-0297-4BAB-88AA-86D5D5CBBC5D，那么既然每个代码模板是唯一存在的，那么如果自定义的模板的唯一标识符与内置代码模板相同了会发生什么情况？覆盖！这是我们修改内置代码模板的关键入口，也是核心思想！</p>

<p>到这里一切都变得很清晰了：我们只要自定义一个相同标识符的带模板就可以覆盖内置的代码模板。官方文档介绍了创建自定义模板的方法：在Xcode输入代码模板代码，然后拖拽到Xcode的模板栏，然后点击“<strong>Edit</strong>”就是可以做相关的修改，编辑完后点击“<strong>Done</strong>”就可以使用了，然后在下面这个目录可以找到模板配置文件。</p>

<blockquote><p>~/Library/Developer/Xcode/UserData/CodeSnippets/</p></blockquote>

<p>如果你用上述方法添加了一个自定义模板，那么你在这个目录可能看到类似D70E6D11-0297-4BAB-88AA-86D5D5CBBC5D.codesnippet命名的文件，其实这个文件名就是模板的唯一标识符。其实我们并不想要这样的命名方式，因为不方便维护以及分享，虽然在Xcode里面可以很方便地编辑他们。庆幸的是这个文件名是可以修改的，你可以像这样用一些有含义的字符来修改命名。<br/>
<img src="http://larryhou.github.com/images/customize-xcode-snippet/fig02.png"></p>

<p>但是有个问题：Xcode会自动为我们的模板分配一个唯一标识符，这样就不能达到覆盖的目的。有些同学可能想到从SystemCodeSnippets.codesnippets配置里面查找相关的标识符，然后黏贴过来，这样确实可以达到目的。不过现在我给大家推荐另外一种方法。</p>

<p>首先，到SystemCodeSnippets.codesnippets里面找到你要修改的模板配置，然后复制黏贴到如下这段配置中</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--code config here--&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后修改IDECodeSnippetVersion键值为2，暂时不确定为什么要这么修改，但是Xcode生成的自定义模板配置都是这个值，保持默认1也没多大问题，只是Xcode有时会自动用标识符替换你的自定义命名，所以用2是比较合适的。这样还没完，因为还要添加一个键值为true的字段IDECodeSnippetUserSnippet，该字段标记了模板是否为自定义的，如果是自定义的模板但是没有这个字段，你的Xcode启动后可能会崩溃&#8230;orz</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;key&gt;</span>IDECodeSnippetUserSnippet<span class="nt">&lt;/key&gt;</span>
</span><span class='line'><span class="nt">&lt;true/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么如果替换内置的if模板，那么完整的配置应该是这样的。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetCompletionPrefix<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>if<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetCompletionScopes<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;array&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>CodeBlock<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetContents<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>if (<span class="ni">&amp;lt;</span>#condition#<span class="ni">&amp;gt;</span>)
</span><span class='line'>{
</span><span class='line'>    <span class="ni">&amp;lt;</span>#statements#<span class="ni">&amp;gt;</span>
</span><span class='line'>}<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetIdentifier<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>5163356F-D409-4EDA-B263-EA2E07A50B9C<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetLanguage<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>Xcode.SourceCodeLanguage.C<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetSummary<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>Used for executing code only when a certain condition is true.<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetTitle<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>If Statement<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetUserSnippet<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;true/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetVersion<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;integer&gt;</span>2<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可能注意到类似&amp;lt;#condition#&amp;gt;这样的代码，它们是什么呢？你再写代码遇到代码提示的时候，可能遇到过蓝色泡泡一样的东西，可以用Tab键来切换，那么这个奇怪的字符就是用来添加蓝色泡泡的。因为这是XML配置，所以做了HTML转义；如果你在Xcode里面编辑模板并添加蓝色泡泡的话，直接输入&lt;#condition#>即可，##符号之间可以为任意字符。</p>

<h2>隐藏代码模板提示</h2>

<p>有时候你可能想要隐藏某个内置的模板，这样的需求也是可以完成的。你只需要把IDECodeSnippetCompletionPrefix字段的键值留空既可以，如果你把如下这段配置保存到模板目录，那么你的Xcode将不再弹出if语句的代码提示。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetCompletionPrefix<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetCompletionScopes<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;array&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>CodeBlock<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetContents<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>if (<span class="ni">&amp;lt;</span>#condition#<span class="ni">&amp;gt;</span>)
</span><span class='line'>{
</span><span class='line'>    <span class="ni">&amp;lt;</span>#statements#<span class="ni">&amp;gt;</span>
</span><span class='line'>}<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetIdentifier<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>5163356F-D409-4EDA-B263-EA2E07A50B9C<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetLanguage<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>Xcode.SourceCodeLanguage.C<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetSummary<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>Used for executing code only when a certain condition is true.<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetTitle<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>If Statement<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetUserSnippet<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;true/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetVersion<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;integer&gt;</span>2<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Xcode里面输入if，就不见了if statement的提示</p>

<p><img src="http://larryhou.github.com/images/customize-xcode-snippet/fig03.png"></p>

<p>是不是很酷？！</p>

<p>最后总结一下自定义的注意事项：</p>

<blockquote><ul>
<li>自定义目录不能有相同标识符的模板，否则Xcode启动后会崩溃；</li>
<li>自定义母的模板标识符可以跟系统默认模板标识符相同，可以达到覆盖效果；</li>
<li>若要使用自定义模板覆盖系统模板，则必须有DECodeSnippetUserSnippet字段，否则Xcode启动后会崩溃;</li>
</ul>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIT设置push.default]]></title>
    <link href="http://larryhou.github.com/blog/2012/11/22/git-push-dot-default/"/>
    <updated>2012-11-22T14:50:00+08:00</updated>
    <id>http://larryhou.github.com/blog/2012/11/22/git-push-dot-default</id>
    <content type="html"><![CDATA[<p>今天使用<code>git push</code>命令，结果出现一堆以前没见过的东西</p>

<blockquote><p>warning: push.default 未设置，它的默认值将会在 Git 2.0 由 &#8216;matching&#8217;<br/>修改为 &#8216;simple&#8217;。若要不再显示本信息并在其默认值改变后维持当前使用习惯，<br/>进行如下设置：</p><p>  git config &#8211;global push.default matching</p><p>若要不再显示本信息并从现在开始采用新的使用习惯，设置：</p><p>  git config &#8211;global push.default simple</p><p>参见 &#8216;git help config&#8217; 并查找 &#8216;push.default&#8217; 以获取更多信息。<br/>（&#8217;simple&#8217; 模式由 Git 1.7.11 版本引入。如果您有时要使用老版本的 Git，<br/>为保持兼容，请用 &#8216;current&#8217; 代替 &#8216;simple&#8217; 模式）</p><footer><strong>Terminal.app</strong> <cite>GIT With Version 1.8.0</cite></footer></blockquote>


<p>尼玛，乍一看吓一跳还以为代码出错了，解决这个问题很简单，按照上面的提示在Terminal.app里面运行一下脚本</p>

<blockquote><p>git config &#8211;global push.default matching</p></blockquote>

<p>我在纳闷，GIT版本更新后为毛不自动设置一下.gitconfig配置呢？还要我手动操作一下，难道是想介绍GIT的这新功能？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interface, Protocol, Category and Extension in Objective-C]]></title>
    <link href="http://larryhou.github.com/blog/2012/11/21/interface-protocol-and-category/"/>
    <updated>2012-11-21T21:12:00+08:00</updated>
    <id>http://larryhou.github.com/blog/2012/11/21/interface-protocol-and-category</id>
    <content type="html"><![CDATA[<p>假如你要学习Objective-C，那么你需要搞清楚interface、protocol、category以及extension这几个概念，它们在代码的出现频率非常高，也非常有用。本文将对这几个概念一一来说明，并介绍各自的使用方法。<!--more--></p>

<h2>Interface</h2>

<p>interface在Objective-C里面充当头文件作用，在Xcode里面interface是以*.h为后缀的文件，在里面可以定义类文件所需的成员变量、getter/setter以及函数方法，但是这些声明要放到<code>@interface ... @end</code>指令中间。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Mobile</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@private</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">model</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@protected</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">sn</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@public</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">producer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">photoNumber</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">mail</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span><span class="p">(</span><span class="n">Mobile</span> <span class="o">*</span><span class="p">)</span> <span class="nf">create</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">call</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个头文件里面定义了四个成员变量name、model、sn、producer，其中name、model是私有变量，sn是protected变量，producer为public变量；photoNumber、mail是getter/setter函数;前面有个减号的call是一个实例方法，前面有个加号的create是一个类方法，与Actionscript的public静态方法类似。</p>

<p>interface头文件声明的方法需要在<code>@implementation ... @end</code>指令里面实现，如下</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;Mobile.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Mobile</span>
</span><span class='line'>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">photoNumber</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">mail</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="s">@&quot;iPhone&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="o">-&gt;</span><span class="n">model</span> <span class="o">=</span> <span class="s">@&quot;A1332&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="o">-&gt;</span><span class="n">producer</span> <span class="o">=</span> <span class="s">@&quot;Apple Inc.&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span><span class="p">(</span><span class="n">Mobile</span> <span class="o">*</span><span class="p">)</span><span class="nf">create</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="n">Mobile</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">call</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Call %@&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">photoNumber</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>成员变量可以通过<code>self-></code>来访问，不管该变量是private还是protected、public。相比之下，如果要访问getter/setter方法<code>photoNumber</code>，那么可以有三种方式：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Call %@&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">photoNumber</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Call %@&quot;</span><span class="p">,</span> <span class="n">self</span><span class="o">-&gt;</span><span class="n">photoNumber</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Call %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span> <span class="n">photoNumber</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>call</code>是实例方法，我们可以构造一个<code>Mobile</code>实例来调用，如下</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Mobile</span> <span class="o">*</span><span class="n">mobile</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Mobile</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">mobile</span><span class="p">.</span><span class="n">photoNumber</span> <span class="o">=</span> <span class="s">@&quot;15988886039&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">call</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>而<code>create</code>是类方法，可以通过类名直接访问，如下</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Mobile</span> <span class="o">*</span><span class="n">mobile</span> <span class="o">=</span> <span class="p">[</span><span class="n">Mobile</span> <span class="n">create</span><span class="p">];</span>
</span><span class='line'><span class="n">mobile</span><span class="p">.</span><span class="n">photoNumber</span> <span class="o">=</span> <span class="s">@&quot;15988886039&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">call</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Protocol</h2>

<p>protocol也是一个*.h文件，通过<code>@protocol ... @end</code>来声明接口(函数方法或者getter/setter)，跟interface有点类似。它有什么用呢？</p>

<ul>
<li>声明一个隐藏类的调用接口</li>
<li>在非继承关系的类之间可以做类型转换</li>
</ul>


<p>这个与Actionscript的interface文件作用是一致的，任何类都可以去实现这个protocol接口，然后具有protocol声明的类型。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@protocol</span> <span class="nc">IMobile</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">photoNumber</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">call</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">required</span>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">playMusic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">optional</span>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">restart</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>IMobile</code>接口声明了两个必须实现的接口<code>call、playMusic</code>，一个可选接口<code>restart</code>，也是restart可以选择不实现。实现这个protocol接口，可以在interface文件中添加一个尖括号来声明，如下</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'><span class="cp">#import &quot;IMobile.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Mobile</span> : <span class="nc">NSObject</span> <span class="o">&lt;</span><span class="n">IMobile</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@private</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">model</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@protected</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">sn</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@public</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">producer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">photoNumber</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">mail</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span><span class="p">(</span><span class="n">Mobile</span> <span class="o">*</span><span class="p">)</span> <span class="nf">create</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">call</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后通过<code>@implementation ... @end</code>来实现，<code>IMobile</code>声明了getter/setter方法<code>photoNumber</code>以及<code>call、playMusic</code>两个实例方法，由于<code>photoNumber、call</code>已经被<code>Mobile</code>实现，所以只需要实现<code>playMusic</code>即可。如下</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;Mobile.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Mobile</span>
</span><span class='line'>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">photoNumber</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">mail</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="s">@&quot;iPhone&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="o">-&gt;</span><span class="n">model</span> <span class="o">=</span> <span class="s">@&quot;A1332&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="o">-&gt;</span><span class="n">producer</span> <span class="o">=</span> <span class="s">@&quot;Apple Inc.&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span><span class="p">(</span><span class="n">Mobile</span> <span class="o">*</span><span class="p">)</span><span class="nf">create</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="n">Mobile</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">call</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Call %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span> <span class="n">photoNumber</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">playMusic</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Play music.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>protocol接口实现后，可以这样来使用</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">id</span> <span class="o">&lt;</span><span class="n">IMobile</span><span class="o">&gt;</span> <span class="n">mobile</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Mobile</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="nl">setPhotoNumber:</span><span class="s">@&quot;15988886039&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">playMusic</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">call</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Mobile</span> <span class="o">&lt;</span><span class="n">IMobile</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">mobile</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Mobile</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">mobile</span><span class="p">.</span><span class="n">photoNumber</span> <span class="o">=</span> <span class="s">@&quot;15988886039&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="nl">setPhotoNumber:</span><span class="s">@&quot;15988886039&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">playMusic</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">call</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面说到<code>restart</code>为可选接口，有可能没有被实现，在没有实现的情况下去调用就会报错，对于这种接口就需要在使用前检测一下是否可用，如下</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">SEL</span> <span class="n">restart</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">restart:</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">([</span><span class="n">mobile</span> <span class="nl">respondsToSelector:</span><span class="n">restart</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">mobile</span> <span class="n">restart</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;restart is not complement.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：上面提到<code>@required</code>指令标记的方法必须实现，不然会出现编译警告</p>

<p><img src="http://larryhou.github.com/images/interface-protocol-and-category/fig01.png"></p>

<h2>Category</h2>

<p>category可以对一个类文件添加方法，哪怕不知道这个类的代码，只要有这个类的interface头文件即可。这个功能有什么用呢？举个简单例子就可以很容易理解。</p>

<figure class='code'><figcaption><span>category interface  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">NSObject</span> <span class="nl">(Run)</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">run</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>category implementation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;NSObject+Run.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">NSObject</span> <span class="nl">(Run)</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">run</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Run! ::%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span> <span class="n">className</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>category使用实例</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="s">@&quot;larryhou&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">name</span> <span class="n">run</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">Mobile</span> <span class="o">&lt;</span><span class="n">IMobile</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">mobile</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Mobile</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">mobile</span><span class="p">.</span><span class="n">photoNumber</span> <span class="o">=</span> <span class="s">@&quot;15988886039&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">playMusic</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">call</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">run</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>有没有发现什么情况？<br/>
我在NSObject+Run.h头文件定义了一个<code>run</code>的方法，然后在NSObject+Run.m文件中实现<code>run</code>方法，然后再<code>#import "NSObject+Run.h"</code>，然后奇迹发生了：所有继承了NSObject的类都好像有了<code>run</code>这个方法一样！！！是的，没错就是这样！是不是很酷！！</p>

<p>细心的同学可能已经发现，定义category需要写一个interface文件，<code>@interface</code>指令后面紧跟<strong>被扩展类名</strong>，然后写在圆括号里面写入category名称，可以为任意字符串。在实现categor的interface的时候也要注意：<code>@implementation</code>指令后面紧跟<strong>被扩展类名</strong>，然后在圆括号里面写入category名称，与interface声明保持一致，其他与实现普通类的interface方式一样。</p>

<p>这样再不修改源代码的情况下，给一个类添加方法还可以有另外一个用途：<strong>把类逻辑拆分到不同的文件里面，也就是说一个类可以有多个文件组成</strong>。</p>

<p>前面讲到<code>IMobile</code>有一个<code>@optional</code>标记的方法<code>restart</code>，现在我们把<code>restart</code>声明去掉，通过category方式来扩展<code>Mobile</code>的功能。</p>

<p><code>Mobile</code>扩展头文件</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;Mobile.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Mobile</span> <span class="nl">(Restart)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">restart</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Mobile</code>扩展实现</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;Mobile+Restart.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Mobile</span> <span class="nl">(Restart)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">restart</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Restart mobile phone.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Mobile</code>扩展使用实例</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Mobile</span> <span class="o">*</span><span class="n">mobile</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Mobile</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">mobile</span><span class="p">.</span><span class="n">photoNumber</span> <span class="o">=</span> <span class="s">@&quot;15988886039&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">playMusic</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">restart</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">call</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个功能有点像代码注入，感觉非常棒！\(&#94;o&#94;)/~</p>

<h2>Extension</h2>

<p>我在Mobile.m文件里面添加如下一段代码</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">Mobile</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="n">NSInteger</span> <span class="o">*</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">sleep</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在Mobile.m文件里面实现这些声明</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;Mobile.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Mobile</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="n">NSInteger</span> <span class="o">*</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">sleep</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Mobile</span>
</span><span class='line'>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">photoNumber</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">mail</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="s">@&quot;iPhone&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="o">-&gt;</span><span class="n">model</span> <span class="o">=</span> <span class="s">@&quot;A1332&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="o">-&gt;</span><span class="n">producer</span> <span class="o">=</span> <span class="s">@&quot;Apple Inc.&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span><span class="p">(</span><span class="n">Mobile</span> <span class="o">*</span><span class="p">)</span><span class="nf">create</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="n">Mobile</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">call</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Call %@&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">photoNumber</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Call %@&quot;</span><span class="p">,</span> <span class="n">self</span><span class="o">-&gt;</span><span class="n">photoNumber</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Call %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span> <span class="n">photoNumber</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">playMusic</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Play music.&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">sleep</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sleep</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Sleep.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后调用<code>sleep、size</code>看看发生了什么</p>

<p><img src="http://larryhou.github.com/images/interface-protocol-and-category/fig02.png"></p>

<p>报错了！这是为什么？</p>

<p>这段接口声明看起来好像是跟Mobile.h文件是重复的，其实是对Mobile.h的补充，但是<code>@interface Mobile ()</code>有个没有任何内容的圆括号，那么在这种补充模式下声明的接口是私有的不能在类文件意外调用，在类文件内部是可以使用的，如下</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">playMusic</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Play music.&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">sleep</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>到这里interface、protocol、category和extension这四个概念都已经介绍完了，搞清楚了再去学习Objective-C基本上就是如鱼得水了！GOOD LUCK!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用AppleScript递归遍历文件夹]]></title>
    <link href="http://larryhou.github.com/blog/2012/11/18/list-folder-recursively/"/>
    <updated>2012-11-18T23:11:00+08:00</updated>
    <id>http://larryhou.github.com/blog/2012/11/18/list-folder-recursively</id>
    <content type="html"><![CDATA[<p>最近对AppleScript很感兴趣，使用它可以做一些自动化处理，类似WIN系统的*.bat脚本，不过AppleScript要比它强大很多，对系统的融合更加深入。如果结合Calendar还可以做一些定时计划任务，非常的方便。</p>

<p>现在我写了一个监视共享目录的脚本，它会把最近30天、大于500MB的影片输出一个列表，虽然写了很久，不过也熟悉好多命令以及编写脚本的流程，收获还是蛮大的。在写这个脚本的时候，走了很多弯路，因为我觉得文件夹操作只需要<code>Finder.app</code>就可以，结果出现各种问题，一度想到放弃，不过最后研究AppleScript自带的脚本示例发现要用<code>System Events</code>，可是到现在我也不知道为什么要这样写，因为AppleScript <code>Dictionary</code> 帮助文档已经写得很清楚了&#8230;oops</p>

<!--more-->




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
</pre></td><td class='code'><pre><code class='applescript'><span class='line'><span class="k">global</span> <span class="nv">SAVE_FOLDER</span>
</span><span class='line'><span class="k">set</span> <span class="nv">SAVE_FOLDER</span> <span class="k">to</span> <span class="s2">&quot;movies&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">global</span> <span class="nv">OUTPUT_FILE</span>
</span><span class='line'><span class="k">set</span> <span class="nv">OUTPUT_FILE</span> <span class="k">to</span> <span class="nv">POSIX</span> <span class="nv">file</span> <span class="p">(</span><span class="nv">POSIX</span> <span class="na">path</span> <span class="k">of</span> <span class="p">(</span><span class="nb">path to</span> <span class="nv">desktop</span><span class="p">)</span> <span class="o">&amp;</span> <span class="nv">SAVE_FOLDER</span> <span class="k">as </span><span class="nc">text</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">global</span> <span class="nv">MOVIE_SIZE</span>
</span><span class='line'><span class="k">set</span> <span class="nv">MOVIE_SIZE</span> <span class="k">to</span> <span class="mi">500</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span>
</span><span class='line'>
</span><span class='line'><span class="k">global</span> <span class="nv">MOVIE_FORMATS</span>
</span><span class='line'><span class="k">set</span> <span class="nv">MOVIE_FORMATS</span> <span class="k">to</span> <span class="p">{</span><span class="s2">&quot;mov&quot;</span><span class="p">,</span> <span class="s2">&quot;mkv&quot;</span><span class="p">,</span> <span class="s2">&quot;mp4&quot;</span><span class="p">,</span> <span class="s2">&quot;rmvb&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;Finder&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="nb">exists</span> <span class="nv">OUTPUT_FILE</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>      <span class="nb">make</span> <span class="nb">new</span> <span class="nv">folder</span> <span class="nb">at</span> <span class="p">(</span><span class="nb">path to</span> <span class="nv">desktop</span><span class="p">)</span> <span class="nv">with</span> <span class="na">properties</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="nv">SAVE_FOLDER</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span> <span class="k">if</span>
</span><span class='line'><span class="k">end</span> <span class="k">tell</span>
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nv">OUTPUT_FILE</span> <span class="k">to</span> <span class="nv">POSIX</span> <span class="nv">file</span> <span class="p">((</span><span class="nv">POSIX</span> <span class="na">path</span> <span class="k">of</span> <span class="nv">OUTPUT_FILE</span><span class="p">)</span> <span class="o">&amp;</span> <span class="s2">&quot;/&quot;</span> <span class="o">&amp;</span> <span class="nv">timestamp</span><span class="p">()</span> <span class="o">&amp;</span> <span class="s2">&quot;.txt&quot;</span> <span class="k">as </span><span class="nc">text</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">-- connet remote sharing resource</span>
</span><span class='line'><span class="nb">mount volume</span> <span class="s2">&quot;smb://10.11.8.66/IEDmovie$&quot;</span> <span class="k">as</span> <span class="nv">user</span> <span class="na">name</span> <span class="s2">&quot;larryhou&quot;</span> <span class="nv">with</span> <span class="nv">password</span> <span class="s2">&quot;password&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">-- script entry</span>
</span><span class='line'><span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;System Events&quot;</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_root</span> <span class="k">to</span> <span class="nv">alias</span> <span class="p">(</span><span class="na">path</span> <span class="k">of</span> <span class="nv">disk</span> <span class="s2">&quot;IEDmovie$&quot;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">set</span> <span class="err">_list</span> <span class="k">to</span> <span class="p">(</span><span class="nb">list folder</span> <span class="err">_root</span> <span class="nv">without</span> <span class="nv">invisibles</span><span class="p">)</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_path</span> <span class="k">to</span> <span class="na">path</span> <span class="k">of</span> <span class="err">_root</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">try</span>
</span><span class='line'>      <span class="c">-- open file access if possible</span>
</span><span class='line'>      <span class="nb">open for access</span> <span class="nv">OUTPUT_FILE</span> <span class="nv">with</span> <span class="nb">write</span> <span class="nv">permission</span>
</span><span class='line'>  <span class="k">end</span> <span class="k">try</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nb">set eof</span> <span class="nv">OUTPUT_FILE</span> <span class="k">to</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="p">(</span><span class="k">my</span> <span class="nv">lookForFiles</span><span class="p">(</span><span class="err">_path</span><span class="p">,</span> <span class="err">_list</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nb">close access</span> <span class="nv">OUTPUT_FILE</span>
</span><span class='line'>  
</span><span class='line'><span class="k">end</span> <span class="k">tell</span>
</span><span class='line'>
</span><span class='line'><span class="nb">beep</span> <span class="mi">2</span> <span class="c">-- notification of finishing task with 2 times beep</span>
</span><span class='line'><span class="nb">display dialog</span> <span class="s2">&quot;DONE!!&quot;</span> <span class="nv">with</span> <span class="nv">icon</span> <span class="nb">stop</span> <span class="nv">giving</span> <span class="nv">up</span> <span class="nb">after</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="c">-- filter kernel</span>
</span><span class='line'><span class="c">-- if return true, will be kept, or discarded</span>
</span><span class='line'><span class="k">on</span> <span class="nv">processFile</span><span class="p">(</span><span class="err">_file</span><span class="p">)</span>
</span><span class='line'>  <span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;System Events&quot;</span>
</span><span class='line'>      <span class="k">set</span> <span class="err">_size</span> <span class="k">to</span> <span class="na">size</span> <span class="k">of</span> <span class="err">_file</span>
</span><span class='line'>      <span class="k">set</span> <span class="err">_extension</span> <span class="k">to</span> <span class="na">name</span> <span class="nv">extension</span> <span class="k">of</span> <span class="err">_file</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c">-- keep files larger than MOVIE_SIZE and with specific file extension</span>
</span><span class='line'>      <span class="k">set</span> <span class="err">_available</span> <span class="k">to</span> <span class="p">(</span><span class="err">_size</span> <span class="o">≥</span> <span class="nv">MOVIE_SIZE</span> <span class="ow">and</span> <span class="p">(</span><span class="nv">MOVIE_FORMATS</span> <span class="ow">contains</span> <span class="err">_extension</span><span class="p">))</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">set</span> <span class="err">_date</span> <span class="k">to</span> <span class="p">(</span><span class="nv">modification</span> <span class="nv">date</span> <span class="k">of</span> <span class="err">_file</span><span class="p">)</span>
</span><span class='line'>      <span class="k">set</span> <span class="err">_current</span> <span class="k">to</span> <span class="nb">current date</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c">-- keep files modified within last month</span>
</span><span class='line'>      <span class="k">set</span> <span class="err">_available</span> <span class="k">to</span> <span class="err">_available</span> <span class="ow">and</span> <span class="p">((</span><span class="err">_current</span> <span class="o">-</span> <span class="err">_date</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mi">24</span> <span class="o">*</span> <span class="mi">3600</span><span class="p">)</span> <span class="o">≤</span> <span class="mi">30</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>      <span class="no">return</span> <span class="err">_available</span>
</span><span class='line'>  <span class="k">end</span> <span class="k">tell</span>
</span><span class='line'><span class="k">end</span> <span class="nv">processFile</span>
</span><span class='line'>
</span><span class='line'><span class="c">-- search files recursively</span>
</span><span class='line'><span class="k">on</span> <span class="nv">lookForFiles</span><span class="p">(</span><span class="nv">prefix</span><span class="p">,</span> <span class="nv">names</span><span class="p">)</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;System Events&quot;</span>
</span><span class='line'>      <span class="k">repeat</span> <span class="nv">with</span> <span class="nv">var</span> <span class="k">in</span> <span class="nv">names</span>
</span><span class='line'>          <span class="k">set</span> <span class="err">_item</span> <span class="k">to</span> <span class="p">(</span><span class="nv">alias</span> <span class="p">(</span><span class="nv">prefix</span> <span class="o">&amp;</span> <span class="nv">var</span> <span class="k">as </span><span class="nc">text</span><span class="p">))</span>
</span><span class='line'>          <span class="k">if</span> <span class="nv">kind</span> <span class="k">of</span> <span class="err">_item</span> <span class="ow">is</span> <span class="s2">&quot;文件夹&quot;</span> <span class="k">then</span>
</span><span class='line'>              <span class="k">set</span> <span class="err">_path</span> <span class="k">to</span> <span class="na">path</span> <span class="k">of</span> <span class="err">_item</span>
</span><span class='line'>              <span class="k">set</span> <span class="err">_list</span> <span class="k">to</span> <span class="nb">list folder</span> <span class="err">_item</span> <span class="nv">without</span> <span class="nv">invisibles</span>
</span><span class='line'>              
</span><span class='line'>              <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="err">_result</span> <span class="o">&amp;</span> <span class="p">(</span><span class="k">my</span> <span class="nv">lookForFiles</span><span class="p">(</span><span class="err">_path</span><span class="p">,</span> <span class="err">_list</span><span class="p">))</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>              <span class="k">if</span> <span class="k">my</span> <span class="nv">processFile</span><span class="p">(</span><span class="err">_item</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>                  <span class="k">set</span> <span class="err">_itemPath</span> <span class="k">to</span> <span class="nv">POSIX</span> <span class="na">path</span> <span class="k">of</span> <span class="err">_item</span>
</span><span class='line'>                  
</span><span class='line'>                  <span class="k">set</span> <span class="err">_date</span> <span class="k">to</span> <span class="nv">modification</span> <span class="nv">date</span> <span class="k">of</span> <span class="err">_item</span>
</span><span class='line'>                  
</span><span class='line'>                  <span class="k">set</span> <span class="err">_info</span> <span class="k">to</span> <span class="p">(</span><span class="nb">year</span> <span class="k">of</span> <span class="err">_date</span> <span class="o">&amp;</span> <span class="s2">&quot;-&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="k">set</span> <span class="err">_info</span> <span class="k">to</span> <span class="p">(</span><span class="err">_info</span> <span class="o">&amp;</span> <span class="k">my</span> <span class="nv">substr</span><span class="p">(</span><span class="nb">month</span> <span class="k">of</span> <span class="err">_date</span> <span class="k">as </span><span class="nc">text</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">&amp;</span> <span class="s2">&quot;-&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="k">set</span> <span class="err">_info</span> <span class="k">to</span> <span class="p">(</span><span class="err">_info</span> <span class="o">&amp;</span> <span class="k">my</span> <span class="nv">padding</span><span class="p">(</span><span class="nb">day</span> <span class="k">of</span> <span class="err">_date</span><span class="p">)</span> <span class="o">&amp;</span> <span class="s2">&quot;: &quot;</span><span class="p">)</span>
</span><span class='line'>                  
</span><span class='line'>                  <span class="k">set</span> <span class="err">_current</span> <span class="k">to</span> <span class="nb">current date</span>
</span><span class='line'>                  <span class="k">set</span> <span class="err">_offset</span> <span class="k">to</span> <span class="p">(</span><span class="err">_current</span> <span class="o">-</span> <span class="err">_date</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mi">24</span> <span class="o">*</span> <span class="mi">3600</span><span class="p">)</span>
</span><span class='line'>                  <span class="k">set</span> <span class="err">_offset</span> <span class="k">to</span> <span class="p">(</span><span class="err">_offset</span> <span class="k">as</span> <span class="nv">integer</span><span class="p">)</span>
</span><span class='line'>                  
</span><span class='line'>                  <span class="k">set</span> <span class="err">_info</span> <span class="k">to</span> <span class="err">_info</span> <span class="o">&amp;</span> <span class="k">my</span> <span class="nv">padding</span><span class="p">(</span><span class="err">_offset</span><span class="p">)</span> <span class="o">&amp;</span> <span class="s2">&quot;: &quot;</span>
</span><span class='line'>                  <span class="k">set</span> <span class="err">_info</span> <span class="k">to</span> <span class="err">_info</span> <span class="o">&amp;</span> <span class="na">name</span> <span class="k">of</span> <span class="err">_item</span> <span class="o">&amp;</span> <span class="s2">&quot;: &quot;</span>
</span><span class='line'>                  
</span><span class='line'>                  <span class="c">-- append file path and return</span>
</span><span class='line'>                  <span class="k">set</span> <span class="err">_info</span> <span class="k">to</span> <span class="err">_info</span> <span class="o">&amp;</span> <span class="err">_itemPath</span> <span class="o">&amp;</span> <span class="p">(</span><span class="nb">ASCII character</span> <span class="mi">13</span><span class="p">)</span>
</span><span class='line'>                  
</span><span class='line'>                  <span class="c">-- save to UTF-8 encoding file</span>
</span><span class='line'>                  <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="err">_result</span> <span class="o">&amp;</span> <span class="err">_info</span>
</span><span class='line'>                  
</span><span class='line'>                  <span class="nb">write</span> <span class="p">(</span><span class="err">_info</span> <span class="k">as </span><span class="nc">string</span><span class="p">)</span> <span class="k">to</span> <span class="nv">OUTPUT_FILE</span> <span class="k">as</span> «<span class="nb">class utf8</span>»
</span><span class='line'>                  
</span><span class='line'>              <span class="k">end</span> <span class="k">if</span>
</span><span class='line'>          <span class="k">end</span> <span class="k">if</span>
</span><span class='line'>          
</span><span class='line'>      <span class="k">end</span> <span class="k">repeat</span>
</span><span class='line'>  <span class="k">end</span> <span class="k">tell</span>
</span><span class='line'>  <span class="no">return</span> <span class="err">_result</span>
</span><span class='line'><span class="k">end</span> <span class="nv">lookForFiles</span>
</span><span class='line'>
</span><span class='line'><span class="k">on</span> <span class="nv">timestamp</span><span class="p">()</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_date</span> <span class="k">to</span> <span class="nb">current date</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="err">_result</span> <span class="o">&amp;</span> <span class="p">(</span><span class="nb">year</span> <span class="k">of</span> <span class="err">_date</span><span class="p">)</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="err">_result</span> <span class="o">&amp;</span> <span class="p">(</span><span class="k">my</span> <span class="nv">substr</span><span class="p">((</span><span class="nb">month</span> <span class="k">of</span> <span class="err">_date</span> <span class="k">as </span><span class="nc">text</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="err">_result</span> <span class="o">&amp;</span> <span class="nv">padding</span><span class="p">(</span><span class="nb">day</span> <span class="k">of</span> <span class="err">_date</span><span class="p">)</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="err">_result</span> <span class="o">&amp;</span> <span class="nv">padding</span><span class="p">(</span><span class="nv">hours</span> <span class="k">of</span> <span class="err">_date</span><span class="p">)</span>
</span><span class='line'>  <span class="c">--set _result to _result &amp; padding(minutes of _date)</span>
</span><span class='line'>  <span class="c">--set _result to _result &amp; padding((time of _date) mod 60)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="no">return</span> <span class="err">_result</span> <span class="k">as </span><span class="nc">text</span>
</span><span class='line'><span class="k">end</span> <span class="nv">timestamp</span>
</span><span class='line'>
</span><span class='line'><span class="k">on</span> <span class="nv">padding</span><span class="p">(</span><span class="err">_data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_str</span> <span class="k">to</span> <span class="p">(</span><span class="err">_data</span> <span class="k">as </span><span class="nc">text</span><span class="p">)</span>
</span><span class='line'>  <span class="k">repeat</span>
</span><span class='line'>      <span class="k">if</span> <span class="nv">length</span> <span class="k">of</span> <span class="err">_str</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="k">then</span>
</span><span class='line'>          <span class="k">set</span> <span class="err">_str</span> <span class="k">to</span> <span class="p">(</span><span class="s2">&quot;0&quot;</span> <span class="o">&amp;</span> <span class="err">_str</span> <span class="k">as </span><span class="nc">text</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="k">exit</span> <span class="k">repeat</span>
</span><span class='line'>      <span class="k">end</span> <span class="k">if</span>
</span><span class='line'>  <span class="k">end</span> <span class="k">repeat</span>
</span><span class='line'>  <span class="no">return</span> <span class="err">_str</span>
</span><span class='line'><span class="k">end</span> <span class="nv">padding</span>
</span><span class='line'>
</span><span class='line'><span class="c">-- get substring from text string</span>
</span><span class='line'><span class="k">on</span> <span class="nv">substr</span><span class="p">(</span><span class="err">_str</span><span class="p">,</span> <span class="err">_offset</span><span class="p">,</span> <span class="err">_length</span><span class="p">)</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_strlen</span> <span class="k">to</span> <span class="nv">length</span> <span class="k">of</span> <span class="err">_str</span>
</span><span class='line'>  <span class="k">if</span> <span class="err">_length</span> <span class="o">&gt;</span> <span class="err">_strlen</span> <span class="k">then</span>
</span><span class='line'>      <span class="k">set</span> <span class="err">_length</span> <span class="k">to</span> <span class="err">_strlen</span>
</span><span class='line'>  <span class="k">end</span> <span class="k">if</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="err">_offset</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="k">then</span>
</span><span class='line'>      <span class="k">set</span> <span class="err">_offset</span> <span class="k">to</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span> <span class="k">if</span>
</span><span class='line'>  
</span><span class='line'>  <span class="no">return</span> <span class="nb">text</span> <span class="err">_offset</span> <span class="nb">thru</span> <span class="p">(</span><span class="err">_offset</span> <span class="o">+</span> <span class="err">_length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="k">of</span> <span class="err">_str</span> <span class="k">as </span><span class="nc">text</span>
</span><span class='line'><span class="k">end</span> <span class="nv">substr</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>list folder recursively  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='applescript'><span class='line'><span class="k">on</span> <span class="nv">recurseFolder</span><span class="p">(</span><span class="err">_folder</span><span class="p">)</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_list</span> <span class="k">to</span> <span class="nb">list folder</span> <span class="err">_folder</span> <span class="nv">without</span> <span class="nv">invisibles</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_path</span> <span class="k">to</span> <span class="err">_folder</span> <span class="k">as </span><span class="nc">string</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">repeat</span> <span class="nv">with</span> <span class="err">_name</span> <span class="k">in</span> <span class="err">_list</span>
</span><span class='line'>      <span class="k">set</span> <span class="err">_item</span> <span class="k">to</span> <span class="nv">alias</span> <span class="p">(</span><span class="err">_path</span> <span class="o">&amp;</span> <span class="err">_name</span> <span class="k">as </span><span class="nc">string</span><span class="p">)</span>
</span><span class='line'>      <span class="k">set</span> <span class="err">_info</span> <span class="k">to</span> <span class="nb">info for</span> <span class="err">_item</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="nv">folder</span> <span class="k">of</span> <span class="err">_info</span> <span class="k">then</span>
</span><span class='line'>          <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="err">_result</span> <span class="o">&amp;</span> <span class="k">my</span> <span class="nv">recurseFolder</span><span class="p">(</span><span class="err">_item</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="err">_result</span> <span class="o">&amp;</span> <span class="nv">POSIX</span> <span class="na">path</span> <span class="k">of</span> <span class="err">_item</span>
</span><span class='line'>      <span class="k">end</span> <span class="k">if</span>
</span><span class='line'>  <span class="k">end</span> <span class="k">repeat</span>
</span><span class='line'>  
</span><span class='line'>  <span class="no">return</span> <span class="err">_result</span>
</span><span class='line'><span class="k">end</span> <span class="nv">recurseFolder</span>
</span></code></pre></td></tr></table></div></figure>


<p>再补充一个shell版本同功能的脚本</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nb">cd</span> ~/remote/movie
</span><span class='line'>
</span><span class='line'><span class="nv">TIMESTAMP</span><span class="o">=</span><span class="k">$(</span><span class="nb">eval </span>date <span class="s1">&#39;+%Y%m%d%h&#39;</span><span class="k">)</span>
</span><span class='line'><span class="nv">OUTPUT</span><span class="o">=</span>~/Desktop/movies/<span class="nv">$TIMESTAMP</span>.txt
</span><span class='line'>
</span><span class='line'>mount_smbfs //larryhou@10.11.8.66/IEDmovie<span class="nv">$ </span>.
</span><span class='line'>find -E . -regex <span class="s1">&#39;.*\.(mp4|rmvb|mkv)$&#39;</span> -size +300M -ctime -2d -exec ls -lhc <span class="o">{}</span> <span class="se">\;</span> | sed -E <span class="s1">&#39;s|^.+staff[^a-z0-9]*||&#39;</span> | sed -E <span class="s1">&#39;s|./([^/]+/)+([^/]+)$|\2 @&amp;|g&#39;</span> &gt; <span class="nv">$OUTPUT</span>
</span><span class='line'>
</span><span class='line'><span class="c">#| sed -E &#39;s|([0-9:]+ )+||g&#39; &gt; $OUTPUT</span>
</span><span class='line'>diskutil unmount force .
</span><span class='line'>
</span><span class='line'>mate <span class="nv">$OUTPUT</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MAC分区失败解决方法]]></title>
    <link href="http://larryhou.github.com/blog/2012/11/13/disk-partion-fail-with-mac/"/>
    <updated>2012-11-13T21:27:00+08:00</updated>
    <id>http://larryhou.github.com/blog/2012/11/13/disk-partion-fail-with-mac</id>
    <content type="html"><![CDATA[<p>我的MAC硬盘分了三个分区，我把其中两个删掉了，然后扩大主分区的可用空间，结果出错：</p>

<h3><strong>Mac分区失败 (未能修改分区图，因为文件系统验证失败）</strong></h3>

<p>Google了一下这种情况还蛮普遍的，解决方法也很简单：</p>

<blockquote><ul>
<li>重启系统，按住<code>⌘+s</code>进入MAC命令行模式</li>
<li>输入<code>fsck -f</code>回车</li>
<li>输入<code>reboot</code>回车</li>
</ul>
</blockquote>

<p>经过以上三步后我的问题解决了，第一次围观命令行模式还是挺欣喜的。不过话说回来，Apple一向很重视用户体验，但现在居然出现这种问题实在有点费解：我差点就想格式化重装系统了&#8230;orz</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在WIN系统使用AS3版protobuf]]></title>
    <link href="http://larryhou.github.com/blog/2012/11/11/as3proto-win/"/>
    <updated>2012-11-11T17:39:00+08:00</updated>
    <id>http://larryhou.github.com/blog/2012/11/11/as3proto-win</id>
    <content type="html"><![CDATA[<p>本文介绍了在WIN系统布置AS3版protobuf运行环境的方法，在阅读本文之前需要先下载<a href="https://github.com/larryhou/as3proto-osx" title="Actionscript3.0版protobuf">AS3版protobuf源码</a>。<!--more--></p>

<h2>安装<a href="http://mingw.org/wiki/Getting_Started" title="http://mingw.org/wiki/Getting_Started">MinGW</a></h2>

<ul>
<li>下载<a href="http://sourceforge.net/projects/mingw/files/Installer/mingw-get-inst/" title="http://sourceforge.net/projects/mingw/files/Installer/mingw-get-inst/">mingw-get installer</a>最新版本，保持默认配置一路“Next”直至安装完成</li>
<li>把安装目录C:\MinGW\bin添加PATH环境变量，注销电脑重新进入系统</li>
<li>打开命令提示符运行</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mingw-get install gcc g++ mingw32-make msys-base
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>初始化MSYS shell并启动</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd </span>C:<span class="se">\M</span>SYS<span class="se">\1</span>.0
</span><span class='line'>      
</span><span class='line'>rem 启动MSYS shell
</span><span class='line'>msys.bat
</span><span class='line'>      
</span><span class='line'>rem 初始化MSYS shell，第一次启动时运行
</span><span class='line'>/postinstall/pi.sh
</span></code></pre></td></tr></table></div></figure>


<h2>编译安装 protobuf 命令行</h2>

<ul>
<li>CD到源码目录</li>
</ul>


<p>如果源码在D:/as3proto-osx/sdk/project目录，需要使用</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> /d/as3proto-osx/sdk/project
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>编译安装protobuf</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>./configure --prefix<span class="o">=</span>/mingw
</span><span class='line'>      
</span><span class='line'>make      
</span><span class='line'>make check        
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>检查是否安成功</li>
</ul>


<p>打开命令提示符，输入</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>protoc --help
</span></code></pre></td></tr></table></div></figure>


<p>安装成功后应该出现如下信息，包含&#8211;as3_out参数</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Usage: protoc <span class="o">[</span>OPTION<span class="o">]</span> PROTO_FILES
</span><span class='line'>Parse PROTO_FILES and generate output based on the options given:
</span><span class='line'>-IPATH, --proto_path<span class="o">=</span>PATH   Specify the directory in which to search <span class="k">for</span>
</span><span class='line'><span class="k">                          </span>imports.  May be specified multiple <span class="nb">times</span>;
</span><span class='line'>                          directories will be searched in order.  If not
</span><span class='line'>                          given, the current working directory is used.
</span><span class='line'>--version                   Show version info and exit.
</span><span class='line'>-h, --help                  Show this text and exit.
</span><span class='line'>--encode<span class="o">=</span>MESSAGE_TYPE       Read a text-format message of the given <span class="nb">type</span>
</span><span class='line'><span class="nb">                          </span>from standard input and write it in binary
</span><span class='line'>                          to standard output.  The message <span class="nb">type </span>must
</span><span class='line'>                          be defined in PROTO_FILES or their imports.
</span><span class='line'>--decode<span class="o">=</span>MESSAGE_TYPE       Read a binary message of the given <span class="nb">type </span>from
</span><span class='line'>                          standard input and write it in text format
</span><span class='line'>                          to standard output.  The message <span class="nb">type </span>must
</span><span class='line'>                          be defined in PROTO_FILES or their imports.
</span><span class='line'>--decode_raw                Read an arbitrary protocol message from
</span><span class='line'>                          standard input and write the raw tagalue
</span><span class='line'>                          pairs in text format to standard output.  No
</span><span class='line'>                          PROTO_FILES should be given when using this
</span><span class='line'>                          flag.
</span><span class='line'>-oFILE,                     Writes a FileDescriptorSet <span class="o">(</span>a protocol buffer,
</span><span class='line'>--descriptor_set_out<span class="o">=</span>FILE defined in descriptor.proto<span class="o">)</span> containing all of
</span><span class='line'>                          the input files to FILE.
</span><span class='line'>--include_imports           When using --descriptor_set_out, also include
</span><span class='line'>                          all dependencies of the input files in the
</span><span class='line'>                          <span class="nb">set</span>, so that the <span class="nb">set </span>is self-contained.
</span><span class='line'>--error_format<span class="o">=</span>FORMAT       Set the format in which to print errors.
</span><span class='line'>                          FORMAT may be <span class="s1">&#39;gcc&#39;</span> <span class="o">(</span>the default<span class="o">)</span> or <span class="s1">&#39;msvs&#39;</span>
</span><span class='line'>                          <span class="o">(</span>Microsoft Visual Studio format<span class="o">)</span>.
</span><span class='line'>--plugin<span class="o">=</span>EXECUTABLE         Specifies a plugin executable to use.
</span><span class='line'>                          Normally, protoc searches the PATH <span class="k">for</span>
</span><span class='line'><span class="k">                          </span>plugins, but you may specify additional
</span><span class='line'>                          executables not in the path using this flag.
</span><span class='line'>                          Additionally, EXECUTABLE may be of the form
</span><span class='line'>                          <span class="nv">NAME</span><span class="o">=</span>PATH, in which <span class="k">case </span>the given plugin name
</span><span class='line'>                          is mapped to the given executable even <span class="k">if</span>
</span><span class='line'><span class="k">                          </span>the executable<span class="err">&#39;</span>s own name differs.
</span><span class='line'>--as3_out<span class="o">=</span>OUT_DIR           Generate ActionScript <span class="nb">source </span>file.
</span><span class='line'>--cpp_out<span class="o">=</span>OUT_DIR           Generate C++ header and source.
</span><span class='line'>--java_out<span class="o">=</span>OUT_DIR          Generate Java <span class="nb">source </span>file.
</span><span class='line'>--python_out<span class="o">=</span>OUT_DIR        Generate Python <span class="nb">source </span>file.
</span></code></pre></td></tr></table></div></figure>


<h2>使用 protobuf 生成AS3代码</h2>

<ul>
<li>直接使用命令行</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>protoc --proto_path<span class="o">=[</span>proto path<span class="o">]</span> --as3_out<span class="o">=[</span>folder <span class="k">for </span>as3 saving<span class="o">]</span> <span class="o">[</span>proto file<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用 protobuf.bat 生成    <br/>
进入sdk目录，打开setup.bat文件，初始化一下配置

<ul>
<li>把PROTO_DIR修改为*.proto文件的存储目录</li>
<li>把OUTPUT_DIR修改为生成AS3代码的输出目录</li>
</ul>
</li>
</ul>


<p>其实在默认配置下，直接运行protobuf.bat输入hello既可以在OUTPUT_DIR目录生成实例代码</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>----------------------------
</span><span class='line'>Type proto file name:
</span><span class='line'>hello
</span><span class='line'>
</span><span class='line'>... ... ...
</span><span class='line'>
</span><span class='line'>D:<span class="se">\C</span>++<span class="se">\a</span>s3proto-osx<span class="se">\s</span>dk&gt;protoc --proto_path<span class="o">=</span><span class="s2">&quot;..\proto&quot;</span> --as3_out<span class="o">=</span><span class="s2">&quot;..\output&quot;</span> <span class="s2">&quot;..\proto\hello.proto&quot;</span>
</span><span class='line'>
</span><span class='line'>DONE! Press any key to process another proto file...
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在OSX系统使用AS3版protobuf]]></title>
    <link href="http://larryhou.github.com/blog/2012/11/10/as3proto-osx/"/>
    <updated>2012-11-10T23:30:00+08:00</updated>
    <id>http://larryhou.github.com/blog/2012/11/10/as3proto-osx</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/larryhou/as3proto-osx" title="Actionscript3.0版protobuf">该项目</a>搭建了 AS3 protobuf 所需的OSX运行环境以及AS3类库，整合了Google <a href="http://code.google.com/p/protobuf/" title="[v2.3.0] http://code.google.com/p/protobuf/">protobuf</a>和<a href="http://code.google.com/p/protobuf-actionscript3/" title="http://code.google.com/p/protobuf-actionscript3/">protobuf-actionscript3</a>第三方插件资源，本文来介绍一下AS3版protobuf的使用方法。</p>

<!--more-->


<p></p>

<ul>
<li><strong>编译安装protoc命令行</strong>   <br/>
在Terminal里面进入sdk/project目录，运行下面脚本</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>./configure
</span><span class='line'>  
</span><span class='line'>make
</span><span class='line'>make check
</span><span class='line'>sudo make install
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>检查protobuf是否安装成功</strong><br/>
在Terminal中输入，回车</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>protoc --help
</span></code></pre></td></tr></table></div></figure>


<p>检查一下帮助内容是否包含&#8211;as3_out选项</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>--as3_out<span class="o">=</span>OUT_DIR           Generate ActionScript <span class="nb">source </span>file.
</span><span class='line'>--cpp_out<span class="o">=</span>OUT_DIR           Generate C++ header and source.
</span><span class='line'>--java_out<span class="o">=</span>OUT_DIR          Generate Java <span class="nb">source </span>file.
</span><span class='line'>--python_out<span class="o">=</span>OUT_DIR        Generate Python <span class="nb">source </span>file.
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>使用命令行生成AS3代码</strong></li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>protoc --proto_path<span class="o">=</span>proto --as3_out<span class="o">=</span>output proto/hello.proto
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>使用protobuf.sh快速代码生成</strong><br/>
打开protobuf.sh文本文件

<ul>
<li>把OUTPUT_DIR设置成AS3保存目录，支持绝对目录、相对目录</li>
<li>把PROTO_DIR设置成*.proto文件存储目录</li>
</ul>
</li>
</ul>


<p>在Terminal里面进入protobuf.sh所在目录</p>

<p>hell.proto文件内容</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="n">message</span> <span class="n">HelloWorld</span><span class="o">{</span>
</span><span class='line'>    <span class="n">optional</span> <span class="n">int32</span> <span class="n">code</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="n">optional</span> <span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>    <span class="n">optional</span> <span class="n">Info</span> <span class="n">info</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">message</span> <span class="n">Info</span><span class="o">{</span>
</span><span class='line'>        <span class="n">optional</span> <span class="n">string</span> <span class="n">version</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sh protobuf.sh
</span><span class='line'>  
</span><span class='line'>- - - - - - - - - - - - -
</span><span class='line'>Type proto file name:
</span><span class='line'>hello
</span><span class='line'>
</span><span class='line'>-&gt; proto/hello.proto
</span><span class='line'>- - - - -
</span><span class='line'>
</span><span class='line'>DONE! Press ENTER key to <span class="k">continue</span>...
</span></code></pre></td></tr></table></div></figure>


<p>在OUTPUT_DIR目录里面就可以得到相应的AS3代码</p>

<p>HelloWorld.as代码内容</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="c1">// Generated by the protocol buffer compiler.  DO NOT EDIT!</span>
</span><span class='line'>
</span><span class='line'><span class="kd">package</span>  <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">import</span> <span class="nn">com.google.protobuf.</span><span class="o">*;</span>
</span><span class='line'>  <span class="k">import</span> <span class="nn">flash.utils.</span><span class="o">*;</span>
</span><span class='line'>  <span class="k">import</span> <span class="nn">com.hurlant.math.BigInteger</span><span class="o">;</span>
</span><span class='line'>  <span class="k">import</span> <span class="nn">Info</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="n">HelloWorld</span> <span class="kd">extends</span> <span class="n">Message</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function </span><span class="nf">HelloWorld</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">registerField</span><span class="o">(</span><span class="s2">&quot;code&quot;</span><span class="o">,</span><span class="s2">&quot;&quot;</span><span class="o">,</span><span class="n">Descriptor</span><span class="o">.</span><span class="na">INT32</span><span class="o">,</span><span class="n">Descriptor</span><span class="o">.</span><span class="na">LABEL_OPTIONAL</span><span class="o">,</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="n">registerField</span><span class="o">(</span><span class="s2">&quot;name&quot;</span><span class="o">,</span><span class="s2">&quot;&quot;</span><span class="o">,</span><span class="n">Descriptor</span><span class="o">.</span><span class="na">STRING</span><span class="o">,</span><span class="n">Descriptor</span><span class="o">.</span><span class="na">LABEL_OPTIONAL</span><span class="o">,</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>      <span class="n">registerField</span><span class="o">(</span><span class="s2">&quot;info&quot;</span><span class="o">,</span><span class="s2">&quot;Info&quot;</span><span class="o">,</span><span class="n">Descriptor</span><span class="o">.</span><span class="na">MESSAGE</span><span class="o">,</span><span class="n">Descriptor</span><span class="o">.</span><span class="na">LABEL_OPTIONAL</span><span class="o">,</span><span class="mi">3</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// optional int32 code = 1;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">var</span> <span class="n">code</span><span class="p">:</span><span class="kt">int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// optional string name = 2;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">var</span> <span class="n">name</span><span class="p">:</span><span class="kt">String</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// optional .HelloWorld.Info info = 3;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">var</span> <span class="n">info</span><span class="p">:</span><span class="kt">Info</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>  
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>Info.as代码内容</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="c1">// Generated by the protocol buffer compiler.  DO NOT EDIT!</span>
</span><span class='line'>
</span><span class='line'><span class="kd">package</span>  <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">import</span> <span class="nn">com.google.protobuf.</span><span class="o">*;</span>
</span><span class='line'>  <span class="k">import</span> <span class="nn">flash.utils.</span><span class="o">*;</span>
</span><span class='line'>  <span class="k">import</span> <span class="nn">com.hurlant.math.BigInteger</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="n">Info</span> <span class="kd">extends</span> <span class="n">Message</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function </span><span class="nf">Info</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">registerField</span><span class="o">(</span><span class="s2">&quot;version&quot;</span><span class="o">,</span><span class="s2">&quot;&quot;</span><span class="o">,</span><span class="n">Descriptor</span><span class="o">.</span><span class="na">STRING</span><span class="o">,</span><span class="n">Descriptor</span><span class="o">.</span><span class="na">LABEL_OPTIONAL</span><span class="o">,</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// optional string version = 1;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">var</span> <span class="n">version</span><span class="p">:</span><span class="kt">String</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用INDIRECT函数引用Excel单元格]]></title>
    <link href="http://larryhou.github.com/blog/2012/11/09/make-reference-to-excel-cell-with-indirect/"/>
    <updated>2012-11-09T23:58:00+08:00</updated>
    <id>http://larryhou.github.com/blog/2012/11/09/make-reference-to-excel-cell-with-indirect</id>
    <content type="html"><![CDATA[<p>如果需要动态引用Excel单元格的时候，INDIRECT函数可以帮上大忙，为什么这么说？它的传参是一个字符串，比如引用第一列第二行的数据可以用<code>=INDIRECT("A2")</code>，这样有什么好处呢？作比较复杂的数据操作的时候行列可能都是动态计算出来的，这个时候结合<code>ADDRESS(row, column)</code>方法算出行列对应的地址名称传参到INDIRECT（也即<code>=INDIRECT(ADDRESS(row, column))</code>）就可以很方便地引用任意单元格。</p>

<p>有时候为了方便可能会引用其他表单的数值，假设另外一个表单的名称叫<strong>sheet</strong>，那么引用另外一个表单的单元格可以使用<code>=INDIRECT("sheet!A2")</code>来引用<strong>sheet</strong>表单的第二行第一列的单元格。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Excel导出XML格式文件]]></title>
    <link href="http://larryhou.github.com/blog/2012/11/08/export-xml-from-excel/"/>
    <updated>2012-11-08T10:08:00+08:00</updated>
    <id>http://larryhou.github.com/blog/2012/11/08/export-xml-from-excel</id>
    <content type="html"><![CDATA[<p>生成XML的方式有很多：如果你是程序员，那么你可以通过变成快速生成你想要的XML格式；如果你是其他用户，你可能会使用记事本等文本编辑工具来手动写XML。这些都不是问题，但是数据量很大的时候，如果你不是程序猿会不会郁闷？<!--more-->本文介绍了一种方法不借助编程也可以高效、快速地生成XML配置文件。在看这篇文章之前，我先假定了你们都会用微软Office工具Excel，其实不会问题也不是很大:-D</p>

<p>假设现在有个任务，要生成一个班的学生XML配置，这个配置包含学生的学号、姓名、性别、年龄、出生年月信息，那么现在有两种XML格式可以选择：</p>

<figure class='code'><figcaption><span>1.把每个学生做成一个XML节点，相关信息描述到属性字段  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;&quot;</span> <span class="na">name=</span><span class="s">&quot;&quot;</span> <span class="na">sex=</span><span class="s">&quot;&quot;</span> <span class="na">age=</span><span class="s">&quot;&quot;</span> <span class="na">birth=</span><span class="s">&quot;&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>2.把每个学生的相关信息分别做成一个单独XML节点  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;student&gt;</span>
</span><span class='line'>  <span class="nt">&lt;id&gt;&lt;/id&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;sex&gt;&lt;/sex&gt;</span>
</span><span class='line'>  <span class="nt">&lt;age&gt;&lt;/age&gt;</span>
</span><span class='line'>  <span class="nt">&lt;birth&gt;&lt;/birth&gt;</span>
</span><span class='line'><span class="nt">&lt;/student&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以很容易发现第一种描述更简洁，看起来有点小清新的感觉，我们现在就以第一种格式来介绍生成XML的方法。不过你真的很喜欢第二种方式，看到最后你惊喜地发现，我的方法也可解决你的问题。</p>

<p>现在回归正题，如果用Excel去录入这些数据，大家很可能是这样来做数据，这样做很容易理解，并且容易批量拖拽处理。<img src="http://larryhou.github.com/images/export-xml-from-excel/fig01.png">
到这里我们可以发现，其实Excel可以完全把我们的数据描述清楚，那么如果Excel能把这些数据转成XML岂不是很好？是的，Excel可以做这些，但是Excel不知道你想要的XML格式，所以要给Excel定一个规则让它直到我们想要什么字段、输出什么格式。现在有两种方法给Excel指定输出规则：简单XML映射、SchemaXML映射，下面分别来做介绍。</p>

<h2>简单XML映射</h2>

<p>对于上面的数据我们用下面这段XML来描述，然后保存为rule.xml文件。</p>

<figure class='code'><figcaption><span>简单XML映射规则  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;data&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;&quot;</span> <span class="na">name=</span><span class="s">&quot;&quot;</span> <span class="na">sex=</span><span class="s">&quot;&quot;</span> <span class="na">age=</span><span class="s">&quot;&quot;</span> <span class="na">birth=</span><span class="s">&quot;&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;&quot;</span> <span class="na">name=</span><span class="s">&quot;&quot;</span> <span class="na">sex=</span><span class="s">&quot;&quot;</span> <span class="na">age=</span><span class="s">&quot;&quot;</span> <span class="na">birth=</span><span class="s">&quot;&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/data&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>data</code>是输出XML的根节点，<code>student</code>是单个学生信息节点，这两个字段限定了XML输出的节点名称，<code>&lt;student&gt;&lt;/student&gt;</code>数据描述了单条XML节点属性的字段名称。这样整个输出规则就定制好了，是不是非常简单？可能会疑惑为什么有两条重复的<code>student</code>数据，这里我先不透露，大家可以看完这篇文章后自己试试看看什么效果。</p>

<p>接下来我们把这个XML规则导入Excel，进入“<strong>文件</strong>-><strong>选项</strong>-><strong>自定义功能区</strong>”，右边栏里面找到<strong>开发工具</strong>，确保其前面的复选框被勾上，并且确保<strong>XML</strong>前面的复选框也被勾上，如下图</p>

<p><img src="http://larryhou.github.com/images/export-xml-from-excel/fig02.png"></p>

<p>然后返回主界面，在选项卡区域找到<strong>开发工具</strong>，点击<strong>源</strong>按钮，这时Excel会出现一个左边栏，这时导入XML规则的入口操作界面，</p>

<p><img src="http://larryhou.github.com/images/export-xml-from-excel/fig03.png"></p>

<p>点击“<strong>XML 映射&#8230;</strong>-><strong>添加</strong>”，把之前保存的<strong>rule.xml</strong>文件导入进来，这时右边栏会出现一个树形的属性列表，列表字段就是<strong>rule.xml</strong>规则里面定义的字段，这些自动都是可以拖拽的：把<code>id</code>拖拽到<code>学号</code>栏，一次类推，把所有的字段都映射到Excel的数据栏。
<img src="http://larryhou.github.com/images/export-xml-from-excel/fig04.png"></p>

<p>这样就完成了所有的规则定义以及映射工作，接下来就是高潮来临的时刻：<strong>输出XML配置</strong>。这一步非常简单，只需要点击一个按钮“<strong>开发者工具</strong>-><strong>导出</strong>”，然后选择你要输出的文件位置保存即可。</p>

<figure class='code'><figcaption><span>XML导出结果 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;data&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;5325035&quot;</span> <span class="na">name=</span><span class="s">&quot;name::01&quot;</span> <span class="na">sex=</span><span class="s">&quot;0&quot;</span> <span class="na">major=</span><span class="s">&quot;21&quot;</span> <span class="na">birth=</span><span class="s">&quot;33349&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;5325036&quot;</span> <span class="na">name=</span><span class="s">&quot;name::02&quot;</span> <span class="na">sex=</span><span class="s">&quot;1&quot;</span> <span class="na">major=</span><span class="s">&quot;22&quot;</span> <span class="na">birth=</span><span class="s">&quot;33208&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;5325037&quot;</span> <span class="na">name=</span><span class="s">&quot;name::03&quot;</span> <span class="na">sex=</span><span class="s">&quot;0&quot;</span> <span class="na">major=</span><span class="s">&quot;20&quot;</span> <span class="na">birth=</span><span class="s">&quot;33744&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;5325038&quot;</span> <span class="na">name=</span><span class="s">&quot;name::04&quot;</span> <span class="na">sex=</span><span class="s">&quot;0&quot;</span> <span class="na">major=</span><span class="s">&quot;20&quot;</span> <span class="na">birth=</span><span class="s">&quot;33914&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;5325039&quot;</span> <span class="na">name=</span><span class="s">&quot;name::05&quot;</span> <span class="na">sex=</span><span class="s">&quot;0&quot;</span> <span class="na">major=</span><span class="s">&quot;21&quot;</span> <span class="na">birth=</span><span class="s">&quot;33398&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;5325040&quot;</span> <span class="na">name=</span><span class="s">&quot;name::06&quot;</span> <span class="na">sex=</span><span class="s">&quot;1&quot;</span> <span class="na">major=</span><span class="s">&quot;21&quot;</span> <span class="na">birth=</span><span class="s">&quot;33403&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;5325041&quot;</span> <span class="na">name=</span><span class="s">&quot;name::07&quot;</span> <span class="na">sex=</span><span class="s">&quot;1&quot;</span> <span class="na">major=</span><span class="s">&quot;21&quot;</span> <span class="na">birth=</span><span class="s">&quot;33366&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;5325042&quot;</span> <span class="na">name=</span><span class="s">&quot;name::08&quot;</span> <span class="na">sex=</span><span class="s">&quot;0&quot;</span> <span class="na">major=</span><span class="s">&quot;23&quot;</span> <span class="na">birth=</span><span class="s">&quot;32712&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;5325043&quot;</span> <span class="na">name=</span><span class="s">&quot;name::09&quot;</span> <span class="na">sex=</span><span class="s">&quot;1&quot;</span> <span class="na">major=</span><span class="s">&quot;21&quot;</span> <span class="na">birth=</span><span class="s">&quot;33536&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;5325044&quot;</span> <span class="na">name=</span><span class="s">&quot;name::10&quot;</span> <span class="na">sex=</span><span class="s">&quot;1&quot;</span> <span class="na">major=</span><span class="s">&quot;20&quot;</span> <span class="na">birth=</span><span class="s">&quot;33672&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;5325045&quot;</span> <span class="na">name=</span><span class="s">&quot;name::11&quot;</span> <span class="na">sex=</span><span class="s">&quot;1&quot;</span> <span class="na">major=</span><span class="s">&quot;21&quot;</span> <span class="na">birth=</span><span class="s">&quot;33397&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/data&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>整个操作是不是很简单？结果是不是很完美？！！细心的同学可能发现了出生日期导出的好像有点奇怪，其实不必诧异：这时Excel表示日期的原始数据。但是跟想象的结果好像有点出入，你是否想对输出的格式作进一步的限制？如果是，那么下一个章节是你需要关注的。</p>

<h2>SchemaXML映射</h2>

<p>其实我对Schema XML的了解也不太多，有一点我是可以确认的：<strong>SchemaXML是一个XML内容的规则，它描述了XML有什么样的内容，并限定了XML内容有什么格式；简单说它是一个XML的语法规范</strong>。为什么这样说呢？因为实际上我们为XML定义的没一个字段都是有其含义的，比如<strong>年龄</strong>字段只可能是一个整数，不可能是其他字符串之类的值；而<strong>出生日期</strong>就是一个日期格式，以此类推。这样你就会有点豁然开朗的感觉，是的，SchemaXML可以描述任意XML内容。到这里，我们可以用SchemaXML做Excel导出XML的规则就一点不奇怪了，应该说用它就最合适不过了！SchemaXML其实也是一个XML文件，但是写起来相对有点门槛。如果为上面的数据写一个SchemaXML规则，那么就应该类似下面这样：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;xs:schema</span> <span class="na">xmlns:xs=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="na">elementFormDefault=</span><span class="s">&quot;qualified&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;data&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xs:complexType&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xs:sequence&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">maxOccurs=</span><span class="s">&quot;unbounded&quot;</span> <span class="na">name=</span><span class="s">&quot;student&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;xs:complexType&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;xs:attribute</span> <span class="na">name=</span><span class="s">&quot;id&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:integer&quot;</span> <span class="na">use=</span><span class="s">&quot;required&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;xs:attribute</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="na">use=</span><span class="s">&quot;required&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;xs:attribute</span> <span class="na">name=</span><span class="s">&quot;sex&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:integer&quot;</span> <span class="na">use=</span><span class="s">&quot;required&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;xs:attribute</span> <span class="na">name=</span><span class="s">&quot;age&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:integer&quot;</span> <span class="na">use=</span><span class="s">&quot;required&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;xs:attribute</span> <span class="na">name=</span><span class="s">&quot;birth&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:date&quot;</span> <span class="na">use=</span><span class="s">&quot;required&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/xs:complexType&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/xs:element&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/xs:sequence&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/xs:complexType&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/xs:element&gt;</span>
</span><span class='line'><span class="nt">&lt;/xs:schema&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>具体SchemaXML里面的这些字段表示什么意思，这就超出了本文介绍的范围，有兴趣的同学可以Google一些相关资料来学习一下。除了学习资料，也可以使用现成的可视化工具来生成配置，比如OxygenXML、LiquidXML等。下面是Oxygen可视化编辑工具的界面
<img src="http://larryhou.github.com/images/export-xml-from-excel/fig05.png">
这里就不对这些工具做过多的介绍，有兴趣的同学可以下来体验下。</p>

<p>把上面这段SchemaXML规则保存为<strong>rule.xsd</strong>文件，采用导入<strong>rule.xml</strong>的方式导入rule.xsd文件，导入后也会生成类似的树形字段列表，然后拖拽映射到相应的Excel数据列上，点击导出即可。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;data&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;5325035&quot;</span> <span class="na">name=</span><span class="s">&quot;name::01&quot;</span> <span class="na">sex=</span><span class="s">&quot;0&quot;</span> <span class="na">age=</span><span class="s">&quot;21&quot;</span> <span class="na">birth=</span><span class="s">&quot;1991-04-21&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;5325036&quot;</span> <span class="na">name=</span><span class="s">&quot;name::02&quot;</span> <span class="na">sex=</span><span class="s">&quot;1&quot;</span> <span class="na">age=</span><span class="s">&quot;22&quot;</span> <span class="na">birth=</span><span class="s">&quot;1990-12-01&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;5325037&quot;</span> <span class="na">name=</span><span class="s">&quot;name::03&quot;</span> <span class="na">sex=</span><span class="s">&quot;0&quot;</span> <span class="na">age=</span><span class="s">&quot;20&quot;</span> <span class="na">birth=</span><span class="s">&quot;1992-05-20&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;5325038&quot;</span> <span class="na">name=</span><span class="s">&quot;name::04&quot;</span> <span class="na">sex=</span><span class="s">&quot;0&quot;</span> <span class="na">age=</span><span class="s">&quot;20&quot;</span> <span class="na">birth=</span><span class="s">&quot;1992-11-06&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;5325039&quot;</span> <span class="na">name=</span><span class="s">&quot;name::05&quot;</span> <span class="na">sex=</span><span class="s">&quot;0&quot;</span> <span class="na">age=</span><span class="s">&quot;21&quot;</span> <span class="na">birth=</span><span class="s">&quot;1991-06-09&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;5325040&quot;</span> <span class="na">name=</span><span class="s">&quot;name::06&quot;</span> <span class="na">sex=</span><span class="s">&quot;1&quot;</span> <span class="na">age=</span><span class="s">&quot;21&quot;</span> <span class="na">birth=</span><span class="s">&quot;1991-06-14&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;5325041&quot;</span> <span class="na">name=</span><span class="s">&quot;name::07&quot;</span> <span class="na">sex=</span><span class="s">&quot;1&quot;</span> <span class="na">age=</span><span class="s">&quot;21&quot;</span> <span class="na">birth=</span><span class="s">&quot;1991-05-08&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;5325042&quot;</span> <span class="na">name=</span><span class="s">&quot;name::08&quot;</span> <span class="na">sex=</span><span class="s">&quot;0&quot;</span> <span class="na">age=</span><span class="s">&quot;23&quot;</span> <span class="na">birth=</span><span class="s">&quot;1989-07-23&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;5325043&quot;</span> <span class="na">name=</span><span class="s">&quot;name::09&quot;</span> <span class="na">sex=</span><span class="s">&quot;1&quot;</span> <span class="na">age=</span><span class="s">&quot;21&quot;</span> <span class="na">birth=</span><span class="s">&quot;1991-10-25&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;5325044&quot;</span> <span class="na">name=</span><span class="s">&quot;name::10&quot;</span> <span class="na">sex=</span><span class="s">&quot;1&quot;</span> <span class="na">age=</span><span class="s">&quot;20&quot;</span> <span class="na">birth=</span><span class="s">&quot;1992-03-09&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student</span> <span class="na">id=</span><span class="s">&quot;5325045&quot;</span> <span class="na">name=</span><span class="s">&quot;name::11&quot;</span> <span class="na">sex=</span><span class="s">&quot;1&quot;</span> <span class="na">age=</span><span class="s">&quot;21&quot;</span> <span class="na">birth=</span><span class="s">&quot;1991-06-08&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/data&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是使用SchemaXML导出的配置结果，在日期字段里面月份、日期如果是一位数字的前面会自动补0占位，看起来非常工整。</p>

<h2>每个字段单独输出XML节点</h2>

<p>这中方式映射与字段输出属性模式是非常类似，区别只是规则定义格式的差别，如果使用简单XML做规则，那么就应该是这样</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;data&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student&gt;</span>
</span><span class='line'>      <span class="nt">&lt;id&gt;&lt;/id&gt;</span>
</span><span class='line'>      <span class="nt">&lt;name&gt;&lt;/name&gt;</span>
</span><span class='line'>      <span class="nt">&lt;sex&gt;&lt;/sex&gt;</span>
</span><span class='line'>      <span class="nt">&lt;age&gt;&lt;/age&gt;</span>
</span><span class='line'>      <span class="nt">&lt;birth&gt;&lt;/birth&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/student&gt;</span>
</span><span class='line'>  <span class="nt">&lt;student&gt;</span>
</span><span class='line'>      <span class="nt">&lt;id&gt;&lt;/id&gt;</span>
</span><span class='line'>      <span class="nt">&lt;name&gt;&lt;/name&gt;</span>
</span><span class='line'>      <span class="nt">&lt;sex&gt;&lt;/sex&gt;</span>
</span><span class='line'>      <span class="nt">&lt;age&gt;&lt;/age&gt;</span>
</span><span class='line'>      <span class="nt">&lt;birth&gt;&lt;/birth&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/student&gt;</span>
</span><span class='line'><span class="nt">&lt;/data&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的规则与上面类似，也是重复两段<code>student</code>，这个是必须的，原理也同上面类似。</p>

<p>如果使用SchemaXML，那么规则应该这样</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;xs:schema</span> <span class="na">xmlns:xs=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="na">elementFormDefault=</span><span class="s">&quot;qualified&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;data&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xs:complexType&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xs:sequence&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xs:element</span> <span class="na">maxOccurs=</span><span class="s">&quot;unbounded&quot;</span> <span class="na">name=</span><span class="s">&quot;student&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;xs:complexType&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;xs:sequence&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;id&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:integer&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;sex&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:integer&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;age&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:integer&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;birth&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:date&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/xs:sequence&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/xs:complexType&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/xs:element&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/xs:sequence&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/xs:complexType&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/xs:element&gt;</span>
</span><span class='line'><span class="nt">&lt;/xs:schema&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>相应的Oxygen可视化模型大致如下图</p>

<p><img src="http://larryhou.github.com/images/export-xml-from-excel/fig06.png"></p>

<h2>注意事项</h2>

<ul>
<li>虽然XML、SchemaXML规则可以描述很复杂的XML内容，但是Excel只支持最多二级的XML配置导出</li>
<li>使用XML做规则时，一定不能只使用一条数据来描述，否则生成的结果只有Excel标题栏文本，而不是数据本身</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用charles远程调试iOS移动应用]]></title>
    <link href="http://larryhou.github.com/blog/2012/11/05/remote-debug-with-charles-proxy/"/>
    <updated>2012-11-05T16:38:00+08:00</updated>
    <id>http://larryhou.github.com/blog/2012/11/05/remote-debug-with-charles-proxy</id>
    <content type="html"><![CDATA[<p>做iOS移动应用很多开发者会喜欢抓网络发包、回包来联调服务端借口以及定位其他网络问题。如果在Windows系统可以使用fiddler来做iOS的远程代理，只要fiddler所在系统与iOS设备同时连上同一个局域网即可。但是在OSX系统上没有fiddler，相信做iOS开发用windows系统的不多，其实不要纠结：其实跨平台http抓包工具charles也可以做远程代理，也就是说iOS也可以通过charles来调试，charles调试的相关技术都可以对iOS适用。</p>

<p>那怎么才能实现charles做iOS的远程代理呢？先看charles官网的文档。</p>

<blockquote><p>USING CHARLES FROM AN IPHONE</p><p>To use Charles as your HTTP proxy on your iPhone you must manually configure the HTTP Proxy settings on your WiFi network in your iPhone&#8217;s Settings.</p><p>Go to the Settings app, tap Wi-Fi, find the network you are connected to and then tap the blue disclosure arrow to configure the network. Scroll down to the HTTP Proxy setting, tap Manual. Enter the IP address of your computer running Charles in the Server field, and the port Charles is running on in the Port field (usually 8888). Leave Authentication set to Off.</p><p>All of your web traffic from your iPhone will now be sent via Charles. You should see a prompt in Charles when you first make a connection from the iPhone, asking you to allow the traffic.</p><p>Remember to disable the HTTP Proxy in your Settings when you stop using Charles, otherwise you&#8217;ll get confusing network failures in your applications!</p><footer><strong>charlesproxy.com</strong> <cite><a href='http://www.charlesproxy.com/documentation/faqs/using-charles-from-an-iphone/'>Remote Debug iOS APP With Charles</a></cite></footer></blockquote>




<!--more-->


<p><img class="right" src="http://larryhou.github.com/images/remote-debug-with-charles-proxy/settings.png" width="430">
从这段文档可以知道只需要打开iOS的WiFi设置，滚屏到底部的代理设置部分，点击“手动”页签, 在“<strong>服务器</strong>”栏输入charles所在系统的网络IP地址，在&#8221;<strong>端口</strong>&#8220;栏输入“<strong>8888</strong>”，然后随便打开一个需要网络的APP，这个时候OSX系统上的charles会出现一个弹窗，这是一个授权远程代理的确认框，点击”<strong>allow</strong>”允许iOS连接本机的charles。</p>

<p><img class="left" src="http://larryhou.github.com/images/remote-debug-with-charles-proxy/allow.png"></p>

<p>经过这样设置后，所有iOS上的http请求都可以被charles抓到包，看到“<strong>sequence</strong>”视图疯狂滚屏，你也会有瞬间高潮了一样的感觉！</p>

<p><img src="http://larryhou.github.com/images/remote-debug-with-charles-proxy/package.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AppleScript：循环]]></title>
    <link href="http://larryhou.github.com/blog/2012/11/05/applescript-xun-huan/"/>
    <updated>2012-11-05T01:07:00+08:00</updated>
    <id>http://larryhou.github.com/blog/2012/11/05/applescript-xun-huan</id>
    <content type="html"><![CDATA[<p>AppleScript是一个比较接近自然语言脚本语言，习惯了传统编程的程序猿一时还真难以适应这种表达和思考方式，不过了解其中的规律后，你就会发现AppleScript其实是一种非常容易、非常生活化的编程语言。在这篇文章里面着重介绍循环控制指令。</p>

<!--more-->


<p>在Applescript里面实现循环效果就要使用<code>repeat</code>命令，结合不同的关键字又有不同的循环控制效果。尽管如此，在任何时候想结束循环的地方使用<code>exit</code>命令则可随时退出。</p>

<h3>repeat</h3>

<p>该命令执行无限循环，直至执行遇到<code>exit [repeat]</code>命令</p>

<figure class='code'><figcaption><span>repeat  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='applescript'><span class='line'><span class="k">set</span> <span class="nv">var</span> <span class="k">to</span> <span class="mi">0</span>
</span><span class='line'><span class="k">repeat</span>
</span><span class='line'>  <span class="k">if</span> <span class="nv">var</span> <span class="o">≥</span> <span class="mi">100</span> <span class="k">then</span>
</span><span class='line'>      <span class="k">exit</span> <span class="k">repeat</span>
</span><span class='line'>  <span class="k">end</span> <span class="k">if</span>
</span><span class='line'><span class="k">end</span> <span class="k">repeat</span>
</span></code></pre></td></tr></table></div></figure>


<h3>repeat <em>n</em> [times]</h3>

<p>该命令执行<strong><em>n</em></strong>次循环，除非遇到<code>exit [repeat]</code>命令</p>

<figure class='code'><figcaption><span>repeat &#8230; times  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='applescript'><span class='line'><span class="k">set</span> <span class="nv">var</span> <span class="k">to</span> <span class="mi">0</span>
</span><span class='line'><span class="k">repeat</span> <span class="mi">5</span> <span class="k">times</span>
</span><span class='line'>  <span class="k">set</span> <span class="nv">var</span> <span class="k">to</span> <span class="nv">var</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nb">log</span> <span class="nv">var</span>
</span><span class='line'><span class="k">end</span> <span class="k">repeat</span>
</span></code></pre></td></tr></table></div></figure>


<h3>repeat until <em>condition</em></h3>

<p>该命令执行循环直至<strong><em>until</em></strong>条件成立，除非遇到<code>exit [repeat]</code>命令</p>

<figure class='code'><figcaption><span>repeat until &#8230;  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='applescript'><span class='line'><span class="k">set</span> <span class="nv">var</span> <span class="k">to</span> <span class="mi">0</span>
</span><span class='line'><span class="k">repeat</span> <span class="k">until</span> <span class="nv">var</span> <span class="o">≥</span> <span class="mi">100</span>
</span><span class='line'>  <span class="k">set</span> <span class="nv">var</span> <span class="k">to</span> <span class="nv">var</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nb">log</span> <span class="nv">var</span>
</span><span class='line'><span class="k">end</span> <span class="k">repeat</span>
</span></code></pre></td></tr></table></div></figure>


<h3>repeat while <em>condition</em></h3>

<p>该命令执行循环只要<strong><em>while</em></strong>条件成立，除非遇到<code>exit [repeat]</code>命令</p>

<figure class='code'><figcaption><span>repeat while &#8230;  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='applescript'><span class='line'><span class="k">set</span> <span class="nv">var</span> <span class="k">to</span> <span class="mi">0</span>
</span><span class='line'><span class="k">repeat</span> <span class="k">while</span> <span class="nv">var</span> <span class="o">&lt;</span> <span class="mi">100</span>
</span><span class='line'>  <span class="k">set</span> <span class="nv">var</span> <span class="k">to</span> <span class="nv">var</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nb">log</span> <span class="nv">var</span>
</span><span class='line'><span class="k">end</span> <span class="k">repeat</span>
</span></code></pre></td></tr></table></div></figure>


<h3>repeat with <em>var</em> from <em>start</em> to <em>end</em> [by <em>step</em>]</h3>

<p>该命令执行循环只要<strong><em>while</em></strong>条件成立，除非遇到<code>exit [repeat]</code>命令</p>

<figure class='code'><figcaption><span>repeat with var from &#8230; to &#8230; by &#8230;  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='applescript'><span class='line'><span class="k">repeat</span> <span class="nv">with</span> <span class="nv">var</span> <span class="k">from</span> <span class="mi">0</span> <span class="k">to</span> <span class="mi">100</span> <span class="k">by</span> <span class="mi">5</span>
</span><span class='line'>  <span class="nb">log</span> <span class="nv">var</span>
</span><span class='line'><span class="k">end</span> <span class="k">repeat</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果<strong><em>by</em></strong>参数没有，则默认<code>var</code>每个循环+1</p>

<figure class='code'><figcaption><span>repeat with var from &#8230; to &#8230;  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='applescript'><span class='line'><span class="k">repeat</span> <span class="nv">with</span> <span class="nv">var</span> <span class="k">from</span> <span class="mi">0</span> <span class="k">to</span> <span class="mi">100</span>
</span><span class='line'>  <span class="nb">log</span> <span class="nv">var</span>
</span><span class='line'><span class="k">end</span> <span class="k">repeat</span>
</span></code></pre></td></tr></table></div></figure>


<h3>repeat with <em>var</em> in <em>list</em></h3>

<p>该命令可以实现列表遍历的效果，除非遇到<code>exit [repeat]</code>命令</p>

<figure class='code'><figcaption><span>repeat with var in &#8230;  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='applescript'><span class='line'><span class="k">set</span> <span class="err">_list</span> <span class="k">to</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">}</span>
</span><span class='line'><span class="k">repeat</span> <span class="nv">with</span> <span class="nv">var</span> <span class="k">in</span> <span class="err">_list</span>
</span><span class='line'>  <span class="nb">log</span> <span class="nv">var</span>
</span><span class='line'><span class="k">end</span> <span class="k">repeat</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install git with macport]]></title>
    <link href="http://larryhou.github.com/blog/2012/10/26/install-git-with-macport/"/>
    <updated>2012-10-26T16:27:00+08:00</updated>
    <id>http://larryhou.github.com/blog/2012/10/26/install-git-with-macport</id>
    <content type="html"><![CDATA[<p>不知道怎么回事儿，我的git有时候会抽风，现在又抽风了：我的<code>git-svn</code>不见了，这里是用<code>macport</code>安装的脚本，以备下次重装又要google半天&#8230;</p>

<figure class='code'><figcaption><span>install git with svn</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo port install git-core +svn +doc +bash_completion +gitweb</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BitmapData.draw() 和 DisplayObject.blendMode]]></title>
    <link href="http://larryhou.github.com/blog/2012/10/25/BitmapData.draw-and-DisplayObject.blendMode/"/>
    <updated>2012-10-25T00:00:00+08:00</updated>
    <id>http://larryhou.github.com/blog/2012/10/25/BitmapData.draw-and-DisplayObject.blendMode</id>
    <content type="html"><![CDATA[<p><code>BitmapData.draw()</code>如果遇到<code>DisplayObject.blendMode</code>有时候效果会异常，这里有个陷阱&#8230;oops</p>

<figure class='code'><figcaption><span>simple exmaple  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="kd">var</span> <span class="n">container</span><span class="p">:</span><span class="kt">Sprite</span> <span class="o">=</span> <span class="k">new</span> <span class="o">[</span><span class="n">some</span> <span class="n">DisplayObjectContainer</span> <span class="kd">class</span><span class="o">]();</span>
</span><span class='line'><span class="kd">var</span> <span class="n">childA</span><span class="p">:</span><span class="kt">Sprite</span> <span class="o">=</span> <span class="k">new</span> <span class="o">[</span><span class="n">some</span> <span class="n">DisplayObject</span> <span class="kd">class</span><span class="o">]();</span>
</span><span class='line'><span class="kd">var</span> <span class="n">childB</span><span class="p">:</span><span class="kt">Sprite</span> <span class="o">=</span> <span class="k">new</span> <span class="o">[</span><span class="n">some</span> <span class="n">DisplayObject</span> <span class="kd">class</span><span class="o">]();</span>
</span><span class='line'>
</span><span class='line'><span class="n">childA</span><span class="o">.</span><span class="na">blendMode</span> <span class="o">=</span> <span class="n">BlendMode</span><span class="o">.</span><span class="na">ADD</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">container</span><span class="o">.</span><span class="na">addChild</span><span class="o">(</span><span class="n">childA</span><span class="o">);</span>
</span><span class='line'><span class="n">container</span><span class="o">.</span><span class="na">addChild</span><span class="o">(</span><span class="n">childB</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="n">data</span><span class="p">:</span><span class="kt">BitmapData</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">BitmapData</span><span class="o">(</span><span class="n">container</span><span class="o">.</span><span class="na">width</span><span class="o">,</span> <span class="n">container</span><span class="o">.</span><span class="na">height</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="n">data</span><span class="o">.</span><span class="na">draw</span><span class="o">(</span><span class="n">container</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上面这段代码，看起来没有什么问题，但是如果把<code>data</code>通过<code>Bitmap</code>显示出来，就会发现效果有些诡异，这是因为<code>BitmapData</code>在<code>draw</code>的时候，会自动忽略<code>childA.blendMode</code>属性，除非把<code>childA</code>的父级容器设置为<code>container.blendMode = BlendMode.LAYER</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActionScript Syntax Highlight in Octopress]]></title>
    <link href="http://larryhou.github.com/blog/2012/10/22/ActionScript-Syntax-Highlight/"/>
    <updated>2012-10-22T00:00:00+08:00</updated>
    <id>http://larryhou.github.com/blog/2012/10/22/ActionScript-Syntax-Highlight</id>
    <content type="html"><![CDATA[<p>Here is a <code>bezier</code> utils method in ActionScript.</p>

<!--more-->




<figure class='code'><figcaption><span> (bezier.as)</span> <a href='http://larryhou.github.com/downloads/code/bezier.as'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='actionscript3'><span class='line'><span class="k">package</span> <span class="nn">ifrog.math</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">import</span> <span class="nn">flash.geom.Point</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * 贝塞尔工具</span>
</span><span class='line'><span class="cm">  * @author Larry H.</span>
</span><span class='line'><span class="cm">  * @createTime 2012/8/21 16:24</span>
</span><span class='line'><span class="cm">  * </span>
</span><span class='line'><span class="cm">  * 绘制贝赛尔曲线点</span>
</span><span class='line'><span class="cm">  * @param   list    控制点</span>
</span><span class='line'><span class="cm">  * @param   ratio   贝赛尔曲线比例</span>
</span><span class='line'><span class="cm">  * @return  返回ratio比例对应贝赛尔曲线上的点坐标</span>
</span><span class='line'><span class="cm">  * list.length代表贝赛尔曲线的阶数，一般二阶即可满足需要，二阶需要三个点</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">function </span><span class="nf">bezier</span><span class="o">(</span><span class="n">list</span><span class="o">:</span><span class="kt">Array</span><span class="err">/*list.length</span> <span class="err">&gt;=</span> <span class="err">2*/,</span> <span class="n">ratio</span><span class="o">:</span><span class="kt">Number</span><span class="err">/*0</span> <span class="err">=&lt;</span> <span class="err">ratio</span> <span class="err">&lt;=</span> <span class="err">1*/</span><span class="o">):</span><span class="kt">Point</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(!</span><span class="n">list</span><span class="o">)</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="n">pos</span><span class="p">:</span><span class="kt">Point</span><span class="o">;</span>
</span><span class='line'>          <span class="kd">var</span> <span class="n">length</span><span class="p">:</span><span class="kt">int</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="kd">var</span> <span class="n">i</span><span class="p">:</span><span class="kt">int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="n">pos</span> <span class="o">=</span> <span class="n">list</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>              
</span><span class='line'>              <span class="n">list</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">Point</span><span class="o">();</span>
</span><span class='line'>              <span class="n">list</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="n">x</span> <span class="o">=</span> <span class="o">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">ratio</span><span class="o">)</span> <span class="o">*</span> <span class="n">pos</span><span class="o">.</span><span class="na">x</span> <span class="o">+</span> <span class="n">ratio</span> <span class="o">*</span> <span class="n">list</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">].</span><span class="n">x</span><span class="o">;</span>
</span><span class='line'>              <span class="n">list</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="n">y</span> <span class="o">=</span> <span class="o">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">ratio</span><span class="o">)</span> <span class="o">*</span> <span class="n">pos</span><span class="o">.</span><span class="na">y</span> <span class="o">+</span> <span class="n">ratio</span> <span class="o">*</span> <span class="n">list</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">].</span><span class="n">y</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">list</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">arguments</span><span class="o">.</span><span class="na">callee</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="k">arguments</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="n">list</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
