<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[沐风白桦]]></title>
  <link href="http://larryhou.github.io/atom.xml" rel="self"/>
  <link href="http://larryhou.github.io/"/>
  <updated>2016-12-06T01:02:10+08:00</updated>
  <id>http://larryhou.github.io/</id>
  <author>
    <name><![CDATA[larryhou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[awk使用教程]]></title>
    <link href="http://larryhou.github.io/blog/2016/12/05/awk-tutorials/"/>
    <updated>2016-12-05T19:13:55+08:00</updated>
    <id>http://larryhou.github.io/blog/2016/12/05/awk-tutorials</id>
    <content type="html"><![CDATA[<h3>入门</h3>

<p><code>awk</code>在文本处理脚本<code>shell</code>里很常用，它从管道<code>|</code>或文件中读取每一行，然后按照一定规则把每行自动分成多列，默认使用<strong>空格</strong>自动分列。在<code>awk</code>里面，<strong>空格</strong>可以是<code>空白字符</code>、<code>TAB制表符</code>。分列可以让<code>awk</code>脚本很方便地引用这些分隔开的值，<code>$1</code>表示第一列，<code>$2</code>表示第二列，等等以此类推，当然<code>$</code>后面的数字可以是个很大的值，比如<code>$1024</code>。另外，在<code>awk</code>中使用<code>$0</code>表示整行,<code>$NF</code>表示最后一列。</p>

<p>先来看个示例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;this seems like a pretty nice example&#39;</span> <span class="p">|</span> awk <span class="s1">&#39;{print $1}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>$1</code>是<strong>this</strong>，<code>$2</code>是<strong>seems</strong>，<code>$7</code>和<code>$NF</code>是<strong>example</strong>，在该例子中使用<strong>空格</strong>分隔成7列，完整语法是这样的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;this seems like a pretty nice example&#39;</span> <span class="p">|</span> awk -F<span class="s1">&#39; &#39;</span> <span class="s1">&#39;{print $1}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到<code>awk</code>多了一个<code>-F</code>参数，通过该参数可以设置各种分隔符，<strong>单字符</strong>、<strong>多字符</strong>都能很好的支持，同样的示例我可以添加<code>-F' like '</code>这样的多字符分隔符，可以得到结果<strong>this seems</strong>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;this seems like a pretty nice example&#39;</span> <span class="p">|</span> awk -F<span class="s1">&#39; like &#39;</span> <span class="s1">&#39;{print $1}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>除了<code>NF</code>，<code>awk</code>还有一些其他内置变量，见下表</p>

<table>
<thead>
<tr>
<th style="text-align:left;">内置变量</th>
<th style="text-align:center;">变量描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">CONVFMT</td>
<td style="text-align:center;">conversion format used when converting numbers (default %.6g)</td>
</tr>
<tr>
<td style="text-align:left;">FS     </td>
<td style="text-align:center;">regular expression used to separate  fields;  also  settable  by option -Ffs.</td>
</tr>
<tr>
<td style="text-align:left;">NF     </td>
<td style="text-align:center;">number of fields in the current record</td>
</tr>
<tr>
<td style="text-align:left;">NR     </td>
<td style="text-align:center;">ordinal number of the current record</td>
</tr>
<tr>
<td style="text-align:left;">FNR    </td>
<td style="text-align:center;">ordinal number of the current record in the current file</td>
</tr>
<tr>
<td style="text-align:left;">FILENAME </td>
<td style="text-align:center;">the name of the current input file</td>
</tr>
<tr>
<td style="text-align:left;">RS     </td>
<td style="text-align:center;">input record separator (default newline)</td>
</tr>
<tr>
<td style="text-align:left;">OFS    </td>
<td style="text-align:center;">output field separator (default blank)</td>
</tr>
<tr>
<td style="text-align:left;">ORS    </td>
<td style="text-align:center;">output record separator (default newline)</td>
</tr>
<tr>
<td style="text-align:left;">OFMT   </td>
<td style="text-align:center;">output format for numbers (default %.6g)</td>
</tr>
<tr>
<td style="text-align:left;">SUBSEP </td>
<td style="text-align:center;">separates multiple subscripts (default 034)</td>
</tr>
<tr>
<td style="text-align:left;">ARGC   </td>
<td style="text-align:center;">argument count, assignable</td>
</tr>
<tr>
<td style="text-align:left;">ARGV   </td>
<td style="text-align:center;">argument array, assignable; non-null members are taken as file-names</td>
</tr>
<tr>
<td style="text-align:left;">ENVIRON </td>
<td style="text-align:center;">array of environment variables; subscripts are names.</td>
</tr>
</tbody>
</table>


<table>
<thead>
<tr>
<th style="text-align:left;">变量名</th>
<th style="text-align:center;">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">ARGC</td>
<td style="text-align:center;">命令行变元个数</td>
</tr>
<tr>
<td style="text-align:left;">ARGV</td>
<td style="text-align:center;">命令行变元数组</td>
</tr>
<tr>
<td style="text-align:left;">FILENAME</td>
<td style="text-align:center;">当前输入文件名</td>
</tr>
<tr>
<td style="text-align:left;">FNR</td>
<td style="text-align:center;">当前文件中的记录号</td>
</tr>
<tr>
<td style="text-align:left;">FS</td>
<td style="text-align:center;">输入域分隔符，默认为一个空格</td>
</tr>
<tr>
<td style="text-align:left;">RS</td>
<td style="text-align:center;">输入记录分隔符</td>
</tr>
<tr>
<td style="text-align:left;">NF</td>
<td style="text-align:center;">当前记录里域个数</td>
</tr>
<tr>
<td style="text-align:left;">NR</td>
<td style="text-align:center;">到目前为止记录数</td>
</tr>
<tr>
<td style="text-align:left;">OFS</td>
<td style="text-align:center;">输出域分隔符</td>
</tr>
<tr>
<td style="text-align:left;">ORS</td>
<td style="text-align:center;">输出记录分隔符</td>
</tr>
</tbody>
</table>


<h3>正则表达式</h3>

<p>上面通过分隔符分列是<code>awk</code>的基本功能，<code>awk</code>还可以和<a href="https://www.gnu.org/software/gawk/manual/html_node/Regexp.html#Regexp" title="正则表达式">正则表达式结合</a>相结合做出复杂的效果</p>

<pre><code>1048592             |FowTexture:Init ()|Color[]             
262160              |AStar:.ctor (Map)|Int32[]             
196684              |TheNextMoba.Module.Arena.ArenaResourceLoader:OnItemLoadSuccess (string,object)|Byte[]              
192016              |Morefun.LockStep.LockstepProfiler/Stat:CreateFrameContext ()|FrameContext[]      
131088              |SignedDistanceField:.ctor (Map,int)|Int16[]             
81936               |GameObjectUtil:Init ()|String[]            
65568               |TheNext.Moba.Logic.FOWManager:Init ()|Byte[,]             
65568               |TheNext.Moba.Logic.FOWManager:Init ()|Byte[,]             
65568               |TheNext.Moba.Logic.FOWSystem:Init (TheNext.Moba.Logic.EnmTeamID,TheNext.Moba.Logic.IFOWSystem)|Byte[,]             
65568               |TheNext.Moba.Logic.FOWSystem:Init (TheNext.Moba.Logic.EnmTeamID,TheNext.Moba.Logic.IFOWSystem)|Byte[,] 
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk <span class="s1">&#39;/Init/ {print $0}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>1048592             |FowTexture:Init ()|Color[]             
81936               |GameObjectUtil:Init ()|String[]            
65568               |TheNext.Moba.Logic.FOWManager:Init ()|Byte[,]             
65568               |TheNext.Moba.Logic.FOWManager:Init ()|Byte[,]             
65568               |TheNext.Moba.Logic.FOWSystem:Init (TheNext.Moba.Logic.EnmTeamID,TheNext.Moba.Logic.IFOWSystem)|Byte[,]             
65568               |TheNext.Moba.Logic.FOWSystem:Init (TheNext.Moba.Logic.EnmTeamID,TheNext.Moba.Logic.IFOWSystem)|Byte[,] 
</code></pre>

<p>通过<code>awk '/Init/'</code>这个简单的例子可以知道，在双斜杠<code>'//'</code>中间可以添加正则表达式，正则表达式的作用过滤出匹配的行 然后再执行花括号里面<code>{}</code>逻辑，该示例中正则对整行进行匹配操作，也可以对某一列执行匹配</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk -F<span class="s1">&#39;|&#39;</span> <span class="s1">&#39;$2 ~ /Init/ {print $0}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>脚本用<code>|</code>分隔符分列，把正则表达式应用到第二列进行匹配</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk -F<span class="s1">&#39;|&#39;</span> <span class="s1">&#39;$2 ~ /Init/ {print $1,$3}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>1048592              Color[]             
81936                String[]            
65568                Byte[,]             
65568                Byte[,]             
65568                Byte[,]             
65568                Byte[,] 
</code></pre>

<h3>表达式</h3>

<p><code>awk</code>也支持常见的流程控制语句<code>if...else</code>、<code>for</code>、<code>for...in</code>、<code>while</code>、<code>do...while</code></p>

<p><code>for</code>循环和三元表达式</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span>192.168.0.105 <span class="p">|</span> awk -F<span class="s1">&#39;.&#39;</span> <span class="s1">&#39;{for(i=1;i&lt;=NF;i++)printf &quot;%02X&quot; (i&lt;NF?&quot;:&quot;:&quot;&quot;),$i}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span>192.168.0.105 <span class="p">|</span> awk -F<span class="s1">&#39;.&#39;</span> <span class="s1">&#39;{for(i=1;i&lt;=NF;i++)</span>
</span><span class='line'><span class="s1">                                     printf &quot;%02X&quot; (i&lt;NF?&quot;:&quot;:&quot;&quot;),$i }&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>for</code>循环和<code>if</code>表达式</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span>192.168.0.105 <span class="p">|</span> awk -F<span class="s1">&#39;.&#39;</span> <span class="s1">&#39;{for(i=1;i&lt;=NF;i++){printf &quot;%02X&quot;,$i;if(i&lt;NF)printf &quot;:&quot;}}&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span>192.168.0.105 <span class="p">|</span> awk -F<span class="s1">&#39;.&#39;</span> <span class="s1">&#39;{for(i=1;i&lt;=NF;i++)</span>
</span><span class='line'><span class="s1">{</span>
</span><span class='line'><span class="s1">     printf &quot;%02X&quot;,$i;</span>
</span><span class='line'><span class="s1">     if(i&lt;NF)printf &quot;:&quot;</span>
</span><span class='line'><span class="s1">}}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>C0:A8:00:69
</code></pre>

<p><code>for...in</code>和<code>split</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span>192.168.0.105 <span class="p">|</span> awk -F<span class="s1">&#39;.&#39;</span> <span class="s1">&#39;{split($0,a);for(i in a) printf &quot;%d:%02X &quot;,i,a[i]}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>while</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>head -n <span class="m">5</span> mono.txt <span class="p">|</span> awk -F<span class="s1">&#39;|&#39;</span> <span class="s1">&#39;{n=1;while(n++&lt;=NF)print $n}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>FowTexture:Init ()
Color[]             

AStar:.ctor (Map)
Int32[]             

TheNextMoba.Module.Arena.ArenaResourceLoader:OnItemLoadSuccess (string,object)
Byte[]              

Morefun.LockStep.LockstepProfiler/Stat:CreateFrameContext ()
FrameContext[]      

SignedDistanceField:.ctor (Map,int)
Int16[]         
</code></pre>

<p>其他各种表达式</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if( expression ) statement [ else statement ]
</span><span class='line'>while( expression ) statement
</span><span class='line'>for( expression ; expression ; expression ) statement
</span><span class='line'>for( var in array ) statement
</span><span class='line'>do statement while( expression )
</span><span class='line'>break
</span><span class='line'>continue
</span><span class='line'>{ [ statement ... ] }
</span><span class='line'>expression          # commonly var = expression
</span><span class='line'>print [ expression-list ] [ &gt; expression ]
</span><span class='line'>printf format [ , expression-list ] [ &gt; expression ]
</span><span class='line'>return [ expression ]
</span><span class='line'>next            # skip remaining patterns on this input line
</span><span class='line'>nextfile            # skip rest of this file, open next, start at top
</span><span class='line'>delete array[ expression ]# delete an array element
</span><span class='line'>delete array        # delete all elements of array
</span><span class='line'>exit [ expression ]     # exit immediately; status is expression</span></code></pre></td></tr></table></div></figure>


<p>可以在表达式中使用的<code>awk</code>内置函数</p>

<table>
<thead>
<tr>
<th style="text-align:left;">函数名</th>
<th style="text-align:center;">函数描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">length</td>
<td style="text-align:center;">字符串长度</td>
</tr>
<tr>
<td style="text-align:left;">rand</td>
<td style="text-align:center;">(0&lt;=x&lt;1)的随机数</td>
</tr>
<tr>
<td style="text-align:left;">srand</td>
<td style="text-align:center;">设置随机种子并返回之前的随机种子</td>
</tr>
<tr>
<td style="text-align:left;">int</td>
<td style="text-align:center;">截尾转换成整数</td>
</tr>
<tr>
<td style="text-align:left;">substr(s,m,n)</td>
<td style="text-align:center;">返回字符串s自m位置(索引从1开始)开始的n个字符</td>
</tr>
<tr>
<td style="text-align:left;">index(s,t)</td>
<td style="text-align:center;">如果字符串s中包含t则返回1，否则返回0</td>
</tr>
<tr>
<td style="text-align:left;">match(s,r)</td>
<td style="text-align:center;">返回字符串s匹配正则表达式r的位置(从1开始)</td>
</tr>
<tr>
<td style="text-align:left;">split(s,a,fs)</td>
<td style="text-align:center;">把字符串s通过正则fs分隔成数组a，并返回数组a长度n，如果fs未设置，则使用FS分隔符</td>
</tr>
<tr>
<td style="text-align:left;">sub(r,t,s)</td>
<td style="text-align:center;">在字符串s中，使用正则表达式r首次匹配的位置替换成t，如果s未设置，则使用$0</td>
</tr>
<tr>
<td style="text-align:left;">gsub(r,t,s)</td>
<td style="text-align:center;">与sub(r,t,s)参数相同，不过会把匹配的字符串全部替换，并返回替换的次数</td>
</tr>
<tr>
<td style="text-align:left;">sprintf(fmt,expr,&hellip;)</td>
<td style="text-align:center;">依据printf相同的样式fmt格式表达式列表</td>
</tr>
<tr>
<td style="text-align:left;">system(cmd)</td>
<td style="text-align:center;">执行cmd并返回退出状态码</td>
</tr>
<tr>
<td style="text-align:left;">tolower(str)</td>
<td style="text-align:center;">把字符串str转换成小写</td>
</tr>
<tr>
<td style="text-align:left;">toupper(str)</td>
<td style="text-align:center;">把字符串str转换成大写</td>
</tr>
</tbody>
</table>


<p>以及各种运算符</p>

<table>
<thead>
<tr>
<th style="text-align:left;">运算符</th>
<th style="text-align:center;">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">=,+=,-=,*=,/=,%=,^=,**=</td>
<td style="text-align:center;">赋值</td>
</tr>
<tr>
<td style="text-align:left;">?:</td>
<td style="text-align:center;">C条件表达式</td>
</tr>
<tr>
<td style="text-align:left;">||</td>
<td style="text-align:center;">逻辑或</td>
</tr>
<tr>
<td style="text-align:left;">&amp;&amp;</td>
<td style="text-align:center;">逻辑与</td>
</tr>
<tr>
<td style="text-align:left;">~,~!</td>
<td style="text-align:center;">匹配正则表达式和不匹配正则表达式</td>
</tr>
<tr>
<td style="text-align:left;">&lt;,&lt;=,>,>=,!=,==</td>
<td style="text-align:center;">关系运算符</td>
</tr>
<tr>
<td style="text-align:left;">空格</td>
<td style="text-align:center;">连接</td>
</tr>
<tr>
<td style="text-align:left;">+,-</td>
<td style="text-align:center;">加，减</td>
</tr>
<tr>
<td style="text-align:left;">*,/,&amp;</td>
<td style="text-align:center;">乘，除与求余</td>
</tr>
<tr>
<td style="text-align:left;">+,-,!</td>
<td style="text-align:center;">一元加，减和逻辑非</td>
</tr>
<tr>
<td style="text-align:left;">^,***</td>
<td style="text-align:center;">求幂</td>
</tr>
<tr>
<td style="text-align:left;">++,&ndash;</td>
<td style="text-align:center;">增加或减少，作为前缀或后缀</td>
</tr>
<tr>
<td style="text-align:left;">$</td>
<td style="text-align:center;">字段引用</td>
</tr>
<tr>
<td style="text-align:left;">in</td>
<td style="text-align:center;">数组成员</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdown缩进语法]]></title>
    <link href="http://larryhou.github.io/blog/2016/11/30/test-indent/"/>
    <updated>2016-11-30T17:01:54+08:00</updated>
    <id>http://larryhou.github.io/blog/2016/11/30/test-indent</id>
    <content type="html"><![CDATA[<p>行首添加TAB符号，如下脚本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>  <span class="c">#!/bin/bash</span>
</span><span class='line'>  sudo sysctl net.inet.ip.forwarding<span class="o">=</span>1
</span><span class='line'>  sudo sysctl net.inet.ip.redirect<span class="o">=</span>1
</span><span class='line'>  sudo sysctl net.inet6.ip6.forwarding<span class="o">=</span>1
</span><span class='line'>  sudo sysctl net.inet6.ip6.redirect<span class="o">=</span>1
</span><span class='line'>  sudo pfctl -d
</span><span class='line'>  sleep 1
</span><span class='line'>
</span><span class='line'>  sudo pfctl -F all -f /etc/pf.conf
</span><span class='line'>  sleep 1
</span><span class='line'>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  nat on en4 from bridge100:network to any -&gt; (en4)</span>
</span><span class='line'><span class="s2">  rdr pass on bridge100 inet proto tcp to port {443,80} -&gt; 127.0.0.1 port 8888&quot;</span> <span class="p">|</span> sudo pfctl -evf -
</span><span class='line'>
</span><span class='line'>  <span class="nb">export </span><span class="nv">MITMPROXY_SSLKEYLOGFILE</span><span class="o">=</span>~/Documents/master-secret.log
</span><span class='line'>  mitmproxy -T -p 8888
</span></code></pre></td></tr></table></div></figure>


<p>可以转换成如下样式</p>

<pre><code>#!/bin/bash 
sudo sysctl net.inet.ip.forwarding=1
sudo sysctl net.inet.ip.redirect=1
sudo sysctl net.inet6.ip6.forwarding=1
sudo sysctl net.inet6.ip6.redirect=1
sudo pfctl -d
sleep 1

sudo pfctl -F all -f /etc/pf.conf
sleep 1

echo "
nat on en4 from bridge100:network to any -&gt; (en4)
rdr pass on bridge100 inet proto tcp to port {443,80} -&gt; 127.0.0.1 port 8888" | sudo pfctl -evf -

export MITMPROXY_SSLKEYLOGFILE=~/Documents/master-secret.log
mitmproxy -T -p 8888
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[install ffmpeg with full functions]]></title>
    <link href="http://larryhou.github.io/blog/2016/11/28/install-ffmpeg-with-full-functions/"/>
    <updated>2016-11-28T13:09:22+08:00</updated>
    <id>http://larryhou.github.io/blog/2016/11/28/install-ffmpeg-with-full-functions</id>
    <content type="html"><![CDATA[<div><script src='https://gist.github.com/3adbec0cc57880120249.js'></script>
<noscript><pre><code>brew reinstall ffmpeg $(brew info ffmpeg | grep &#39;^--with-&#39; | xargs)</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[convert movie to GIF]]></title>
    <link href="http://larryhou.github.io/blog/2016/11/28/generate-gif-from-movies/"/>
    <updated>2016-11-28T13:06:19+08:00</updated>
    <id>http://larryhou.github.io/blog/2016/11/28/generate-gif-from-movies</id>
    <content type="html"><![CDATA[<div><script src='https://gist.github.com/084b0d3a494eae1b3117ace70d05bd0f.js'></script>
<noscript><pre><code>#!/bin/bash

palette=&quot;palette.png&quot;
filters=&quot;fps=30,scale=320:-1:flags=lanczos&quot;

ffmpeg -v warning -i $1 -vf &quot;$filters,palettegen&quot; -y $palette
ffmpeg -v warning -i $1 -i $palette -lavfi &quot;$filters [x]; [x][1:v] paletteuse&quot; -y $2</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tinyproxy install]]></title>
    <link href="http://larryhou.github.io/blog/2016/11/28/tinyproxy-install/"/>
    <updated>2016-11-28T13:02:49+08:00</updated>
    <id>http://larryhou.github.io/blog/2016/11/28/tinyproxy-install</id>
    <content type="html"><![CDATA[<div><script src='https://gist.github.com/800d44b384d88dc7e81083b36edfcbf0.js'></script>
<noscript><pre><code>* `brew install tinyproxy`
* Comment out `Allow 127.0.0.1` in `/usr/local/etc/tinyproxy.conf`.
* Start tinyproxy with `tinyproxy -d`.
* Follow the log file with

  ```bash
  tail -f /usr/local/var/log/tinyproxy/tinyproxy.log
  ```

* On the iOS device, in Wi-Fi settings, set HTTP Proxy to Manual and set
  * Server to the IP address of the Mac
  * Port as specified in `tinyproxy.conf`</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hawaii AT&amp;T APN settings for iOS9.0 and above]]></title>
    <link href="http://larryhou.github.io/blog/2015/11/23/hawaii-at-and-t-apn-settings-for-ios9-dot-0-and-above/"/>
    <updated>2015-11-23T17:15:56+08:00</updated>
    <id>http://larryhou.github.io/blog/2015/11/23/hawaii-at-and-t-apn-settings-for-ios9-dot-0-and-above</id>
    <content type="html"><![CDATA[<p><a href='http://larryhou.github.io/downloads/code/AT%26T.mobileconfig' class="blog-link">Hawaii AT&amp;T</a></p>

<figure class='code'><figcaption><span>Hawaii (AT&T.mobileconfig)</span> <a href='http://larryhou.github.io/downloads/code/AT&T.mobileconfig'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>ConsentText<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dict/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>PayloadContent<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;array&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>AttachAPN<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>              <span class="nt">&lt;key&gt;</span>AuthenticationType<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>              <span class="nt">&lt;string&gt;</span>CHAP<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>              <span class="nt">&lt;key&gt;</span>Name<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>              <span class="nt">&lt;string&gt;</span>phone<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>PayloadDescription<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>Configures a custom APN.<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>PayloadDisplayName<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>Cellular<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>PayloadIdentifier<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>com.apple.cellular.4F7961F1-FF50-492E-B9FE-202D40EEF4A7<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>PayloadType<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>com.apple.cellular<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>PayloadUUID<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>4F7961F1-FF50-492E-B9FE-202D40EEF4A7<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>PayloadVersion<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;real&gt;</span>1<span class="nt">&lt;/real&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>PayloadDescription<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>由于iOS9.0以上版本操作系统不支持淘宝提供APN配置，已升级新系统的手机请安装此APN配置 BY:LARRYHOU
</span><span class='line'>
</span><span class='line'>CHAP vs PAP
</span><span class='line'>http://www.tldp.org/LDP/nag/node120.html<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>PayloadDisplayName<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>Hawaii AT<span class="ni">&amp;amp;</span>T<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>PayloadIdentifier<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>larryhou-rmbp.local.AB6EADAA-144C-467E-A032-98560538DA78<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>PayloadOrganization<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>larryhou<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>PayloadRemovalDisallowed<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;false/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>PayloadType<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>Configuration<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>PayloadUUID<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>D5FDEFC4-CC28-478E-A40F-EC0E89C28091<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>PayloadVersion<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;integer&gt;</span>1<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href='http://larryhou.github.io/downloads/code/AT%26T-2.mobileconfig' class="blog-link">Hawaii AT&amp;T v2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fillStyle0 &amp; fillStyle1 in SWFTag]]></title>
    <link href="http://larryhou.github.io/blog/2015/09/19/fillstyle0-and-fillstyle1-in-swftag/"/>
    <updated>2015-09-19T22:10:55+08:00</updated>
    <id>http://larryhou.github.io/blog/2015/09/19/fillstyle0-and-fillstyle1-in-swftag</id>
    <content type="html"><![CDATA[<p><img src="http://larryhou.github.io/assets/shape-fillstyle/shape-1.svg" style="background-color:black;"/></p>

<!-- more -->


<p><img src="http://larryhou.github.io/assets/shape-fillstyle/shape-2.svg" style="background-color:black;"/></p>

<!-- <img src="http://larryhou.github.io/assets/shape-fillstyle/shape-3.svg" style="background-color:black;"/> -->


<p><img src="http://larryhou.github.io/assets/shape-fillstyle/fillstyle.svg" style="background-color:black;"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert SWF vector shape to SVG image]]></title>
    <link href="http://larryhou.github.io/blog/2015/09/05/convert-swf-vector-shape-to-svg-image/"/>
    <updated>2015-09-05T02:06:44+08:00</updated>
    <id>http://larryhou.github.io/blog/2015/09/05/convert-swf-vector-shape-to-svg-image</id>
    <content type="html"><![CDATA[<p><a href="http://larryhou.github.io/assets/swf-svg/graph-01.svg" target="_blank"><img src="http://larryhou.github.io/assets/swf-svg/graph-01.svg"></img></a></p>

<!-- more -->


<p><a href="http://larryhou.github.io/assets/swf-svg/graph-02.svg" target="_blank"><img src="http://larryhou.github.io/assets/swf-svg/graph-02.svg"></img></a></p>

<div class="blog-link">
    <a href="http://larryhou.github.io/assets/swf-svg/graph-03.svg" target="_blank" style="margin-right:10px">graph-03.svg</a>
    <a href="http://larryhou.github.io/assets/swf-svg/graph-04.svg" target="_blank" style="margin-right:10px">graph-04.svg</a>
    <a href="http://larryhou.github.io/assets/swf-svg/graph-05.svg" target="_blank" style="margin-right:10px">graph-05.svg</a>
    <a href="http://larryhou.github.io/assets/swf-svg/graph-06.svg" target="_blank" style="margin-right:10px">graph-06.svg</a>
    <a href="http://larryhou.github.io/assets/swf-svg/graph-07.svg" target="_blank" style="margin-right:10px">graph-07.svg</a>
    <a href="http://larryhou.github.io/assets/swf-svg/graph-08.svg" target="_blank" style="margin-right:10px">graph-08.svg</a>
    <a href="http://larryhou.github.io/assets/swf-svg/graph-09.svg" target="_blank" style="margin-right:10px">graph-09.svg</a>
    <a href="http://larryhou.github.io/assets/swf-svg/graph-10.svg" target="_blank" style="margin-right:10px">graph-10.svg</a>
</div>


<figure class='code'><figcaption><span>Display SVG in HTML: #1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;/assets/swf-svg/graph-01.svg&quot;</span><span class="nt">&gt;&lt;/img&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Display SVG in HTML: #2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;embed</span> <span class="na">src=</span><span class="s">&quot;/assets/swf-svg/graph-01.svg&quot;</span> <span class="na">width=</span><span class="s">&quot;300&quot;</span> <span class="na">height=</span><span class="s">&quot;100&quot;</span> <span class="na">type=</span><span class="s">&quot;image/svg+xml&quot;</span>
</span><span class='line'>    <span class="na">pluginspage=</span><span class="s">&quot;http://www.adobe.com/svg/viewer/install/&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Display SVG in HTML: #3</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;object</span> <span class="na">data=</span><span class="s">&quot;/assets/swf-svg/graph-01.svg&quot;</span> <span class="na">width=</span><span class="s">&quot;300&quot;</span> <span class="na">height=</span><span class="s">&quot;100&quot;</span> <span class="na">type=</span><span class="s">&quot;image/svg+xml&quot;</span>
</span><span class='line'>    <span class="na">codebase=</span><span class="s">&quot;http://www.adobe.com/svg/viewer/install/&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Display SVG in HTML: #4</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">&quot;/assets/swf-svg/graph-01.svg&quot;</span> <span class="na">width=</span><span class="s">&quot;300&quot;</span> <span class="na">height=</span><span class="s">&quot;100&quot;</span><span class="nt">&gt;&lt;/iframe&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Display SVG in HTML: #5</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;svg</span> <span class="na">width=</span><span class="s">&quot;300&quot;</span> <span class="na">height=</span><span class="s">&quot;100&quot;</span> <span class="na">version=</span><span class="s">&quot;1.1&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;circle</span> <span class="na">cx=</span><span class="s">&quot;100&quot;</span> <span class="na">cy=</span><span class="s">&quot;50&quot;</span> <span class="na">r=</span><span class="s">&quot;40&quot;</span> <span class="na">stroke=</span><span class="s">&quot;black&quot;</span> <span class="na">stroke-width=</span><span class="s">&quot;2&quot;</span> <span class="na">fill=</span><span class="s">&quot;red&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            Sorry, your browser does not support inline SVG.
</span><span class='line'>        <span class="nt">&lt;/svg&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<div><script src='https://gist.github.com/e0131d953ef1d407d72a.js'></script>
<noscript><pre><code>package com.larrio.dump.flash.display.shape.canvas
{
    import com.larrio.dump.utils.padding;
    
    import flash.display.BitmapData;
    import flash.display.InterpolationMethod;
    import flash.display.LineScaleMode;
    import flash.display.SpreadMethod;
    import flash.geom.Matrix;
    import flash.geom.Point;
    import flash.geom.Rectangle;
    
    /**
     * 
     * @author larryhou
     * @createTime Sep 4, 2015 10:48:57 PM
     */
    public class SVGImageCanvas implements ICanvas
    {        
        private var _data:Vector.&lt;String&gt;;
        private var _gradIndex:uint;
        
        private var _image:XML;
        private var _path:XML;
        
        private var _bounds:Rectangle;
        private var _frame:Rectangle;
        
        /**
         * 构造函数
         * create a [SVGImageCanvas] object
         */
        public function SVGImageCanvas(imageWidth:int = 1024, imageHeight:int = 768)
        {
            _frame = new Rectangle(0, 0, imageWidth, imageHeight);
            
            _image = new XML(&quot;&lt;svg/&gt;&quot;);
            _image.@version = &quot;1.1&quot;;
            _image.@xmlns = &quot;http://www.w3.org/2000/svg&quot;;
            
            _bounds = new Rectangle();
        }
        
        private function getRGBColor(color:uint):String
        {
            var b:String = padding((color &gt;&gt; 0  &amp; 0xFF).toString(16), 2, &quot;0&quot;, false);
            var g:String = padding((color &gt;&gt; 8  &amp; 0xFF).toString(16), 2, &quot;0&quot;, false);
            var r:String = padding((color &gt;&gt; 16 &amp; 0xFF).toString(16), 2, &quot;0&quot;, false);
            return &quot;#&quot; + r.toUpperCase() + g.toUpperCase() + b.toUpperCase();
        }
        
        public function export():String
        {
            flushContext();
            
            var rect:Rectangle = new Rectangle(_bounds.left, _bounds.top, _bounds.right - _bounds.left, _bounds.bottom - _bounds.top);
            
            _image.@[&quot;width&quot;]  = _frame.width;
            _image.@[&quot;height&quot;] = _frame.height;
            
            const MARGIN:Number = 20.0;
            var scale:Number = Math.min((_frame.width - MARGIN)/rect.width, (_frame.height - MARGIN) / rect.height);
            var translateX:Number = -(rect.x + rect.width  / 2) + _frame.width  / 2 / scale;
            var translateY:Number = -(rect.y + rect.height / 2) + _frame.height / 2 / scale;
            _image.g.@[&quot;transform&quot;] = 
                &quot;scale(&quot; + scale.toFixed(2) + &quot;,&quot; + scale.toFixed(2) + &quot;) &quot; +
                &quot;translate(&quot; + translateX.toFixed(2) + &quot;,&quot; + translateY.toFixed(2) + &quot;)&quot;;
            
            XML.prettyPrinting = true;
            XML.prettyIndent = 4;
            
            return _image.toXMLString();
        }
        
        private function flushContext():void
        {
            if (_path &amp;&amp; _data)
            {
                if (_data.length)
                {
                    _path.@[&quot;d&quot;] = _data.join(&quot; &quot;);
                    if (_image.g.length() == 0)
                    {
                        _image.appendChild(new XML(&quot;&lt;g/&gt;&quot;));
                    }
                    
                    _image.g.appendChild(_path);
                }
                _data = null;
            }
        }
        
        public function lineStyle(thickness:Number = NaN, color:uint = 0, alpha:Number = 1.0, pixelHinting:Boolean = false, scaleMode:String = LineScaleMode.NORMAL, caps:String = null, joints:String = null, miterLimit:Number = 3):void
        {
            flushContext();
            
            _data = new Vector.&lt;String&gt;();
            
            _path = new XML(&quot;&lt;path/&gt;&quot;);
            _path.@[&quot;stroke&quot;] = getRGBColor(color);
            _path.@[&quot;stroke-width&quot;] = (thickness || 0).toFixed(2);
            _path.@[&quot;stroke-opacity&quot;] = alpha.toFixed(2);
            _path.@[&quot;stroke-linecap&quot;] = (!caps || caps == &quot;none&quot;)? &quot;butt&quot; : caps;
            _path.@[&quot;stroke-linejoin&quot;] = joints || &quot;round&quot;;
            _path.@[&quot;stroke-miterlimit&quot;] = miterLimit.toFixed(2);
            _path.@[&quot;fill&quot;] = &quot;transparent&quot;;
        }
        
        private function unitBoundsWithPoint(x:Number, y:Number):void
        {
            _bounds.left   = Math.min(x, _bounds.left);
            _bounds.right  = Math.max(x, _bounds.right);
            _bounds.top    = Math.min(y, _bounds.top);
            _bounds.bottom = Math.max(y, _bounds.bottom);
        }
        
        public function moveTo(x:Number, y:Number):void
        {
            _data.push(&quot;M&quot; + x.toFixed(2) + &quot;,&quot; + y.toFixed(2));
            unitBoundsWithPoint(x, y);
        }
        
        public function lineTo(x:Number, y:Number):void
        {
            _data.push(&quot;L&quot; + x.toFixed(2) + &quot;,&quot; + y.toFixed(2));
            unitBoundsWithPoint(x, y);
        }
        
        public function curveTo(controlX:Number, controlY:Number, anchorX:Number, anchorY:Number):void
        {
            _data.push(&quot;Q&quot; + controlX.toFixed(2) + &quot;,&quot; + controlY.toFixed(2) + &quot; &quot; + anchorX.toFixed(2) + &quot;,&quot; + anchorY.toFixed(2));
            unitBoundsWithPoint(controlX, controlY);
            unitBoundsWithPoint(anchorX, anchorY);
        }
        
        public function beginFill(color:uint, alpha:Number = 1.0):void
        {
            flushContext();
            
            _data = new Vector.&lt;String&gt;();
            _path = new XML(&quot;&lt;path/&gt;&quot;);
            _path.@[&quot;fill&quot;] = getRGBColor(color);
            _path.@[&quot;fill-opacity&quot;] = alpha.toFixed(2);
        }
        
        public function beginBitmapFill(bitmap:BitmapData, matrix:Matrix = null, repeat:Boolean = true, smooth:Boolean = false):void
        {
            beginFill(0xFF0000, 1.0);
        }
        
        private function createGradientStyle(type:String, colors:Array, alphas:Array, ratios:Array, matrix:Matrix, spreadMethod:String, interpolationMethod:String, focalPointRatio:Number):String
        {
            matrix ||= new Matrix();
            
            var angle:Number = Math.atan2(matrix.b, matrix.a);
            var scaleX:Number = matrix.a / Math.cos(angle);
            var scaleY:Number = matrix.d / Math.cos(angle);
            var width:Number = scaleX * 1638.4, height:Number = scaleY * 1638.4;
            
            var gradient:XML;
            if (type == &quot;radial&quot;)
            {
                gradient = new XML(&quot;&lt;radialGradient/&gt;&quot;);
                var radius:Number = Math.max(width / 2, height / 2);
                var focalPoint:Point = new Point(
                    width  / 2 * Math.cos(angle) * focalPointRatio + matrix.tx,
                    height / 2 * Math.sin(angle) * focalPointRatio + matrix.ty);
                var center:Point = new Point(matrix.tx, matrix.ty);
                gradient.@[&quot;cx&quot;] = center.x.toFixed(2);
                gradient.@[&quot;cy&quot;] = center.y.toFixed(2);
                gradient.@[&quot;fx&quot;] = focalPoint.x.toFixed(2);
                gradient.@[&quot;fy&quot;] = focalPoint.y.toFixed(2);
                gradient.@[&quot;r&quot;] = radius.toFixed(2);
            }
            else
            {
                gradient = new XML(&quot;&lt;linearGradient/&gt;&quot;);
                var sp:Point = new Point(-819.2 * scaleX, 0);
                var startPoint:Point = new Point(
                    sp.x * Math.cos(angle) - sp.y * Math.sin(angle) + matrix.tx,
                    sp.x * Math.sin(angle) + sp.y * Math.cos(angle) + matrix.ty);
                var ep:Point = new Point( 819.2 * scaleX, 0);
                var endPoint:Point = new Point(
                    ep.x * Math.cos(angle) - ep.y * Math.sin(angle) + matrix.tx,
                    ep.x * Math.sin(angle) + ep.y * Math.cos(angle) + matrix.ty);
                gradient.@[&quot;x1&quot;] = startPoint.x.toFixed(2);
                gradient.@[&quot;y1&quot;] = startPoint.y.toFixed(2);
                gradient.@[&quot;x2&quot;] = endPoint.x.toFixed(2);
                gradient.@[&quot;y2&quot;] = endPoint.y.toFixed(2);
            }
            
            gradient.@[&quot;gradientUnits&quot;] = &quot;userSpaceOnUse&quot;;
            gradient.@[&quot;spreadMethod&quot;] = spreadMethod || &quot;pad&quot;;
            gradient.@[&quot;id&quot;] = &quot;G&quot; + (++_gradIndex);
            for (var i:int = 0; i &lt; colors.length; i++)
            {
                var stop:XML = new XML(&quot;&lt;stop/&gt;&quot;);
                stop.@[&quot;offset&quot;] = (ratios[i] / 0xFF).toFixed(2);
                stop.@[&quot;stop-color&quot;] = getRGBColor(colors[i]);
                stop.@[&quot;stop-opacity&quot;] = alphas[i].toFixed(2);
                gradient.appendChild(stop);
            }
            if (_image.defs.length() == 0)
            {
                _image.prependChild(new XML(&quot;&lt;defs/&gt;&quot;));
            }
            _image.defs.appendChild(gradient);
            return &quot;url(#&quot; + gradient.@id + &quot;)&quot;;
        }
        
        public function beginGradientFill(type:String, colors:Array, alphas:Array, ratios:Array, matrix:Matrix = null, spreadMethod:String = SpreadMethod.PAD, interpolationMethod:String = InterpolationMethod.RGB, focalPointRatio:Number = 0):void
        {
            flushContext();
            
            _data = new Vector.&lt;String&gt;();
            _path = new XML(&quot;&lt;path/&gt;&quot;);
            _path.@[&quot;fill&quot;] = createGradientStyle.apply(null, arguments);
        }
        
        public function lineGradientStyle(type:String, colors:Array, alphas:Array, ratios:Array, matrix:Matrix = null, spreadMethod:String = SpreadMethod.PAD, interpolationMethod:String = InterpolationMethod.RGB, focalPointRatio:Number = 0):void
        {
            flushContext();
            
            _data = new Vector.&lt;String&gt;();
            _path = new XML(&quot;&lt;path/&gt;&quot;);
            _path.@[&quot;stroke&quot;] = createGradientStyle.apply(null, arguments);
            _path.@[&quot;fill&quot;] = &quot;transparent&quot;;
        }
        
        public function endFill():void
        {
            _data.push(&quot;Z&quot;);
            
            flushContext();
        }
    }
}</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redraw SWF shape data with canvas]]></title>
    <link href="http://larryhou.github.io/blog/2015/09/01/redraw-swf-shape-data-with-canvas/"/>
    <updated>2015-09-01T21:19:39+08:00</updated>
    <id>http://larryhou.github.io/blog/2015/09/01/redraw-swf-shape-data-with-canvas</id>
    <content type="html"><![CDATA[<div class="blog-link">
    <div><a href='http://larryhou.github.io/assets/redraw-shape/' target='_blank'>Redraw demo with animation</a></div>
    <div><a href='http://larryhou.github.io/assets/redraw-shape/demo.html' target='_blank'>Redraw demo</a></div>
</div>




<!-- more -->


<div><script src='https://gist.github.com/369c8dd43509774800a5.js'></script>
<noscript><pre><code>var SWFShape = 
{
    init:function(context, steps)
    {
        var shape = {}
        shape.context = context
        shape.steps = steps

        shape.commands = []
        function println(msg)
        {
            console.log(msg)
            shape.commands.push(msg)
        }

        console.log(context)

        var rect = {left:0, top:0, right:0, bottom:0}
        function unionBoundsWithPoint(bounds, x, y)
        {
            bounds.left   = Math.min(x, bounds.left)
            bounds.right  = Math.max(x, bounds.right)
            bounds.top    = Math.min(y, bounds.top)
            bounds.bottom = Math.max(y, bounds.bottom)
        }

        for (var i = 0; i &lt; steps.length; i++)
        {
            var method = steps[i][0]
            var params = steps[i][1]
            switch (method)
            {
                case &quot;LINE_TO&quot;:case &quot;MOVE_TO&quot;:
                {
                    unionBoundsWithPoint(rect, params.x, params.y)
                    break
                }

                case &quot;CURVE_TO&quot;:
                {
                    unionBoundsWithPoint(rect, params.controlX, params.controlY)
                    unionBoundsWithPoint(rect, params.anchorX, params.anchorY)
                    break
                }
            }
        }

        console.log(rect)

        var bounds = {x:rect.left, y:rect.top, width:rect.right - rect.left, height:rect.bottom - rect.top}
        println(&quot;var bounds = {x:&quot; + bounds.x + &quot;, y:&quot; + bounds.y + &quot;, width:&quot; + bounds.width + &quot;, height:&quot; + bounds.height +&quot;}&quot;)
        var canvas = context.canvas
        println(&quot;var canvas = context.canvas&quot;)

        var margin = 40
        println(&quot;var margin = &quot; + margin)
        var scale = Math.min((canvas.width - margin) / bounds.width, (canvas.height - margin) / bounds.height)
        println(&quot;var scale = Math.min((canvas.width - margin) / bounds.width, (canvas.height - margin) / bounds.height)&quot;)
        context.scale(scale, scale)
        println(&quot;context.scale(scale, scale)&quot;)

        var translateX = -(bounds.x + bounds.width  / 2) + canvas.width  / 2 / scale
        println(&quot;var translateX = -(bounds.x + bounds.width  / 2) + canvas.width  / 2 / scale&quot;)
        var translateY = -(bounds.y + bounds.height / 2) + canvas.height / 2 / scale
        println(&quot;var translateY = -(bounds.y + bounds.height / 2) + canvas.height / 2 / scale&quot;)
        context.translate(translateX, translateY)
        println(&quot;context.translate(translateX, translateY)&quot;)

        function getRGBAColor(color, alpha)
        {
            var b = (color &gt;&gt; 0 ) &amp; 0xFF
            var g = (color &gt;&gt; 8 ) &amp; 0xFF
            var r = (color &gt;&gt; 16) &amp; 0xFF
            return &quot;rgba(&quot; + r + &quot;,&quot; + g + &quot;,&quot; + b + &quot;,&quot; + alpha + &quot;)&quot;
        }

        function createContextGradient(data)
        {
            var matrix = data.matrix
            var angle = Math.atan2(matrix.b, matrix.a)
            var scaleX = matrix.a / Math.cos(angle)
            var scaleY = matrix.d / Math.cos(angle)

            var width  = scaleX * 1638.4
            var height = scaleY * 1638.4

            var gradient
            if (data.type == &quot;radial&quot;)
            {
                var endRadius = Math.max(width / 2, height / 2)
                var startCenter = {
                    x:  width / 2 * Math.cos(angle) * data.focalPointRatio + matrix.tx,
                    y: height / 2 * Math.sin(angle) * data.focalPointRatio + matrix.ty
                }

                var endCenter = {x:matrix.tx, y:matrix.ty}
                gradient = context.createRadialGradient(startCenter.x, startCenter.y, 0, endCenter.x, endCenter.y, endRadius)
                println(&quot;gradient = context.createRadialGradient(&quot; + [startCenter.x, startCenter.y, 0, endCenter.x, endCenter.y, endRadius].join(&quot;, &quot;) + &quot;)&quot;)
            }
            else
            {
                var sp = {x:-819.2 * scaleX, y:0}
                var startPoint = {
                    x:sp.x * Math.cos(angle) - sp.y * Math.sin(angle) + matrix.tx,
                    y:sp.x * Math.sin(angle) + sp.y * Math.cos(angle) + matrix.ty
                }

                var ep = {x: 819.2 * scaleX, y:0}
                var endPoint = {
                    x:ep.x * Math.cos(angle) - ep.y * Math.sin(angle) + matrix.tx,
                    y:ep.x * Math.sin(angle) + ep.y * Math.cos(angle) + matrix.ty
                }

                gradient = context.createLinearGradient(startPoint.x, startPoint.y, endPoint.x, endPoint.y)
                println(&quot;gradient = context.createLinearGradient(&quot; + [startPoint.x, startPoint.y, endPoint.x, endPoint.y].join(&quot;, &quot;) + &quot;)&quot;)
            }

            for (var i = 0; i &lt; data.colors.length; i++)
            {
                gradient.addColorStop(data.ratios[i] / 255, getRGBAColor(data.colors[i], data.alphas[i]))
                println(&quot;gradient.addColorStop(&quot; + data.ratios[i] / 255 + &quot;, &#39;&quot; + getRGBAColor(data.colors[i], data.alphas[i]) + &quot;&#39;)&quot;)
            }

            return gradient
        }

        var styleState

        var pathAvailable = false
        function flushCurrentContext()
        {
            if (pathAvailable == false) return

            switch(styleState)
            {
                case &quot;SOLID_STROKE&quot;:case &quot;GRADIENT_STROKE&quot;:
                {
                    context.stroke()
                    println(&quot;context.stroke()&quot;)
                    break
                }

                case &quot;SOLID_FILL&quot;:case &quot;GRADIENT_FILL&quot;:
                {
                    context.closePath()
                    println(&quot;context.closePath()&quot;)
                    context.fill()
                    println(&quot;context.fill()&quot;)
                    break
                }
            }

            pathAvailable = false
        }

        shape.begin = function()
        {
            println(&quot;var gradient&quot;)
        }

        function drawStep(method, params)
        {
            switch(method)
            {
                case &quot;LINE_TO&quot;:
                {
                    context.lineTo(params.x, params.y)
                    println(&quot;context.lineTo(&quot; + [params.x, params.y].join(&quot;, &quot;) + &quot;)&quot;)
                    break
                }

                case &quot;MOVE_TO&quot;:
                {
                    context.moveTo(params.x, params.y)
                    println(&quot;context.moveTo(&quot; + [params.x, params.y].join(&quot;, &quot;) + &quot;)&quot;)
                    break
                }

                case &quot;CURVE_TO&quot;:
                {
                    context.quadraticCurveTo(params.controlX, params.controlY, params.anchorX, params.anchorY)
                    println(&quot;context.quadraticCurveTo(&quot; + [params.controlX, params.controlY, params.anchorX, params.anchorY].join(&quot;, &quot;) + &quot;)&quot;)
                    break
                }

                case &quot;LINE_STYLE&quot;:
                {
                    styleState = &quot;SOLID_STROKE&quot;
                    context.lineCap = params.caps == &quot;none&quot;? &quot;butt&quot; : params.caps
                    println(&quot;context.lineCap = &#39;&quot; + context.lineCap + &quot;&#39;&quot;)
                    context.lineJoin = params.joints
                    println(&quot;context.lineJoin = &#39;&quot; + context.lineJoin + &quot;&#39;&quot;)
                    context.lineWidth = params.thickness
                    println(&quot;context.lineWidth = &quot; + context.lineWidth)
                    context.miterLimit = params.miterLimit
                    println(&quot;context.miterLimit = &quot; + context.miterLimit)
                    context.strokeStyle = getRGBAColor(params.color, params.alpha)
                    println(&quot;context.strokeStyle = &#39;&quot; + getRGBAColor(params.color, params.alpha) + &quot;&#39;&quot;)
                    context.beginPath()
                    println(&quot;context.beginPath()&quot;)
                    pathAvailable = true
                    break
                }

                case &quot;LINE_GRADIENT_STYLE&quot;:
                {
                    styleState = &quot;GRADIENT_STROKE&quot;
                    context.strokeStyle = createContextGradient(params)
                    println(&quot;context.strokeStyle = gradient&quot;)
                    context.beginPath()
                    println(&quot;context.beginPath()&quot;)
                    pathAvailable = true
                    break
                }

                case &quot;BEGIN_FILL&quot;:
                {
                    styleState = &quot;SOLID_FILL&quot;
                    context.fillStyle = getRGBAColor(params.color, params.alpha)
                    println(&quot;context.fillStyle = &#39;&quot; + getRGBAColor(params.color, params.alpha) + &quot;&#39;&quot;)
                    context.beginPath()
                    println(&quot;context.beginPath()&quot;)
                    pathAvailable = true
                    break
                }

                case &quot;BEGIN_GRADIENT_FILL&quot;:
                {
                    styleState = &quot;GRADIENT_FILL&quot;
                    context.fillStyle = createContextGradient(params)
                    println(&quot;context.fillStyle = gradient&quot;)
                    context.beginPath()
                    println(&quot;context.beginPath()&quot;)
                    pathAvailable = true
                    break
                }

                case &quot;END_FILL&quot;:
                {
                    break
                }
            }
        }

        var currentIndex = 0
        shape.drawNextRound = function()
        {
            var index = currentIndex
            var complete = false

            while (index &lt; steps.length)
            {
                var method = steps[index][0]
                var params = steps[index][1]
                switch(method)
                {
                    case &quot;LINE_STYLE&quot;:
                    case &quot;LINE_GRADIENT_STYLE&quot;:
                    case &quot;BEGIN_FILL&quot;:
                    case &quot;BEGIN_GRADIENT_FILL&quot;:
                    case &quot;END_FILL&quot;:
                    {
                        if (index &gt; currentIndex)
                        {
                            complete = true
                            break
                        }
                    }
                }

                if (complete) break

                drawStep(method, params)
                index++
                
                // if (styleState == &quot;SOLID_STROKE&quot; || styleState == &quot;GRADIENT_STROKE&quot;)
                // {
                //  if (method == &quot;LINE_TO&quot; || method == &quot;CURVE_TO&quot;)
                //  {
                //      currentIndex = index
                //      context.stroke()
                //      println(&quot;context.stroke()&quot;)
                //      return
                //  }
                // }
            }

            flushCurrentContext()
            currentIndex = index
        }
        
        shape.stepsAvailable = function()
        {
            return currentIndex &lt; steps.length
        }
        
        return shape
    }
}</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[China GPS Convertion In iOS Development]]></title>
    <link href="http://larryhou.github.io/blog/2015/09/01/china-gps-convertion/"/>
    <updated>2015-09-01T20:40:27+08:00</updated>
    <id>http://larryhou.github.io/blog/2015/09/01/china-gps-convertion</id>
    <content type="html"><![CDATA[<!-- more -->


<div><script src='https://gist.github.com/9e3fa0a5f6fb1b0a0be7.js'></script>
<noscript><pre><code>//
//  ChinaGPS.swift
//  LocationTraker
//
//  Created by larryhou on 28/7/2015.
//  Copyright © 2015 larryhou. All rights reserved.
//

import Foundation
import CoreLocation

class ChinaGPS
{
    struct GPSLocation
    {
        var lon, lat:Double
    }
    
    static private let pi = 3.14159265358979324
    static private let x_pi = pi * 3000.0 / 180.0
    
    //
    //  Krasovsky 1940
    //
    //  a = 6378245.0, 1/f = 298.3
    //  b = a * (1 - f)
    //  ee = (a^2 - b^2) / a^2;
    static private let a = 6378245.0
    static private let ee = 0.00669342162296594323
    
    private class func encrypt_lat(x:Double, y:Double) -&gt; Double
    {
        var ret = -100.0 + 2.0 * x + 3.0 * y + 0.2 * y * y + 0.1 * x * y
        ret += 0.2 * sqrt(abs(x))
        ret += (20.0 * sin(6.0 * x * pi) + 20.0 * sin(2.0 * x * pi)) * 2.0 / 3.0
        ret += (20.0 * sin(y * pi) + 40.0 * sin(y / 3.0 * pi)) * 2.0 / 3.0
        ret += (160.0 * sin(y / 12.0 * pi) + 320 * sin(y * pi / 30.0)) * 2.0 / 3.0
        return ret
    }
    
    private class func encrypt_lon(x:Double, y:Double) -&gt; Double
    {
        var ret = 300.0 + x + 2.0 * y + 0.1 * x * x + 0.1 * x * y
        ret += 0.1 * sqrt(abs(x))
        ret += (20.0 * sin(6.0 * x * pi) + 20.0 * sin(2.0 * x * pi)) * 2.0 / 3.0
        ret += (20.0 * sin(x * pi) + 40.0 * sin(x / 3.0 * pi)) * 2.0 / 3.0
        ret += (150.0 * sin(x / 12.0 * pi) + 300.0 * sin(x / 30.0 * pi)) * 2.0 / 3.0
        return ret
    }
    
    private class func outOfChina(lat:Double, lon:Double) -&gt; Bool
    {
        if lon &lt; 72.004 || lon &gt; 137.8347
        {
            return true
        }
        
        if lat &lt; 0.8293 || lat &gt; 55.8271
        {
            return true
        }
        
        return false
    }
    
    ///
    ///  WGS-84 到 GCJ-02 的转换
    ///
    class func encrypt_WGS_2_GCJ(loc:GPSLocation) -&gt; GPSLocation
    {
        if outOfChina(loc.lat, lon: loc.lon)
        {
            return loc
        }
        
        var lat = encrypt_lat(loc.lon - 105.0, y: loc.lat - 35.0)
        var lon = encrypt_lon(loc.lon - 105.0, y: loc.lat - 35.0)
        
        let radian = loc.lat / 180.0 * pi
        let magic = 1 - ee * sin(radian) * sin(radian)
        let magic_2 = sqrt(magic)
        
        lat = (lat * 180.0) / ((a * (1 - ee)) / (magic * magic_2) * pi)
        lon = (lon * 180.0) / (a / magic_2 * cos(radian) * pi)
        
        return GPSLocation(lon: loc.lon + lon, lat: loc.lat + lat)
    }
    
    class func encrypt_WGS_2_GCJ(latitude latitude:Double, longitude:Double) -&gt; CLLocation
    {
        let loc = GPSLocation(lon: longitude, lat: latitude)
        let ret = encrypt_WGS_2_GCJ(loc)
        
        return CLLocation(latitude: ret.lat, longitude: ret.lon)
    }
    
    class func encrypt_WGS_2_GCJ(latitude latitude:Double, longitude:Double) -&gt; CLLocationCoordinate2D
    {
        let loc = GPSLocation(lon: longitude, lat: latitude)
        let ret = encrypt_WGS_2_GCJ(loc)
        
        return CLLocationCoordinate2D(latitude: ret.lat, longitude: ret.lon)
    }
    
    ///
    ///  GCJ-02 坐标转换成 BD-09 坐标
    ///
    class func baidu_encrypt(loc:GPSLocation) -&gt; GPSLocation
    {
        let x = loc.lon, y = loc.lat
        let z = sqrt(x * x + y * y) + 0.00002 * sin(y * x_pi)
        let theta = atan2(y, x) + 0.000003 * cos(x * x_pi)
        return GPSLocation(lon:z * cos(theta) + 0.0065, lat:z * sin(theta) + 0.006)
    }
    
    class func baidu_encrypt(latitude latitude:Double, longitude:Double) -&gt; CLLocation
    {
        let loc = GPSLocation(lon: longitude, lat: latitude)
        let ret = baidu_encrypt(loc)
        
        return CLLocation(latitude: ret.lat, longitude: ret.lon)
    }
    
    ///
    ///  BD-09 坐标转换成 GCJ-02坐标
    ///
    class func baidu_decrypt(loc:GPSLocation) -&gt; GPSLocation
    {
        let x = loc.lon - 0.0065, y = loc.lat - 0.006
        let z = sqrt(x * x + y * y) - 0.00002 * sin(y * x_pi)
        let theta = atan2(y, x) - 0.000003 * cos(x * x_pi)
        return GPSLocation(lon:z * cos(theta), lat:z * sin(theta))
    }
    
    class func baidu_decrypt(latitude latitude:Double, longitude:Double) -&gt; CLLocation
    {
        let loc = GPSLocation(lon: longitude, lat: latitude)
        let ret = baidu_decrypt(loc)
        
        return CLLocation(latitude: ret.lat, longitude: ret.lon)
    }

}</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown示例集锦]]></title>
    <link href="http://larryhou.github.io/blog/2015/09/01/markdown-playground/"/>
    <updated>2015-09-01T14:22:57+08:00</updated>
    <id>http://larryhou.github.io/blog/2015/09/01/markdown-playground</id>
    <content type="html"><![CDATA[<h3>代码块语法</h3>

<pre><code>``` [language] [title] [url] [link text]
code snippet
```
</code></pre>

<p>不使用语法高亮</p>

<pre><code>```
$ git clone git@github.com:imathis/octopress.git # fork octopress
```
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@github.com:imathis/octopress.git # fork octopress</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>使用语法高亮功能，并添加链接文字</p>

<pre><code>``` ruby 查找素数 http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/ 源码链接
class Fixnum
  def prime?
    ('1' * self) !~ /^1?$|^(11+?)\1+$/
  end
end
```
</code></pre>

<figure class='code'><figcaption><span>查找素数</span><a href='http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/'>源码链接</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Fixnum</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prime?</span>
</span><span class='line'>    <span class="p">(</span><span class="s1">&#39;1&#39;</span> <span class="o">*</span> <span class="nb">self</span><span class="p">)</span> <span class="o">!~</span> <span class="sr">/^1?$|^(11+?)\1+$/</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过<code>&#123;% codeblock %&#125;</code>&hellip;<code>&#123;% endcodeblock %&#125;</code>同样可以显示代码高亮</p>

<pre>
&#123;% codeblock [lang:language] [title] [url] [link text] %&#125;
code snippet
&#123;% endcodeblock %&#125;
</pre>


<pre>&#123;% codeblock lang:objc %&#125;
[rectangle setX: 10 y: 10 width: 20 height: 20];
&#123;% endcodeblock %&#125;</pre>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">rectangle</span> <span class="nl">setX</span><span class="p">:</span> <span class="mi">10</span> <span class="nl">y</span><span class="p">:</span> <span class="mi">10</span> <span class="nl">width</span><span class="p">:</span> <span class="mi">20</span> <span class="nl">height</span><span class="p">:</span> <span class="mi">20</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>




<pre>
&#123;% codeblock C#泛型 lang:csharp https://github.com/larryhou/XUPorter/blob/master/XCMod.cs 源码链接 %&#125;
private T fetch&lt;T&gt;(string key) where T:new()
&#123;
    if(_datastore != null &amp;&amp; _datastore.Contains(key))
    &#123;
        return (T)_datastore[key];
    &#125;
    return new T();
&#125;
&#123;% endcodeblock %&#125;
</pre>


<figure class='code'><figcaption><span>C#泛型</span><a href='https://github.com/larryhou/XUPorter/blob/master/XCMod.cs'>源码链接 </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="n">T</span> <span class="n">fetch</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="kt">string</span> <span class="n">key</span><span class="p">)</span> <span class="k">where</span> <span class="n">T</span><span class="p">:</span><span class="k">new</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">_datastore</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;</span><span class="n">amp</span><span class="p">;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">_datastore</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="n">T</span><span class="p">)</span><span class="n">_datastore</span><span class="p">[</span><span class="n">key</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nf">T</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>引用级别样式</h3>

<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&gt;
&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
&gt; id sem consectetuer libero luctus adipiscing.
</code></pre>

<blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>

<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.</p></blockquote>

<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
</code></pre>

<blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>

<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.</p></blockquote>

<pre><code>&gt; ## This is a header.
&gt; 
&gt; 1.   This is the first list item.
&gt; 2.   This is the second list item.
&gt; 
&gt; Here's some example code:
&gt; 
&gt;     return shell_exec("echo $input | $markdown_script");
</code></pre>

<blockquote><h2>This is a header.</h2>

<ol>
<li>This is the first list item.</li>
<li>This is the second list item.</li>
</ol>


<p>Here&rsquo;s some example code:</p>

<pre><code>return shell_exec("echo $input | $markdown_script");
</code></pre></blockquote>

<h3>清单</h3>

<pre>
*   Red
*   Green
*   Blue
</pre>


<ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul>


<pre>
+   Red
+   Green
+   Blue
</pre>


<ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul>


<pre>
-   Red
-   Green
-   Blue
</pre>


<ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul>


<pre>
1.  Bird
2.  McHale
3.  Parish
</pre>


<ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol>


<pre>
&lt;ol&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;McHale&lt;/li&gt;
&lt;li&gt;Parish&lt;/li&gt;
&lt;/ol&gt;
</pre>




<ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol>




<pre>
1.  Bird
1.  McHale
1.  Parish
</pre>


<ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol>


<pre>
3. Bird
1. McHale
8. Parish
</pre>


<ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol>


<pre>
*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.
</pre>


<ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.</li>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ul>


<pre>
*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.
</pre>


<ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.</li>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ul>


<pre>
*   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You're
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another item in the same list.
</pre>


<ul>
<li><p>This is a list item with two paragraphs.</p>

<p>This is the second paragraph in the list item. You&rsquo;re
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.</p></li>
<li><p>Another item in the same list.</p></li>
</ul>


<pre>
*   A list item with a blockquote:

    > This is a blockquote
    > inside a list item.
</pre>


<ul>
<li><p>A list item with a blockquote:</p>

<blockquote><p>This is a blockquote
inside a list item.</p></blockquote></li>
</ul>


<pre>
Here is an example of AppleScript:

    tell application "Foo"
        beep
    end tell
</pre>


<p>Here is an example of AppleScript:</p>

<pre><code>tell application "Foo"
    beep
end tell
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown Syntax]]></title>
    <link href="http://larryhou.github.io/blog/2015/08/31/markdown-syntax/"/>
    <updated>2015-08-31T16:36:40+08:00</updated>
    <id>http://larryhou.github.io/blog/2015/08/31/markdown-syntax</id>
    <content type="html"><![CDATA[<h1>Markdown 文件</h1>

<p><img src="http://markdown.tw/images/208x128.png" alt="Markdown" /></p>

<p><strong>NOTE:</strong> This is Traditional Chinese Edition Document of
Markdown Syntax. If you are seeking for English Edition
Document. Please refer to <a href="http://daringfireball.net/projects/markdown/syntax">Markdown: Syntax</a>.</p>

<!-- more -->


<h1>Markdown: Syntax</h1>

<ul>
<li><a href="#overview">概述</a>

<ul>
<li><a href="#philosophy">哲学</a></li>
<li><a href="#html">行内 HTML</a></li>
<li><a href="#autoescape">特殊字符自动转换</a></li>
</ul>
</li>
<li><a href="#block">区块元素</a>

<ul>
<li><a href="#p">段落和换行</a></li>
<li><a href="#header">标题</a></li>
<li><a href="#blockquote">区块引言</a></li>
<li><a href="#list">清单</a></li>
<li><a href="#precode">程序代码区块</a></li>
<li><a href="#hr">分隔线</a></li>
</ul>
</li>
<li><a href="#span">区段元素</a>

<ul>
<li><a href="#link">链接</a></li>
<li><a href="#em">强调</a></li>
<li><a href="#code">程序代码</a></li>
<li><a href="#img">图片</a></li>
</ul>
</li>
<li><a href="#misc">其它</a>

<ul>
<li><a href="#backslash">跳脱字符</a></li>
<li><a href="#autolink">自动链接</a></li>
</ul>
</li>
<li><a href="#acknowledgement">感谢</a></li>
</ul>


<p><strong>注意：</strong>这份文件是用 Markdown 写的，你可以<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md">看看它的原始档</a> 。</p>

<hr />

<h2 id="overview">概述</h2>




<h3 id="philosophy">哲学</h3>


<p>Markdown 的目标是实现「易读易写」。</p>

<p>不过最需要强调的便是它的可读性。一份使用 Markdown 格式撰写的文件应该可以直接以纯文字发佈，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 <a href="http://docutils.sourceforge.net/mirror/setext.html">Setext</a>、<a href="http://www.aaronsw.com/2002/atx/">atx</a>、<a href="http://textism.com/tools/textile/">Textile</a>、<a href="http://docutils.sourceforge.net/rst.html">reStructuredText</a>、<a href="http://www.triptico.com/software/grutatxt.html">Grutatext</a> 和 <a href="http://ettext.taint.org/doc/">EtText</a>，然而最大灵感来源其实是纯文字的电子邮件格式。</p>

<p>因此 Markdown 的语法全由标点符号所组成，并经过严谨慎选，是为了让它们看起来就像所要表达的意思。像是在文字两旁加上星号，看起来就像*强调*。Markdown 的清单看起来，嗯，就是清单。假如你有使用过电子邮件，区块引言看起来就真的像是引用一段文字。</p>

<h3 id="html">行内 HTML</h3>


<p>Markdown 的语法有个主要的目的：用来作为一种网路内容的<em>写作</em>用语言。</p>

<p>Markdown 不是要来取代 HTML，甚至也没有要和它相似，它的语法种类不多，只和 HTML 的一部分有关系，重点<em>不是</em>要创造一种更容易写作 HTML 文件的语法，我认为 HTML 已经很容易写了，Markdown 的重点在于，它能让文件更容易阅读、编写。HTML 是一种<em>发佈</em>的格式，Markdown 是一种<em>编写</em>的格式，因此，Markdown 的格式语法只涵盖纯文字可以涵盖的范围。</p>

<p>不在 Markdown 涵盖范围之外的标签，都可以直接在文件里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p>

<p>只有区块元素──比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行，以利与内容区隔。而且这些（元素）的开始与结尾标签，不可以用 tab 或是空白来缩排。Markdown 的产生器有智慧型判断，可以避免在区块标签前后加上没有必要的 <code>&lt;p&gt;</code> 标签。</p>

<p>举例来说，在 Markdown 文件里加上一段 HTML 表格：</p>

<pre><code>This is a regular paragraph.

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;Foo&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

This is another regular paragraph.
</code></pre>

<p>请注意，Markdown 语法在 HTML 区块标签中将不会被进行处理。例如，你无法在 HTML 区块内使用 Markdown 形式的<code>*强调*</code>。</p>

<p>HTML 的区段标签如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 则不受限制，可以在 Markdown 的段落、清单或是标题里任意使用。依照个人习惯，甚至可以不用Markdown 格式，而采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的  <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是影像标示语法。</p>

<p>HTML 区段标签和区块标签不同，在区段标签的范围内， Markdown 的语法是有效的。</p>

<h3 id="autoescape">特殊字符自动转换</h3>


<p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果你只是想要使用这些符号，你必须要使用实体的形式，像是 <code>&amp;lt;</code> 和 <code>&amp;amp;</code>。</p>

<p><code>&amp;</code> 符号其实很容易让写作网路文件的人感到困扰，如果你要打「AT&amp;T」 ，你必须要写成「<code>AT&amp;amp;T</code>」 ，还得转换网址内的 <code>&amp;</code> 符号，如果你要链接到：</p>

<pre><code>http://images.google.com/images?num=30&amp;q=larry+bird
</code></pre>

<p>你必须要把网址转成：</p>

<pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird
</code></pre>

<p>才能放到链接标签的 <code>href</code> 属性里。不用说也知道这很容易忘记，这也可能是 HTML 标準检查所检查到的错误中，数量最多的。</p>

<p>Markdown 允许你直接使用这些符号，但是你要小心跳脱字符的使用，如果你是在HTML 实体中使用 <code>&amp;</code> 符号的话，它不会被转换，而在其它情形下，它则会被转换成 <code>&amp;amp;</code>。所以你如果要在文件中插入一个著作权的符号，你可以这样写：</p>

<pre><code>&amp;copy;
</code></pre>

<p>Markdown 将不会对这段文字做修改，但是如果你这样写：</p>

<pre><code>AT&amp;T
</code></pre>

<p>Markdown 就会将它转为：</p>

<pre><code>AT&amp;amp;T
</code></pre>

<p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 支援 <a href="#html">行内 HTML</a> ，如果你是使用 <code>&lt;</code> 符号作为 HTML 标签使用，那 Markdown 也不会对它做任何转换，但是如果你是写：</p>

<pre><code>4 &lt; 5
</code></pre>

<p>Markdown 将会把它转换为：</p>

<pre><code>4 &amp;lt; 5
</code></pre>

<p>不过需要注意的是，code 范围内，不论是行内还是区块， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都<em>一定</em>会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p>

<hr />

<h2 id="block">区块元素</h2>




<h3 id="p">段落和换行</h3>


<p>一个段落是由一个以上相连接的行句组成，而一个以上的空行则会切分出不同的段落（空行的定义是显示上看起来像是空行，便会被视为空行。比方说，若某一行只包含空白和 tab，则该行也会被视为空行），一般的段落不需要用空白或断行缩排。</p>

<p>「一个以上相连接的行句组成」这句话其实暗示了 Markdown 允许段落内的强迫断行，这个特性和其他大部分的 text-to-HTML 格式不一样（包括 MovableType 的「Convert Line Breaks」选项），其它的格式会把每个断行都转成 <code>&lt;br /&gt;</code> 标签。</p>

<p>如果你<em>真的</em>想要插入 <code>&lt;br /&gt;</code> 标签的话，在行尾加上两个以上的空白，然后按 enter。</p>

<p>是的，这确实需要花比较多功夫来插入 <code>&lt;br /&gt;</code> ，但是「每个换行都转换为 <code>&lt;br /&gt;</code>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 <a href="#blockquote">区块引言</a> 和多段落的 <a href="#list">清单</a> 在使用换行来排版的时候，不但更好用，还更好阅读。</p>

<h3 id="header">标题</h3>


<p>Markdown 支援两种标题的语法，<a href="http://docutils.sourceforge.net/mirror/setext.html">Setext</a> 和 <a href="http://www.aaronsw.com/2002/atx/">atx</a> 形式。</p>

<p>Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），例如：</p>

<pre><code>This is an H1
=============

This is an H2
-------------
</code></pre>

<p>任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p>

<p>Atx 形式则是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，例如：</p>

<pre><code># This is an H1

## This is an H2

###### This is an H6
</code></pre>

<p>你可以选择性地「关闭」atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 数量也不用和开头一样（行首的井字数量决定标题的阶数）：</p>

<pre><code># This is an H1 #

## This is an H2 ##

### This is an H3 ######
</code></pre>

<h3 id="blockquote">Blockquotes</h3>


<p>Markdown 使用 email 形式的区块引言，如果你很熟悉如何在 email 信件中引言，你就知道怎么在 Markdown 文件中建立一个区块引言，那会看起来像是你强迫断行，然后在每行的最前面加上 <code>&gt;</code> ：</p>

<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&gt; 
&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
&gt; id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>Markdown 也允许你只在整个段落的第一行最前面加上 <code>&gt;</code> ：</p>

<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>区块引言可以有阶层（例如：引言内的引言），只要根据层数加上不同数量的 <code>&gt;</code> ：</p>

<pre><code>&gt; This is the first level of quoting.
&gt;
&gt; &gt; This is nested blockquote.
&gt;
&gt; Back to the first level.
</code></pre>

<p>引言的区块内也可以使用其他的 Markdown 语法，包括标题、清单、程序代码区块等：</p>

<pre><code>&gt; ## This is a header.
&gt; 
&gt; 1.   This is the first list item.
&gt; 2.   This is the second list item.
&gt; 
&gt; Here's some example code:
&gt; 
&gt;     return shell_exec("echo $input | $markdown_script");
</code></pre>

<p>任何标準的文字编辑器都能简单地建立 email 样式的引言，例如 BBEdit ，你可以选取文字后然后从选单中选择<em>增加引言阶层</em>。</p>

<h3 id="list">清单</h3>


<p>Markdown 支援有序清单和无序清单。</p>

<p>无序清单使用星号、加号或是减号作为清单标记：</p>

<pre><code>*   Red
*   Green
*   Blue
</code></pre>

<p>等同于：</p>

<pre><code>+   Red
+   Green
+   Blue
</code></pre>

<p>也等同于：</p>

<pre><code>-   Red
-   Green
-   Blue
</code></pre>

<p>有序清单则使用数字接着一个英文句点：</p>

<pre><code>1.  Bird
2.  McHale
3.  Parish
</code></pre>

<p>很重要的一点是，你在清单标记上使用的数字并不会影响输出的 HTML 结果，上面的清单所产生的 HTML 标记为：</p>

<pre><code>&lt;ol&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;McHale&lt;/li&gt;
&lt;li&gt;Parish&lt;/li&gt;
&lt;/ol&gt;
</code></pre>

<p>如果你的清单标记写成：</p>

<pre><code>1.  Bird
1.  McHale
1.  Parish
</code></pre>

<p>或甚至是：</p>

<pre><code>3. Bird
1. McHale
8. Parish
</code></pre>

<p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的清单数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p>

<p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支援有序清单的 start 属性。</p>

<p>清单项目标记通常是放在最左边，但是其实也可以缩排，最多三个空白，项目标记后面则一定要接着至少一个空白或 tab。</p>

<p>要让清单看起来更漂亮，你可以把内容用固定的缩排整理好：</p>

<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>但是如果你很懒，那也不一定需要：</p>

<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>如果清单项目间用空行分开， Markdown 会把项目的内容在输出时用 <code>&lt;p&gt;</code>
标签包起来，举例来说：</p>

<pre><code>*   Bird
*   Magic
</code></pre>

<p>会被转换为：</p>

<pre><code>&lt;ul&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;Magic&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>但是这个：</p>

<pre><code>*   Bird

*   Magic
</code></pre>

<p>会被转换为：</p>

<pre><code>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>清单项目可以包含多个段落，每个项目下的段落都必须缩排 4 个空白或是一个 tab ：</p>

<pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>如果你每行都有缩排，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p>

<pre><code>*   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You're
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another item in the same list.
</code></pre>

<p>如果要在清单项目内放进引言，那 <code>&gt;</code> 就需要缩排：</p>

<pre><code>*   A list item with a blockquote:

    &gt; This is a blockquote
    &gt; inside a list item.
</code></pre>

<p>如果要放程序代码区块的话，该区块就需要缩排<em>两次</em>，也就是 8 个空白或是两个 tab：</p>

<pre><code>*   A list item with a code block:

        &lt;code goes here&gt;
</code></pre>

<p>当然，项目清单很可能会不小心产生，像是下面这样的写法：</p>

<pre><code>1986. What a great season.
</code></pre>

<p>换句话说，也就是在行首出现<em>数字-句点-空白</em>，要避免这样的状况，你可以在句点前面加上反斜线。</p>

<pre><code>1986\. What a great season.
</code></pre>

<h3 id="precode">程序代码区块</h3>


<p>和程式相关的写作或是标签语言源代码通常会有已经排版好的程序代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把程序代码区块包起来。</p>

<p>要在 Markdown 中建立程序代码区块很简单，只要简单地缩排 4 个空白或是 1 个 tab 就可以，例如，下面的输入：</p>

<pre><code>This is a normal paragraph:

    This is a code block.
</code></pre>

<p>Markdown 会转换成：</p>

<pre><code>&lt;p&gt;This is a normal paragraph:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is a code block.
&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<p>这个每行一阶的缩排（4 个空白或是 1 个 tab），都会被移除，例如：</p>

<pre><code>Here is an example of AppleScript:

    tell application "Foo"
        beep
    end tell
</code></pre>

<p>会被转换为：</p>

<pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tell application "Foo"
    beep
end tell
&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<p>一个程序代码区块会一直持续到没有缩排的那一行（或是文件结尾）。</p>

<p>在程序代码区块里面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 源代码，只需要复制贴上，再加上缩排就可以了，剩下的 Markdown 都会帮你处理，例如：</p>

<pre><code>    &lt;div class="footer"&gt;
        &amp;copy; 2004 Foo Corporation
    &lt;/div&gt;
</code></pre>

<p>会被转换为：</p>

<pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class="footer"&amp;gt;
    &amp;amp;copy; 2004 Foo Corporation
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<p>程序代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p>

<h3 id="hr">分隔线</h3>


<p>你可以在一行中用三个或以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号中间插入空白。下面每种写法都可以建立分隔线：</p>

<pre><code>* * *

***

*****

- - -

---------------------------------------
</code></pre>

<hr />

<h2 id="span">区段元素</h2>




<h3 id="link">链接</h3>


<p>Markdown 支援两种形式的链接语法： <em>行内</em>和<em>参考</em>两种形式。</p>

<p>不管是哪一种，链接的文字都是用 [方括号] 来标记。</p>

<p>要建立一个行内形式的链接，只要在方块括号后面马上接着括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p>

<pre><code>This is [an example](http://example.com/ "Title") inline link.

[This link](http://example.net/) has no title attribute.
</code></pre>

<p>会产生：</p>

<pre><code>&lt;p&gt;This is &lt;a href="http://example.com/" title="Title"&gt;
an example&lt;/a&gt; inline link.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://example.net/"&gt;This link&lt;/a&gt; has no
title attribute.&lt;/p&gt;
</code></pre>

<p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p>

<pre><code>See my [About](/about/) page for details.   
</code></pre>

<p>参考形式的链接使用另外一个方括号接在链接文字的括号后面，而在第二个方括号里面要填入用以辨识链接的标签：</p>

<pre><code>This is [an example][id] reference-style link.
</code></pre>

<p>你也可以选择性地在两个方括号中间加上空白：</p>

<pre><code>This is [an example] [id] reference-style link.
</code></pre>

<p>接着，在文件的任意处，你可以把这个标签的链接内容定义出来：</p>

<pre><code>[id]: http://example.com/  "Optional Title Here"
</code></pre>

<p>链接定义的形式为：</p>

<ul>
<li>方括号，里面输入链接的辨识用标签</li>
<li>接着一个冒号</li>
<li>接着一个以上的空白或 tab</li>
<li>接着链接的网址</li>
<li>选择性地接着 title 内容，可以用单引号、双引号或是括号包着</li>
</ul>


<p>下面这三种链接的定义都是相同：</p>

<pre><code>[foo]: http://example.com/  "Optional Title Here"
[foo]: http://example.com/  'Optional Title Here'
[foo]: http://example.com/  (Optional Title Here)
</code></pre>

<p><strong>请注意：</strong>有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p>

<p>链接网址也可以用方括号包起来：</p>

<pre><code>[id]: &lt;http://example.com/&gt;  "Optional Title Here"
</code></pre>

<p>你也可以把 title 属性放到下一行，也可以加一些缩排，网址太长的话，这样会比较好看：</p>

<pre><code>[id]: http://example.com/longish/path/to/resource/here
    "Optional Title Here"
</code></pre>

<p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p>

<p>链接辨识标签可以有字母、数字、空白和标点符号，但是并<em>不</em>区分大小写，因此下面两个链接是一样的：</p>

<pre><code>[link text][a]
[link text][A]
</code></pre>

<p><em>默认的链接标签</em>功能让你可以省略指定链接标签，这种情形下，链接标签和链接文字会视为相同，要用默认链接标签只要在链接文字后面加上一个空的方括号，如果你要让 &ldquo;Google&rdquo; 链接到 google.com，你可以简化成：</p>

<pre><code>[Google][]
</code></pre>

<p>然后定义链接内容：</p>

<pre><code>[Google]: http://google.com/
</code></pre>

<p>由于链接文字可能包含空白，所以这种简化的标签内也可以包含多个文字：</p>

<pre><code>Visit [Daring Fireball][] for more information.
</code></pre>

<p>然后接着定义链接：</p>

<pre><code>[Daring Fireball]: http://daringfireball.net/
</code></pre>

<p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p>

<p>下面是一个参考式链接的范例：</p>

<pre><code>I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        "Google"
  [2]: http://search.yahoo.com/  "Yahoo Search"
  [3]: http://search.msn.com/    "MSN Search"
</code></pre>

<p>如果改成用链接名称的方式写：</p>

<pre><code>I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        "Google"
  [yahoo]:  http://search.yahoo.com/  "Yahoo Search"
  [msn]:    http://search.msn.com/    "MSN Search"
</code></pre>

<p>上面两种写法都会产生下面的 HTML。</p>

<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href="http://google.com/"
title="Google"&gt;Google&lt;/a&gt; than from
&lt;a href="http://search.yahoo.com/" title="Yahoo Search"&gt;Yahoo&lt;/a&gt;
or &lt;a href="http://search.msn.com/" title="MSN Search"&gt;MSN&lt;/a&gt;.&lt;/p&gt;
</code></pre>

<p>下面是用行内形式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p>

<pre><code>I get 10 times more traffic from [Google](http://google.com/ "Google")
than from [Yahoo](http://search.yahoo.com/ "Yahoo Search") or
[MSN](http://search.msn.com/ "MSN Search").
</code></pre>

<p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的链接却会增加到 176 个字符，如果是用纯 HTML 格式来写，会有 234 个字符，在 HTML 格式中，标签比文字还要多。</p>

<p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的资讯移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p>

<h3 id="em">强调</h3>


<p>Markdown 使用星号（<code>*</code>）和底线（<code>_</code>）作为标记强调字词的符号，被 <code>*</code> 或 <code>_</code> 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围，用两个 <code>*</code> 或 <code>_</code> 包起来的话，则会被转成 <code>&lt;strong&gt;</code>，例如：</p>

<pre><code>*single asterisks*

_single underscores_

**double asterisks**

__double underscores__
</code></pre>

<p>会转成：</p>

<pre><code>&lt;em&gt;single asterisks&lt;/em&gt;

&lt;em&gt;single underscores&lt;/em&gt;

&lt;strong&gt;double asterisks&lt;/strong&gt;

&lt;strong&gt;double underscores&lt;/strong&gt;
</code></pre>

<p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</p>

<p>强调也可以直接插在文字中间：</p>

<pre><code>un*frigging*believable
</code></pre>

<p>但是如果你的 <code>*</code> 和 <code>_</code> 两边都有空白的话，它们就只会被当成普通的符号。</p>

<p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p>

<pre><code>\*this text is surrounded by literal asterisks\*
</code></pre>

<h3 id="code">程序代码</h3>


<p>如果要标记一小段行内程序代码，你可以用反引号把它包起来（<code>`</code>），例如：</p>

<pre><code>Use the `printf()` function.
</code></pre>

<p>会产生：</p>

<pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;
</code></pre>

<p>如果要在程序代码区段内插入反引号，你可以用多个反引号来开启和结束程序代码区段：</p>

<pre><code>``There is a literal backtick (`) here.``
</code></pre>

<p>这段语法会产生：</p>

<pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;
</code></pre>

<p>程序代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</p>

<pre><code>A single backtick in a code span: `` ` ``

A backtick-delimited string in a code span: `` `foo` ``
</code></pre>

<p>会产生：</p>

<pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;
</code></pre>

<p>在程序代码区段内，<code>&amp;</code> 和方括号都会被转成 HTML 实体，这样会比较容易插入 HTML 源代码，Markdown 会把下面这段：</p>

<pre><code>Please don't use any `&lt;blink&gt;` tags.
</code></pre>

<p>转为：</p>

<pre><code>&lt;p&gt;Please don't use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
</code></pre>

<p>你也可以这样写：</p>

<pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.
</code></pre>

<p>以产生：</p>

<pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded
equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;
</code></pre>

<h3 id="img">图片</h3>


<p>很明显地，要在纯文字应用中设计一个 「自然」的语法来插入图片是有一定难度的。</p>

<p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： <em>行内</em>和<em>参考</em>。</p>

<p>行内图片的语法看起来像是：</p>

<pre><code>![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg "Optional title")
</code></pre>

<p>详细叙述如下：</p>

<ul>
<li>一个惊叹号 <code>!</code></li>
<li>接着一对方括号，里面放上图片的替代文字</li>
<li>接着一对普通括号，里面放上图片的网址，最后还可以用引号包住并加上
选择性的 &lsquo;title&rsquo; 文字。</li>
</ul>


<p>参考式的图片语法则长得像这样：</p>

<pre><code>![Alt text][id]
</code></pre>

<p>「id」是图片参考的名称，图片参考的定义方式则和链接参考一样：</p>

<pre><code>[id]: url/to/image  "Optional title attribute"
</code></pre>

<p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p>

<hr />

<h2 id="misc">其它</h2>




<h3 id="autolink">自动链接</h3>


<p>Markdown 支援比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接，链接的文字就和链接位置一样，例如：</p>

<pre><code>&lt;http://example.com/&gt;
</code></pre>

<p>Markdown 会转为：</p>

<pre><code>&lt;a href="http://example.com/"&gt;http://example.com/&lt;/a&gt;
</code></pre>

<p>自动的邮件链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以混淆一些不好的信箱地址收集机器人，例如：</p>

<pre><code>&lt;address@example.com&gt;
</code></pre>

<p>Markdown 会转成：</p>

<pre><code>&lt;a href="&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;
&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;
&amp;#109;"&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;
&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;
</code></pre>

<p>在浏览器里面，这段字串会变成一个可以点击的「address@example.com」链接。</p>

<p>（这种作法虽然可以混淆不少的机器人，但并无法全部挡下来，不过这样也比什么都不做好些。无论如何，公开你的信箱终究会引来广告信件的。）</p>

<h3 id="backslash">跳脱字符</h3>


<p>Markdown 可以利用反斜线来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <code>&lt;em&gt;</code> 标签），你可以在星号的前面加上反斜线：</p>

<pre><code>\*literal asterisks\*
</code></pre>

<p>Markdown 支援在下面这些符号前面加上反斜线来帮助插入普通的符号：</p>

<pre><code>\   反斜线
`   反引号
*   星号
_   底线
{}  大括号
[]  方括号
()  括号
#   井字号
+   加号
-   减号
.   英文句点
!   惊叹号
</code></pre>

<h2 id="acknowledgement">感谢</h2>


<p>感谢 <a href="https://twitter.com/#!/leafy7382">leafy7382</a> 协助翻译，<a href="http://iamhlb.com/">hlb</a>、<a href="http://twitter.com/randylien">Randylien</a> 帮忙润稿，<a href="https://twitter.com/#!/ethantw">ethantw</a> 的<a href="http://ethantw.net/projects/han/">汉字标準格式・CSS Reset</a>， <a href="http://kidwm.net/">WM</a> 回报文字错误。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[flashdevelop cannot show up]]></title>
    <link href="http://larryhou.github.io/blog/2013/08/21/flashdevelop-cannot-show-up/"/>
    <updated>2013-08-21T10:55:00+08:00</updated>
    <id>http://larryhou.github.io/blog/2013/08/21/flashdevelop-cannot-show-up</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://larryhou.github.io/images/flashdevelop/01.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Mac系统安装佳能软件]]></title>
    <link href="http://larryhou.github.io/blog/2013/03/18/install-canon-tools-on-mac/"/>
    <updated>2013-03-18T11:40:00+08:00</updated>
    <id>http://larryhou.github.io/blog/2013/03/18/install-canon-tools-on-mac</id>
    <content type="html"><![CDATA[<p>如果你的安装光盘丢失了，怎么才能在Mac系统安装佳能工具软件呢？你可能已经在<a href="http://support-cn.canon-asia.com" title="佳能驱动与软件官网">官网</a>搜查过了，但是你会发现找不到对应的安装软件！是这样的，官网只有升级软件下载，那这岂不是很尴尬：升级软件安装的前提是先安装原版软件，但是现在又没有安装盘，死循环了！！其实这些升级软件另有玄机，里面都有安装包的，但是如果要直接运行，你可能要麻烦一下。<!--more--></p>

<p>首先，去<a href="http://support-cn.canon-asia.com" title="佳能驱动与软件官网">官网</a>下载系统版本对应的最新升级包，然后逐个测试一下三种方法，直至安装成功为止；如果，尝试了三种方式还是不能安装，那么表示本博客太旧了你需要另外google一下，或者联系作者（<em>larryhou@foxmail.com</em>）更新博客！</p>

<h2>DPP 3.12.52</h2>

<ul>
<li>从官网下载dpp3.12.52x.dmg</li>
<li>双击装载镜像，复制dpp3.12.52x_updater.app到任意其他目录（比如：下载）</li>
<li>在dpp3.12.52x_updater.app上鼠标右键，点击“显示包内容/Show Package Contents”</li>
<li>进入Contents/Resources/目录，删除Info.datx文件</li>
<li>返回上一级目录Contents，进入MacOS目录，双击运行OFICore</li>
</ul>


<h2>方法（一）</h2>

<blockquote><p>* Files you downloaded are compressed as “.zip” or “.gz” files<br/>* Double click on the file and it will expand to the disk image file extension “.dmg”<br/>* Click on image file EU211.4x-updater.dmg, it will mount it as disk mount<br/>* Transfer (copy) content where you want (exmp: desktop)<br/>* After copying unmount dmg image<br/>* Click on desktop copy: ‘Show Package Contents’<br/>* Navigate to ./Contents/Ressources/ and delete the Info.datx file<br/>* Close window<br/>* Run Installation</p></blockquote>


<h2>方法（二）</h2>

<blockquote><p>* Files you downloaded are compressed as “.zip” or “.gz” files<br/>* Double click on the file and it will expand to the disk image file extension “.dmg”<br/>* Click on that image file, it will mount it as disk<br/>* We should copy (extract) UpdateInstaller to our disk<br/>* Eject disk image<br/>* We will modify UpdateInstaller<br/>* Click on UpdateInstaller and go to “Show Package Contents”<br/>* It will open new window with Contents<br/>* Navigate to Contents/Resources and find the SDI.bundle file.<br/>* Click on the SDI.bundle and ‘Show Package Contents’ again<br/>* Now navigate to Contents/Resources and locate a file called update.plist<br/>* Delete update.plist file<br/>* Close opened windows and run UpdateInstaller it should install now!</p></blockquote>


<h2>方法（三）</h2>

<blockquote><p>* Files you downloaded are compressed as “.zip” or “.gz” files<br/>* Double click on the file and it will expand to the disk image file extension “.dmg”<br/>* Click on that image file, it will mount it as disk<br/>* We should copy (extract) UpdateInstaller to our disk<br/>* Eject disk image<br/>* We will modify UpdateInstaller<br/>* Click on UpdateInstaller and go to “Show Package Contents”<br/>* It will open new window with Contents<br/>* Now navigate to Resources and locate a file called update.plist<br/>* Delete update.plist file<br/>* Close opened windows and run UpdateInstaller it should install now!</p></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MAN输出文本可读性增强技巧]]></title>
    <link href="http://larryhou.github.io/blog/2012/11/29/make-man-output-readable/"/>
    <updated>2012-11-29T13:38:00+08:00</updated>
    <id>http://larryhou.github.io/blog/2012/11/29/make-man-output-readable</id>
    <content type="html"><![CDATA[<p>有时候在Terminal查看帮助实在是痛苦：只能显示几行，所以我就想在文本文件里面查看这些帮助（比如，TextMate），如果你使用类似<code>man col > ~/downloads/col.txt</code>，你会发现这简直是个悲剧，见下图</p>

<p><img src="http://larryhou.github.io/images/make-man-output-readable/fig01.png"></p>

<p>这完全不是我想要的结果，没有任何可读性，这是怎么回事儿呢？我Google到了一段文字可以解释这个问题：</p>

<blockquote><p>Ever try to open a man page in TextEdit using <code>man | open -f</code>? <br/>You end up with the kind of unreadable repeated characters shown here. This all dates back to the days of dot matrix and daisy wheel printing when the only way you could produce bold type was to repeatedly print characters. <br/>Fortunately, there's an easy way to convert man pages into simple, non-redundant text. Use the command-line utility <code>col</code> with the <code>-b</code> flag enabled. For example, <code>man col | col -b | open -f</code> will open the col man page in TextEdit without repeated characters. The <code>-b</code> flag tells col to exclude all but the last character written to any column, ignoring any backspaces and repeats.</p></blockquote>


<p>这是一个历史遗留问题，可以追溯到使用点阵和菊花轮印刷的旧时代，那个时候为了得到粗体字体样式采用的是反复重复印刷的手段。幸运的是，有个简单的方法可以让man帮助变得简单可读、没有冗余字符，可以在man后面使用管道添加<code>col -b</code>来实现，其中<code>-b</code>标记位意思是忽略退格键以及去掉所有重复字符。比如，得到<code>col</code>的帮助可以使用<code>man col | col -b | open -f</code>，这里<code>open -f</code> 意思是使用默认文本编辑器打开，如下图</p>

<p><img src="http://larryhou.github.io/images/make-man-output-readable/fig02.png"></p>

<p>最后总结一下：</p>

<ul>
<li><p>man帮助输出到文本文件</p>

<blockquote><p>man [command] | col -b > [file saving path]</p></blockquote></li>
<li><p>man帮助直接用文本编辑器打开</p>

<blockquote><p>man [command] | col -b | open -f</p></blockquote></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[脚本中的嵌套变量]]></title>
    <link href="http://larryhou.github.io/blog/2012/11/26/nested-variable/"/>
    <updated>2012-11-26T20:38:00+08:00</updated>
    <id>http://larryhou.github.io/blog/2012/11/26/nested-variable</id>
    <content type="html"><![CDATA[<h2>OSX系统</h2>

<p>这里有一段简单脚本，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">name1</span><span class="o">=</span>larry01
</span><span class='line'><span class="nv">name2</span><span class="o">=</span>larry02
</span><span class='line'><span class="nv">name3</span><span class="o">=</span>larry03
</span><span class='line'><span class="nv">name4</span><span class="o">=</span>larry04
</span><span class='line'><span class="nv">name5</span><span class="o">=</span>larry05
</span><span class='line'><span class="nv">name6</span><span class="o">=</span>larry06
</span><span class='line'><span class="nv">name7</span><span class="o">=</span>larry07
</span><span class='line'><span class="nv">name8</span><span class="o">=</span>larry08
</span><span class='line'><span class="nv">name9</span><span class="o">=</span>larry09
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$name1</span> wants to sleep.
</span><span class='line'><span class="nb">echo</span> <span class="nv">$name2</span> wants to sleep.
</span><span class='line'><span class="nb">echo</span> <span class="nv">$name3</span> wants to sleep.
</span><span class='line'><span class="nb">echo</span> <span class="nv">$name4</span> wants to sleep.
</span><span class='line'><span class="nb">echo</span> <span class="nv">$name5</span> wants to sleep.
</span><span class='line'><span class="nb">echo</span> <span class="nv">$name6</span> wants to sleep.
</span><span class='line'><span class="nb">echo</span> <span class="nv">$name7</span> wants to sleep.
</span><span class='line'><span class="nb">echo</span> <span class="nv">$name8</span> wants to sleep.
</span><span class='line'><span class="nb">echo</span> <span class="nv">$name9</span> wants to sleep.
</span></code></pre></td></tr></table></div></figure>


<p>在脚本中，我把每一个name都按照一定的规律做了一些操作，现在看来好像没什么问题。但是如果name有很多很多，这么写就很苦逼了，并且很容易出错。<!--more-->我们习惯让电脑做重复有规律的工作，让人从重复的劳动中解脱出来。那么这是一个很好的案例，该怎么解脱呢？看起来很简单，有代码经验的同学很容易想到使用循环来实现，这个思路是对的，name1~name9这几个有规律的字符串是很容通过脚本来实现的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">i</span><span class="o">=</span>1
</span><span class='line'><span class="k">while</span> <span class="o">[</span> <span class="nv">$i</span> -le <span class="m">9</span> <span class="o">]</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>  <span class="nb">echo </span>name<span class="nv">$i</span>
</span><span class='line'>  <span class="nv">i</span><span class="o">=</span><span class="nv">$[$i</span> + 1<span class="o">]</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是仅仅获得变量名对我们是没多大帮助的，要是这些动态计算出来的变量名能够动态计算出值来就太好了。其实我们可以通过<code>eval</code>命令来实现我们的想法，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">name1</span><span class="o">=</span>larry01
</span><span class='line'><span class="nv">name2</span><span class="o">=</span>larry02
</span><span class='line'><span class="nv">name3</span><span class="o">=</span>larry03
</span><span class='line'><span class="nv">name4</span><span class="o">=</span>larry04
</span><span class='line'><span class="nv">name5</span><span class="o">=</span>larry05
</span><span class='line'><span class="nv">name6</span><span class="o">=</span>larry06
</span><span class='line'><span class="nv">name7</span><span class="o">=</span>larry07
</span><span class='line'><span class="nv">name8</span><span class="o">=</span>larry08
</span><span class='line'><span class="nv">name9</span><span class="o">=</span>larry09
</span><span class='line'>
</span><span class='line'><span class="nv">i</span><span class="o">=</span>1
</span><span class='line'><span class="k">while</span> <span class="o">[</span> <span class="nv">$i</span> -le <span class="m">9</span> <span class="o">]</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>  <span class="nv">name</span><span class="o">=</span><span class="k">$(</span><span class="nb">eval echo</span> <span class="se">\$</span><span class="o">{</span>name<span class="nv">$i</span><span class="o">}</span><span class="k">)</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="nv">$name</span> wants to sleep.
</span><span class='line'>  <span class="nv">i</span><span class="o">=</span><span class="nv">$[$i</span> + 1<span class="o">]</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>是不是很好玩！</p>

<h2>WIN系统</h2>

<p>同样的需求在WIN系统该怎么实现？<br/>
我们可以使用DOS命令，虽然比起shell命令DOS弱爆了，但是它还是能够完成任务的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="k">set</span> <span class="nv">name1</span><span class="o">=</span>larry<span class="m">01</span>
</span><span class='line'><span class="k">set</span> <span class="nv">name2</span><span class="o">=</span>larry<span class="m">02</span>
</span><span class='line'><span class="k">set</span> <span class="nv">name3</span><span class="o">=</span>larry<span class="m">03</span>
</span><span class='line'><span class="k">set</span> <span class="nv">name4</span><span class="o">=</span>larry<span class="m">04</span>
</span><span class='line'><span class="k">set</span> <span class="nv">name5</span><span class="o">=</span>larry<span class="m">05</span>
</span><span class='line'><span class="k">set</span> <span class="nv">name6</span><span class="o">=</span>larry<span class="m">06</span>
</span><span class='line'><span class="k">set</span> <span class="nv">name7</span><span class="o">=</span>larry<span class="m">07</span>
</span><span class='line'><span class="k">set</span> <span class="nv">name8</span><span class="o">=</span>larry<span class="m">08</span>
</span><span class='line'><span class="k">set</span> <span class="nv">name9</span><span class="o">=</span>larry<span class="m">09</span>
</span><span class='line'>
</span><span class='line'><span class="k">SETLOCAL</span> ENABLEDELAYEDEXPANSION
</span><span class='line'><span class="k">FOR</span> <span class="n">/L</span> <span class="nv">%%i</span> in (<span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">9</span>) <span class="k">do</span> <span class="k">echo</span> !name<span class="nv">%%i</span>! wants to sleep.
</span><span class='line'><span class="k">ENDLOCAL</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出DOS里面使用两个感叹号括住对应变量组合就可以计算出相应的变量值，但是有个前提：要先设置<code>SETLOCAL ENABLEDELAYEDEXPANSION</code>。待处理结束后再运行<code>ENDLOCAL</code>，否则后面含有感叹号的地方都不能正常显示。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义Xcode代码模板：Code Snippet]]></title>
    <link href="http://larryhou.github.io/blog/2012/11/26/customize-xcode-snippet/"/>
    <updated>2012-11-26T09:40:00+08:00</updated>
    <id>http://larryhou.github.io/blog/2012/11/26/customize-xcode-snippet</id>
    <content type="html"><![CDATA[<p>Xcode强大的代码提示功能是有目共睹的，用过都知道，可是你是否想过添加一些自定义的代码提示模板？你是否想让if默认的左括号挪到下一行？还有for、while、switch等等……如果你有这方面的需求的话，这篇文章刚好可以帮到你！ <!--more--></p>

<p>在Xcode左下角有个花括号的页签，这里面存储了很多代码提示模板，如下图</p>

<p><img src="http://larryhou.github.io/images/customize-xcode-snippet/fig01.png"><br/>
点击列表里面任一个项目都会弹出一个说明框，里面有个<strong>Edit</strong>和<strong>Done</strong>按钮，这很容易让人产生编辑的想法，其实这是个错觉：这些内置的代码模板是不可编辑的！你看到这里可能会有点着急，因为你可能想问那if左括号是不是不能挪到下一行了？！其实，你如果用过Apple的产品，那你应该会想到Apple不会这么SB，这些都是可以编辑的！下面我们介绍编辑Xcode内置代码模板。</p>

<h2>编辑Xcode内置代码模板</h2>

<p>Xcode的所有代码模板是用一个plist格式xml文件描述的，这文件存储在Xcode的安装目录：</p>

<blockquote><p>/Applications/Xcode.app/Contents/PlugIns/IDECodeSnippetLibrary.ideplugin/Contents/Resources/¬
SystemCodeSnippets.codesnippets</p></blockquote>

<p>可以用任意文本编辑器打开这个代码模板配置文件，这是一段if的代码模板的XML配置,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>IDECodeSnippetVersion<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;integer&gt;</span>1<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>IDECodeSnippetCompletionPrefix<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>if<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>IDECodeSnippetContents<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>if (<span class="ni">&amp;lt;</span>#condition#<span class="ni">&amp;gt;</span>) {
</span><span class='line'><span class="ni">&amp;lt;</span>#statements#<span class="ni">&amp;gt;</span>
</span><span class='line'>}<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>IDECodeSnippetIdentifier<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>D70E6D11-0297-4BAB-88AA-86D5D5CBBC5D<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>IDECodeSnippetLanguage<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>Xcode.SourceCodeLanguage.C<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>IDECodeSnippetSummary<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>Used for executing code only when a certain condition is true.<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>IDECodeSnippetTitle<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string&gt;</span>If Statement<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>IDECodeSnippetCompletionScopes<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>    <span class="nt">&lt;array&gt;</span>
</span><span class='line'>        <span class="nt">&lt;string&gt;</span>CodeBlock<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/array&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中IDECodeSnippetContents字段表示具体代码模板的内容，虽然Xcode不允许编辑内置的代码模板，但是Xcode允许用户自定义代码模板，并且每个模板有一个唯一标识符IDECodeSnippetIdentifier，其中if模板的唯一标记是D70E6D11-0297-4BAB-88AA-86D5D5CBBC5D，那么既然每个代码模板是唯一存在的，那么如果自定义的模板的唯一标识符与内置代码模板相同了会发生什么情况？覆盖！这是我们修改内置代码模板的关键入口，也是核心思想！</p>

<p>到这里一切都变得很清晰了：我们只要自定义一个相同标识符的带模板就可以覆盖内置的代码模板。官方文档介绍了创建自定义模板的方法：在Xcode输入代码模板代码，然后拖拽到Xcode的模板栏，然后点击“<strong>Edit</strong>”就是可以做相关的修改，编辑完后点击“<strong>Done</strong>”就可以使用了，然后在下面这个目录可以找到模板配置文件。</p>

<blockquote><p>~/Library/Developer/Xcode/UserData/CodeSnippets/</p></blockquote>

<p>如果你用上述方法添加了一个自定义模板，那么你在这个目录可能看到类似D70E6D11-0297-4BAB-88AA-86D5D5CBBC5D.codesnippet命名的文件，其实这个文件名就是模板的唯一标识符。其实我们并不想要这样的命名方式，因为不方便维护以及分享，虽然在Xcode里面可以很方便地编辑他们。庆幸的是这个文件名是可以修改的，你可以像这样用一些有含义的字符来修改命名。<br/>
<img src="http://larryhou.github.io/images/customize-xcode-snippet/fig02.png"></p>

<p>但是有个问题：Xcode会自动为我们的模板分配一个唯一标识符，这样就不能达到覆盖的目的。有些同学可能想到从SystemCodeSnippets.codesnippets配置里面查找相关的标识符，然后黏贴过来，这样确实可以达到目的。不过现在我给大家推荐另外一种方法。</p>

<p>首先，到SystemCodeSnippets.codesnippets里面找到你要修改的模板配置，然后复制黏贴到如下这段配置中</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--code config here--&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后修改IDECodeSnippetVersion键值为2，暂时不确定为什么要这么修改，但是Xcode生成的自定义模板配置都是这个值，保持默认1也没多大问题，只是Xcode有时会自动用标识符替换你的自定义命名，所以用2是比较合适的。这样还没完，因为还要添加一个键值为true的字段IDECodeSnippetUserSnippet，该字段标记了模板是否为自定义的，如果是自定义的模板但是没有这个字段，你的Xcode启动后可能会崩溃&hellip;orz</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;key&gt;</span>IDECodeSnippetUserSnippet<span class="nt">&lt;/key&gt;</span>
</span><span class='line'><span class="nt">&lt;true/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么如果替换内置的if模板，那么完整的配置应该是这样的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetCompletionPrefix<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>if<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetCompletionScopes<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;array&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>CodeBlock<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetContents<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>if (<span class="ni">&amp;lt;</span>#condition#<span class="ni">&amp;gt;</span>)
</span><span class='line'>{
</span><span class='line'>    <span class="ni">&amp;lt;</span>#statements#<span class="ni">&amp;gt;</span>
</span><span class='line'>}<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetIdentifier<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>5163356F-D409-4EDA-B263-EA2E07A50B9C<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetLanguage<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>Xcode.SourceCodeLanguage.C<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetSummary<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>Used for executing code only when a certain condition is true.<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetTitle<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>If Statement<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetUserSnippet<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;true/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetVersion<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;integer&gt;</span>2<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可能注意到类似&amp;lt;#condition#&amp;gt;这样的代码，它们是什么呢？你再写代码遇到代码提示的时候，可能遇到过蓝色泡泡一样的东西，可以用Tab键来切换，那么这个奇怪的字符就是用来添加蓝色泡泡的。因为这是XML配置，所以做了HTML转义；如果你在Xcode里面编辑模板并添加蓝色泡泡的话，直接输入&lt;#condition#>即可，##符号之间可以为任意字符。</p>

<h2>隐藏代码模板提示</h2>

<p>有时候你可能想要隐藏某个内置的模板，这样的需求也是可以完成的。你只需要把IDECodeSnippetCompletionPrefix字段的键值留空既可以，如果你把如下这段配置保存到模板目录，那么你的Xcode将不再弹出if语句的代码提示。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetCompletionPrefix<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetCompletionScopes<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;array&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>CodeBlock<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetContents<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>if (<span class="ni">&amp;lt;</span>#condition#<span class="ni">&amp;gt;</span>)
</span><span class='line'>{
</span><span class='line'>    <span class="ni">&amp;lt;</span>#statements#<span class="ni">&amp;gt;</span>
</span><span class='line'>}<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetIdentifier<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>5163356F-D409-4EDA-B263-EA2E07A50B9C<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetLanguage<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>Xcode.SourceCodeLanguage.C<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetSummary<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>Used for executing code only when a certain condition is true.<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetTitle<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>If Statement<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetUserSnippet<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;true/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>IDECodeSnippetVersion<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;integer&gt;</span>2<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Xcode里面输入if，就不见了if statement的提示</p>

<p><img src="http://larryhou.github.io/images/customize-xcode-snippet/fig03.png"></p>

<p>是不是很酷？！</p>

<p>最后总结一下自定义的注意事项：</p>

<blockquote><ul>
<li>自定义目录不能有相同标识符的模板，否则Xcode启动后会崩溃；</li>
<li>自定义母的模板标识符可以跟系统默认模板标识符相同，可以达到覆盖效果；</li>
<li>若要使用自定义模板覆盖系统模板，则必须有DECodeSnippetUserSnippet字段，否则Xcode启动后会崩溃;</li>
</ul>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIT设置push.default]]></title>
    <link href="http://larryhou.github.io/blog/2012/11/22/git-push-dot-default/"/>
    <updated>2012-11-22T14:50:00+08:00</updated>
    <id>http://larryhou.github.io/blog/2012/11/22/git-push-dot-default</id>
    <content type="html"><![CDATA[<p>今天使用<code>git push</code>命令，结果出现一堆以前没见过的东西</p>

<blockquote><p>warning: push.default 未设置，它的默认值将会在 Git 2.0 由 'matching'<br/>修改为 'simple'。若要不再显示本信息并在其默认值改变后维持当前使用习惯，<br/>进行如下设置：</p><p>  git config --global push.default matching</p><p>若要不再显示本信息并从现在开始采用新的使用习惯，设置：</p><p>  git config --global push.default simple</p><p>参见 'git help config' 并查找 'push.default' 以获取更多信息。<br/>（'simple' 模式由 Git 1.7.11 版本引入。如果您有时要使用老版本的 Git，<br/>为保持兼容，请用 'current' 代替 'simple' 模式）</p><footer><strong>Terminal.app</strong> <cite>GIT With Version 1.8.0</cite></footer></blockquote>


<p>尼玛，乍一看吓一跳还以为代码出错了，解决这个问题很简单，按照上面的提示在Terminal.app里面运行一下脚本</p>

<blockquote><p>git config &ndash;global push.default matching</p></blockquote>

<p>我在纳闷，GIT版本更新后为毛不自动设置一下.gitconfig配置呢？还要我手动操作一下，难道是想介绍GIT的这新功能？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interface, Protocol, Category and Extension in Objective-C]]></title>
    <link href="http://larryhou.github.io/blog/2012/11/21/interface-protocol-and-category/"/>
    <updated>2012-11-21T21:12:00+08:00</updated>
    <id>http://larryhou.github.io/blog/2012/11/21/interface-protocol-and-category</id>
    <content type="html"><![CDATA[<p>假如你要学习Objective-C，那么你需要搞清楚interface、protocol、category以及extension这几个概念，它们在代码的出现频率非常高，也非常有用。本文将对这几个概念一一来说明，并介绍各自的使用方法。<!--more--></p>

<h2>Interface</h2>

<p>interface在Objective-C里面充当头文件作用，在Xcode里面interface是以*.h为后缀的文件，在里面可以定义类文件所需的成员变量、getter/setter以及函数方法，但是这些声明要放到<code>@interface &hellip; @end</code>指令中间。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Mobile</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@private</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">model</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@protected</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">sn</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@public</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">producer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">photoNumber</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">mail</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">+(</span><span class="n">Mobile</span> <span class="o">*</span><span class="p">)</span> <span class="nf">create</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">call</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个头文件里面定义了四个成员变量name、model、sn、producer，其中name、model是私有变量，sn是protected变量，producer为public变量；photoNumber、mail是getter/setter函数;前面有个减号的call是一个实例方法，前面有个加号的create是一个类方法，与Actionscript的public静态方法类似。</p>

<p>interface头文件声明的方法需要在<code>@implementation &hellip; @end</code>指令里面实现，如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;Mobile.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Mobile</span>
</span><span class='line'>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">photoNumber</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">mail</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="s">@&quot;iPhone&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">-&gt;</span><span class="n">model</span> <span class="o">=</span> <span class="s">@&quot;A1332&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">-&gt;</span><span class="n">producer</span> <span class="o">=</span> <span class="s">@&quot;Apple Inc.&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+(</span><span class="n">Mobile</span> <span class="o">*</span><span class="p">)</span><span class="nf">create</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="n">Mobile</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">call</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Call %@&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">photoNumber</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>成员变量可以通过<code>self-></code>来访问，不管该变量是private还是protected、public。相比之下，如果要访问getter/setter方法<code>photoNumber</code>，那么可以有三种方式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Call %@&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">photoNumber</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Call %@&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="o">-&gt;</span><span class="n">photoNumber</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Call %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nb">self</span> <span class="n">photoNumber</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>call</code>是实例方法，我们可以构造一个<code>Mobile</code>实例来调用，如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Mobile</span> <span class="o">*</span><span class="n">mobile</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Mobile</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">mobile</span><span class="p">.</span><span class="n">photoNumber</span> <span class="o">=</span> <span class="s">@&quot;15988886039&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">call</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>而<code>create</code>是类方法，可以通过类名直接访问，如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Mobile</span> <span class="o">*</span><span class="n">mobile</span> <span class="o">=</span> <span class="p">[</span><span class="n">Mobile</span> <span class="n">create</span><span class="p">];</span>
</span><span class='line'><span class="n">mobile</span><span class="p">.</span><span class="n">photoNumber</span> <span class="o">=</span> <span class="s">@&quot;15988886039&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">call</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Protocol</h2>

<p>protocol也是一个*.h文件，通过<code>@protocol &hellip; @end</code>来声明接口(函数方法或者getter/setter)，跟interface有点类似。它有什么用呢？</p>

<ul>
<li>声明一个隐藏类的调用接口</li>
<li>在非继承关系的类之间可以做类型转换</li>
</ul>


<p>这个与Actionscript的interface文件作用是一致的，任何类都可以去实现这个protocol接口，然后具有protocol声明的类型。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@protocol</span> <span class="nc">IMobile</span> <span class="o">&lt;</span><span class="bp">NSObject</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">photoNumber</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">call</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@required</span>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">playMusic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@optional</span>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">restart</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>IMobile</code>接口声明了两个必须实现的接口<code>call、playMusic</code>，一个可选接口<code>restart</code>，也是restart可以选择不实现。实现这个protocol接口，可以在interface文件中添加一个尖括号来声明，如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'><span class="cp">#import &quot;IMobile.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Mobile</span> : <span class="bp">NSObject</span> <span class="o">&lt;</span><span class="n">IMobile</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@private</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">model</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@protected</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">sn</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">@public</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">producer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">photoNumber</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">mail</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">+(</span><span class="n">Mobile</span> <span class="o">*</span><span class="p">)</span> <span class="nf">create</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">call</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后通过<code>@implementation &hellip; @end</code>来实现，<code>IMobile</code>声明了getter/setter方法<code>photoNumber</code>以及<code>call、playMusic</code>两个实例方法，由于<code>photoNumber、call</code>已经被<code>Mobile</code>实现，所以只需要实现<code>playMusic</code>即可。如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;Mobile.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Mobile</span>
</span><span class='line'>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">photoNumber</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">mail</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="s">@&quot;iPhone&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">-&gt;</span><span class="n">model</span> <span class="o">=</span> <span class="s">@&quot;A1332&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">-&gt;</span><span class="n">producer</span> <span class="o">=</span> <span class="s">@&quot;Apple Inc.&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+(</span><span class="n">Mobile</span> <span class="o">*</span><span class="p">)</span><span class="nf">create</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="n">Mobile</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">call</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Call %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nb">self</span> <span class="n">photoNumber</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">playMusic</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Play music.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>protocol接口实现后，可以这样来使用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">id</span> <span class="o">&lt;</span><span class="n">IMobile</span><span class="o">&gt;</span> <span class="n">mobile</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Mobile</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="nl">setPhotoNumber</span><span class="p">:</span><span class="s">@&quot;15988886039&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">playMusic</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">call</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Mobile</span> <span class="o">&lt;</span><span class="n">IMobile</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">mobile</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Mobile</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">mobile</span><span class="p">.</span><span class="n">photoNumber</span> <span class="o">=</span> <span class="s">@&quot;15988886039&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="nl">setPhotoNumber</span><span class="p">:</span><span class="s">@&quot;15988886039&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">playMusic</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">call</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面说到<code>restart</code>为可选接口，有可能没有被实现，在没有实现的情况下去调用就会报错，对于这种接口就需要在使用前检测一下是否可用，如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">SEL</span> <span class="n">restart</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">restart</span><span class="p">:);</span>
</span><span class='line'><span class="k">if</span><span class="p">([</span><span class="n">mobile</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="n">restart</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">mobile</span> <span class="n">restart</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;restart is not complement.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：上面提到<code>@required</code>指令标记的方法必须实现，不然会出现编译警告</p>

<p><img src="http://larryhou.github.io/images/interface-protocol-and-category/fig01.png"></p>

<h2>Category</h2>

<p>category可以对一个类文件添加方法，哪怕不知道这个类的代码，只要有这个类的interface头文件即可。这个功能有什么用呢？举个简单例子就可以很容易理解。</p>

<figure class='code'><figcaption><span>category interface </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="bp">NSObject</span> <span class="nl">(Run)</span>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">run</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>category implementation </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;NSObject+Run.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="bp">NSObject</span> <span class="nl">(Run)</span>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">run</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Run! ::%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nb">self</span> <span class="n">className</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>category使用实例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="s">@&quot;larryhou&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">name</span> <span class="n">run</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">Mobile</span> <span class="o">&lt;</span><span class="n">IMobile</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">mobile</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Mobile</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">mobile</span><span class="p">.</span><span class="n">photoNumber</span> <span class="o">=</span> <span class="s">@&quot;15988886039&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">playMusic</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">call</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">run</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>有没有发现什么情况？<br/>
我在NSObject+Run.h头文件定义了一个<code>run</code>的方法，然后在NSObject+Run.m文件中实现<code>run</code>方法，然后再<code>#import &ldquo;NSObject+Run.h&rdquo;</code>，然后奇迹发生了：所有继承了NSObject的类都好像有了<code>run</code>这个方法一样！！！是的，没错就是这样！是不是很酷！！</p>

<p>细心的同学可能已经发现，定义category需要写一个interface文件，<code>@interface</code>指令后面紧跟<strong>被扩展类名</strong>，然后写在圆括号里面写入category名称，可以为任意字符串。在实现categor的interface的时候也要注意：<code>@implementation</code>指令后面紧跟<strong>被扩展类名</strong>，然后在圆括号里面写入category名称，与interface声明保持一致，其他与实现普通类的interface方式一样。</p>

<p>这样再不修改源代码的情况下，给一个类添加方法还可以有另外一个用途：<strong>把类逻辑拆分到不同的文件里面，也就是说一个类可以有多个文件组成</strong>。</p>

<p>前面讲到<code>IMobile</code>有一个<code>@optional</code>标记的方法<code>restart</code>，现在我们把<code>restart</code>声明去掉，通过category方式来扩展<code>Mobile</code>的功能。</p>

<p><code>Mobile</code>扩展头文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;Mobile.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Mobile</span> <span class="nl">(Restart)</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">restart</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Mobile</code>扩展实现</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;Mobile+Restart.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Mobile</span> <span class="nl">(Restart)</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">restart</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Restart mobile phone.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Mobile</code>扩展使用实例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Mobile</span> <span class="o">*</span><span class="n">mobile</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Mobile</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">mobile</span><span class="p">.</span><span class="n">photoNumber</span> <span class="o">=</span> <span class="s">@&quot;15988886039&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">playMusic</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">restart</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">mobile</span> <span class="n">call</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个功能有点像代码注入，感觉非常棒！\(&#94;o&#94;)/~</p>

<h2>Extension</h2>

<p>我在Mobile.m文件里面添加如下一段代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">Mobile</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="bp">NSInteger</span> <span class="o">*</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">sleep</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在Mobile.m文件里面实现这些声明</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;Mobile.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Mobile</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="bp">NSInteger</span> <span class="o">*</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">sleep</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Mobile</span>
</span><span class='line'>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">photoNumber</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">mail</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="s">@&quot;iPhone&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">-&gt;</span><span class="n">model</span> <span class="o">=</span> <span class="s">@&quot;A1332&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">-&gt;</span><span class="n">producer</span> <span class="o">=</span> <span class="s">@&quot;Apple Inc.&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+(</span><span class="n">Mobile</span> <span class="o">*</span><span class="p">)</span><span class="nf">create</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="n">Mobile</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">call</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Call %@&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">photoNumber</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Call %@&quot;</span><span class="p">,</span> <span class="nb">self</span><span class="o">-&gt;</span><span class="n">photoNumber</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Call %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nb">self</span> <span class="n">photoNumber</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">playMusic</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Play music.&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">sleep</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">sleep</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Sleep.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后调用<code>sleep、size</code>看看发生了什么</p>

<p><img src="http://larryhou.github.io/images/interface-protocol-and-category/fig02.png"></p>

<p>报错了！这是为什么？</p>

<p>这段接口声明看起来好像是跟Mobile.h文件是重复的，其实是对Mobile.h的补充，但是<code>@interface Mobile ()</code>有个没有任何内容的圆括号，那么在这种补充模式下声明的接口是私有的不能在类文件意外调用，在类文件内部是可以使用的，如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">playMusic</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Play music.&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">sleep</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>到这里interface、protocol、category和extension这四个概念都已经介绍完了，搞清楚了再去学习Objective-C基本上就是如鱼得水了！GOOD LUCK!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用AppleScript递归遍历文件夹]]></title>
    <link href="http://larryhou.github.io/blog/2012/11/18/list-folder-recursively/"/>
    <updated>2012-11-18T23:11:00+08:00</updated>
    <id>http://larryhou.github.io/blog/2012/11/18/list-folder-recursively</id>
    <content type="html"><![CDATA[<p>最近对AppleScript很感兴趣，使用它可以做一些自动化处理，类似WIN系统的*.bat脚本，不过AppleScript要比它强大很多，对系统的融合更加深入。如果结合Calendar还可以做一些定时计划任务，非常的方便。</p>

<p>现在我写了一个监视共享目录的脚本，它会把最近30天、大于500MB的影片输出一个列表，虽然写了很久，不过也熟悉好多命令以及编写脚本的流程，收获还是蛮大的。在写这个脚本的时候，走了很多弯路，因为我觉得文件夹操作只需要<code>Finder.app</code>就可以，结果出现各种问题，一度想到放弃，不过最后研究AppleScript自带的脚本示例发现要用<code>System Events</code>，可是到现在我也不知道为什么要这样写，因为AppleScript <code>Dictionary</code> 帮助文档已经写得很清楚了&hellip;oops</p>

<!--more-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
</pre></td><td class='code'><pre><code class='applescript'><span class='line'><span class="k">global</span> <span class="nv">SAVE_FOLDER</span>
</span><span class='line'><span class="k">set</span> <span class="nv">SAVE_FOLDER</span> <span class="k">to</span> <span class="s2">&quot;movies&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">global</span> <span class="nv">OUTPUT_FILE</span>
</span><span class='line'><span class="k">set</span> <span class="nv">OUTPUT_FILE</span> <span class="k">to</span> <span class="nv">POSIX</span> <span class="nv">file</span> <span class="p">(</span><span class="nv">POSIX</span> <span class="na">path</span> <span class="k">of</span> <span class="p">(</span><span class="nb">path to</span> <span class="nv">desktop</span><span class="p">)</span> <span class="o">&amp;</span> <span class="nv">SAVE_FOLDER</span> <span class="k">as </span><span class="nc">text</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">global</span> <span class="nv">MOVIE_SIZE</span>
</span><span class='line'><span class="k">set</span> <span class="nv">MOVIE_SIZE</span> <span class="k">to</span> <span class="mi">500</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span>
</span><span class='line'>
</span><span class='line'><span class="k">global</span> <span class="nv">MOVIE_FORMATS</span>
</span><span class='line'><span class="k">set</span> <span class="nv">MOVIE_FORMATS</span> <span class="k">to</span> <span class="p">{</span><span class="s2">&quot;mov&quot;</span><span class="p">,</span> <span class="s2">&quot;mkv&quot;</span><span class="p">,</span> <span class="s2">&quot;mp4&quot;</span><span class="p">,</span> <span class="s2">&quot;rmvb&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;Finder&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="nb">exists</span> <span class="nv">OUTPUT_FILE</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>      <span class="nb">make</span> <span class="nb">new</span> <span class="nv">folder</span> <span class="nb">at</span> <span class="p">(</span><span class="nb">path to</span> <span class="nv">desktop</span><span class="p">)</span> <span class="nv">with</span> <span class="na">properties</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="nv">SAVE_FOLDER</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span> <span class="k">if</span>
</span><span class='line'><span class="k">end</span> <span class="k">tell</span>
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nv">OUTPUT_FILE</span> <span class="k">to</span> <span class="nv">POSIX</span> <span class="nv">file</span> <span class="p">((</span><span class="nv">POSIX</span> <span class="na">path</span> <span class="k">of</span> <span class="nv">OUTPUT_FILE</span><span class="p">)</span> <span class="o">&amp;</span> <span class="s2">&quot;/&quot;</span> <span class="o">&amp;</span> <span class="nv">timestamp</span><span class="p">()</span> <span class="o">&amp;</span> <span class="s2">&quot;.txt&quot;</span> <span class="k">as </span><span class="nc">text</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">-- connet remote sharing resource</span>
</span><span class='line'><span class="nb">mount volume</span> <span class="s2">&quot;smb://10.11.8.66/IEDmovie$&quot;</span> <span class="k">as</span> <span class="nv">user</span> <span class="na">name</span> <span class="s2">&quot;larryhou&quot;</span> <span class="nv">with</span> <span class="nv">password</span> <span class="s2">&quot;password&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">-- script entry</span>
</span><span class='line'><span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;System Events&quot;</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_root</span> <span class="k">to</span> <span class="nv">alias</span> <span class="p">(</span><span class="na">path</span> <span class="k">of</span> <span class="nv">disk</span> <span class="s2">&quot;IEDmovie$&quot;</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">set</span> <span class="err">_list</span> <span class="k">to</span> <span class="p">(</span><span class="nb">list folder</span> <span class="err">_root</span> <span class="nv">without</span> <span class="nv">invisibles</span><span class="p">)</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_path</span> <span class="k">to</span> <span class="na">path</span> <span class="k">of</span> <span class="err">_root</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">try</span>
</span><span class='line'>      <span class="c">-- open file access if possible</span>
</span><span class='line'>      <span class="nb">open for access</span> <span class="nv">OUTPUT_FILE</span> <span class="nv">with</span> <span class="nb">write</span> <span class="nv">permission</span>
</span><span class='line'>  <span class="k">end</span> <span class="k">try</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nb">set eof</span> <span class="nv">OUTPUT_FILE</span> <span class="k">to</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="p">(</span><span class="k">my</span> <span class="nv">lookForFiles</span><span class="p">(</span><span class="err">_path</span><span class="p">,</span> <span class="err">_list</span><span class="p">))</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nb">close access</span> <span class="nv">OUTPUT_FILE</span>
</span><span class='line'>  
</span><span class='line'><span class="k">end</span> <span class="k">tell</span>
</span><span class='line'>
</span><span class='line'><span class="nb">beep</span> <span class="mi">2</span> <span class="c">-- notification of finishing task with 2 times beep</span>
</span><span class='line'><span class="nb">display dialog</span> <span class="s2">&quot;DONE!!&quot;</span> <span class="nv">with</span> <span class="nv">icon</span> <span class="nb">stop</span> <span class="nv">giving</span> <span class="nv">up</span> <span class="nb">after</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="c">-- filter kernel</span>
</span><span class='line'><span class="c">-- if return true, will be kept, or discarded</span>
</span><span class='line'><span class="k">on</span> <span class="nv">processFile</span><span class="p">(</span><span class="err">_file</span><span class="p">)</span>
</span><span class='line'>  <span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;System Events&quot;</span>
</span><span class='line'>      <span class="k">set</span> <span class="err">_size</span> <span class="k">to</span> <span class="na">size</span> <span class="k">of</span> <span class="err">_file</span>
</span><span class='line'>      <span class="k">set</span> <span class="err">_extension</span> <span class="k">to</span> <span class="na">name</span> <span class="nv">extension</span> <span class="k">of</span> <span class="err">_file</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c">-- keep files larger than MOVIE_SIZE and with specific file extension</span>
</span><span class='line'>      <span class="k">set</span> <span class="err">_available</span> <span class="k">to</span> <span class="p">(</span><span class="err">_size</span> <span class="o">≥</span> <span class="nv">MOVIE_SIZE</span> <span class="ow">and</span> <span class="p">(</span><span class="nv">MOVIE_FORMATS</span> <span class="ow">contains</span> <span class="err">_extension</span><span class="p">))</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">set</span> <span class="err">_date</span> <span class="k">to</span> <span class="p">(</span><span class="nv">modification</span> <span class="nv">date</span> <span class="k">of</span> <span class="err">_file</span><span class="p">)</span>
</span><span class='line'>      <span class="k">set</span> <span class="err">_current</span> <span class="k">to</span> <span class="nb">current date</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c">-- keep files modified within last month</span>
</span><span class='line'>      <span class="k">set</span> <span class="err">_available</span> <span class="k">to</span> <span class="err">_available</span> <span class="ow">and</span> <span class="p">((</span><span class="err">_current</span> <span class="o">-</span> <span class="err">_date</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mi">24</span> <span class="o">*</span> <span class="mi">3600</span><span class="p">)</span> <span class="o">≤</span> <span class="mi">30</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>      <span class="no">return</span> <span class="err">_available</span>
</span><span class='line'>  <span class="k">end</span> <span class="k">tell</span>
</span><span class='line'><span class="k">end</span> <span class="nv">processFile</span>
</span><span class='line'>
</span><span class='line'><span class="c">-- search files recursively</span>
</span><span class='line'><span class="k">on</span> <span class="nv">lookForFiles</span><span class="p">(</span><span class="nv">prefix</span><span class="p">,</span> <span class="nv">names</span><span class="p">)</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">tell</span> <span class="nb">application</span> <span class="s2">&quot;System Events&quot;</span>
</span><span class='line'>      <span class="k">repeat</span> <span class="nv">with</span> <span class="nv">var</span> <span class="k">in</span> <span class="nv">names</span>
</span><span class='line'>          <span class="k">set</span> <span class="err">_item</span> <span class="k">to</span> <span class="p">(</span><span class="nv">alias</span> <span class="p">(</span><span class="nv">prefix</span> <span class="o">&amp;</span> <span class="nv">var</span> <span class="k">as </span><span class="nc">text</span><span class="p">))</span>
</span><span class='line'>          <span class="k">if</span> <span class="nv">kind</span> <span class="k">of</span> <span class="err">_item</span> <span class="ow">is</span> <span class="s2">&quot;文件夹&quot;</span> <span class="k">then</span>
</span><span class='line'>              <span class="k">set</span> <span class="err">_path</span> <span class="k">to</span> <span class="na">path</span> <span class="k">of</span> <span class="err">_item</span>
</span><span class='line'>              <span class="k">set</span> <span class="err">_list</span> <span class="k">to</span> <span class="nb">list folder</span> <span class="err">_item</span> <span class="nv">without</span> <span class="nv">invisibles</span>
</span><span class='line'>              
</span><span class='line'>              <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="err">_result</span> <span class="o">&amp;</span> <span class="p">(</span><span class="k">my</span> <span class="nv">lookForFiles</span><span class="p">(</span><span class="err">_path</span><span class="p">,</span> <span class="err">_list</span><span class="p">))</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>              <span class="k">if</span> <span class="k">my</span> <span class="nv">processFile</span><span class="p">(</span><span class="err">_item</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>                  <span class="k">set</span> <span class="err">_itemPath</span> <span class="k">to</span> <span class="nv">POSIX</span> <span class="na">path</span> <span class="k">of</span> <span class="err">_item</span>
</span><span class='line'>                  
</span><span class='line'>                  <span class="k">set</span> <span class="err">_date</span> <span class="k">to</span> <span class="nv">modification</span> <span class="nv">date</span> <span class="k">of</span> <span class="err">_item</span>
</span><span class='line'>                  
</span><span class='line'>                  <span class="k">set</span> <span class="err">_info</span> <span class="k">to</span> <span class="p">(</span><span class="nb">year</span> <span class="k">of</span> <span class="err">_date</span> <span class="o">&amp;</span> <span class="s2">&quot;-&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="k">set</span> <span class="err">_info</span> <span class="k">to</span> <span class="p">(</span><span class="err">_info</span> <span class="o">&amp;</span> <span class="k">my</span> <span class="nv">substr</span><span class="p">(</span><span class="nb">month</span> <span class="k">of</span> <span class="err">_date</span> <span class="k">as </span><span class="nc">text</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">&amp;</span> <span class="s2">&quot;-&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="k">set</span> <span class="err">_info</span> <span class="k">to</span> <span class="p">(</span><span class="err">_info</span> <span class="o">&amp;</span> <span class="k">my</span> <span class="nv">padding</span><span class="p">(</span><span class="nb">day</span> <span class="k">of</span> <span class="err">_date</span><span class="p">)</span> <span class="o">&amp;</span> <span class="s2">&quot;: &quot;</span><span class="p">)</span>
</span><span class='line'>                  
</span><span class='line'>                  <span class="k">set</span> <span class="err">_current</span> <span class="k">to</span> <span class="nb">current date</span>
</span><span class='line'>                  <span class="k">set</span> <span class="err">_offset</span> <span class="k">to</span> <span class="p">(</span><span class="err">_current</span> <span class="o">-</span> <span class="err">_date</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mi">24</span> <span class="o">*</span> <span class="mi">3600</span><span class="p">)</span>
</span><span class='line'>                  <span class="k">set</span> <span class="err">_offset</span> <span class="k">to</span> <span class="p">(</span><span class="err">_offset</span> <span class="k">as</span> <span class="nv">integer</span><span class="p">)</span>
</span><span class='line'>                  
</span><span class='line'>                  <span class="k">set</span> <span class="err">_info</span> <span class="k">to</span> <span class="err">_info</span> <span class="o">&amp;</span> <span class="k">my</span> <span class="nv">padding</span><span class="p">(</span><span class="err">_offset</span><span class="p">)</span> <span class="o">&amp;</span> <span class="s2">&quot;: &quot;</span>
</span><span class='line'>                  <span class="k">set</span> <span class="err">_info</span> <span class="k">to</span> <span class="err">_info</span> <span class="o">&amp;</span> <span class="na">name</span> <span class="k">of</span> <span class="err">_item</span> <span class="o">&amp;</span> <span class="s2">&quot;: &quot;</span>
</span><span class='line'>                  
</span><span class='line'>                  <span class="c">-- append file path and return</span>
</span><span class='line'>                  <span class="k">set</span> <span class="err">_info</span> <span class="k">to</span> <span class="err">_info</span> <span class="o">&amp;</span> <span class="err">_itemPath</span> <span class="o">&amp;</span> <span class="p">(</span><span class="nb">ASCII character</span> <span class="mi">13</span><span class="p">)</span>
</span><span class='line'>                  
</span><span class='line'>                  <span class="c">-- save to UTF-8 encoding file</span>
</span><span class='line'>                  <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="err">_result</span> <span class="o">&amp;</span> <span class="err">_info</span>
</span><span class='line'>                  
</span><span class='line'>                  <span class="nb">write</span> <span class="p">(</span><span class="err">_info</span> <span class="k">as </span><span class="nc">string</span><span class="p">)</span> <span class="k">to</span> <span class="nv">OUTPUT_FILE</span> <span class="k">as</span> «<span class="nb">class utf8</span>»
</span><span class='line'>                  
</span><span class='line'>              <span class="k">end</span> <span class="k">if</span>
</span><span class='line'>          <span class="k">end</span> <span class="k">if</span>
</span><span class='line'>          
</span><span class='line'>      <span class="k">end</span> <span class="k">repeat</span>
</span><span class='line'>  <span class="k">end</span> <span class="k">tell</span>
</span><span class='line'>  <span class="no">return</span> <span class="err">_result</span>
</span><span class='line'><span class="k">end</span> <span class="nv">lookForFiles</span>
</span><span class='line'>
</span><span class='line'><span class="k">on</span> <span class="nv">timestamp</span><span class="p">()</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_date</span> <span class="k">to</span> <span class="nb">current date</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="err">_result</span> <span class="o">&amp;</span> <span class="p">(</span><span class="nb">year</span> <span class="k">of</span> <span class="err">_date</span><span class="p">)</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="err">_result</span> <span class="o">&amp;</span> <span class="p">(</span><span class="k">my</span> <span class="nv">substr</span><span class="p">((</span><span class="nb">month</span> <span class="k">of</span> <span class="err">_date</span> <span class="k">as </span><span class="nc">text</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="err">_result</span> <span class="o">&amp;</span> <span class="nv">padding</span><span class="p">(</span><span class="nb">day</span> <span class="k">of</span> <span class="err">_date</span><span class="p">)</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="err">_result</span> <span class="o">&amp;</span> <span class="nv">padding</span><span class="p">(</span><span class="nv">hours</span> <span class="k">of</span> <span class="err">_date</span><span class="p">)</span>
</span><span class='line'>  <span class="c">--set _result to _result &amp; padding(minutes of _date)</span>
</span><span class='line'>  <span class="c">--set _result to _result &amp; padding((time of _date) mod 60)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="no">return</span> <span class="err">_result</span> <span class="k">as </span><span class="nc">text</span>
</span><span class='line'><span class="k">end</span> <span class="nv">timestamp</span>
</span><span class='line'>
</span><span class='line'><span class="k">on</span> <span class="nv">padding</span><span class="p">(</span><span class="err">_data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_str</span> <span class="k">to</span> <span class="p">(</span><span class="err">_data</span> <span class="k">as </span><span class="nc">text</span><span class="p">)</span>
</span><span class='line'>  <span class="k">repeat</span>
</span><span class='line'>      <span class="k">if</span> <span class="nv">length</span> <span class="k">of</span> <span class="err">_str</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="k">then</span>
</span><span class='line'>          <span class="k">set</span> <span class="err">_str</span> <span class="k">to</span> <span class="p">(</span><span class="s2">&quot;0&quot;</span> <span class="o">&amp;</span> <span class="err">_str</span> <span class="k">as </span><span class="nc">text</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="k">exit</span> <span class="k">repeat</span>
</span><span class='line'>      <span class="k">end</span> <span class="k">if</span>
</span><span class='line'>  <span class="k">end</span> <span class="k">repeat</span>
</span><span class='line'>  <span class="no">return</span> <span class="err">_str</span>
</span><span class='line'><span class="k">end</span> <span class="nv">padding</span>
</span><span class='line'>
</span><span class='line'><span class="c">-- get substring from text string</span>
</span><span class='line'><span class="k">on</span> <span class="nv">substr</span><span class="p">(</span><span class="err">_str</span><span class="p">,</span> <span class="err">_offset</span><span class="p">,</span> <span class="err">_length</span><span class="p">)</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_strlen</span> <span class="k">to</span> <span class="nv">length</span> <span class="k">of</span> <span class="err">_str</span>
</span><span class='line'>  <span class="k">if</span> <span class="err">_length</span> <span class="o">&gt;</span> <span class="err">_strlen</span> <span class="k">then</span>
</span><span class='line'>      <span class="k">set</span> <span class="err">_length</span> <span class="k">to</span> <span class="err">_strlen</span>
</span><span class='line'>  <span class="k">end</span> <span class="k">if</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="err">_offset</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="k">then</span>
</span><span class='line'>      <span class="k">set</span> <span class="err">_offset</span> <span class="k">to</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span> <span class="k">if</span>
</span><span class='line'>  
</span><span class='line'>  <span class="no">return</span> <span class="nb">text</span> <span class="err">_offset</span> <span class="nb">thru</span> <span class="p">(</span><span class="err">_offset</span> <span class="o">+</span> <span class="err">_length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="k">of</span> <span class="err">_str</span> <span class="k">as </span><span class="nc">text</span>
</span><span class='line'><span class="k">end</span> <span class="nv">substr</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>list folder recursively </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='applescript'><span class='line'><span class="k">on</span> <span class="nv">recurseFolder</span><span class="p">(</span><span class="err">_folder</span><span class="p">)</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_list</span> <span class="k">to</span> <span class="nb">list folder</span> <span class="err">_folder</span> <span class="nv">without</span> <span class="nv">invisibles</span>
</span><span class='line'>  <span class="k">set</span> <span class="err">_path</span> <span class="k">to</span> <span class="err">_folder</span> <span class="k">as </span><span class="nc">string</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">repeat</span> <span class="nv">with</span> <span class="err">_name</span> <span class="k">in</span> <span class="err">_list</span>
</span><span class='line'>      <span class="k">set</span> <span class="err">_item</span> <span class="k">to</span> <span class="nv">alias</span> <span class="p">(</span><span class="err">_path</span> <span class="o">&amp;</span> <span class="err">_name</span> <span class="k">as </span><span class="nc">string</span><span class="p">)</span>
</span><span class='line'>      <span class="k">set</span> <span class="err">_info</span> <span class="k">to</span> <span class="nb">info for</span> <span class="err">_item</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="nv">folder</span> <span class="k">of</span> <span class="err">_info</span> <span class="k">then</span>
</span><span class='line'>          <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="err">_result</span> <span class="o">&amp;</span> <span class="k">my</span> <span class="nv">recurseFolder</span><span class="p">(</span><span class="err">_item</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="k">set</span> <span class="err">_result</span> <span class="k">to</span> <span class="err">_result</span> <span class="o">&amp;</span> <span class="nv">POSIX</span> <span class="na">path</span> <span class="k">of</span> <span class="err">_item</span>
</span><span class='line'>      <span class="k">end</span> <span class="k">if</span>
</span><span class='line'>  <span class="k">end</span> <span class="k">repeat</span>
</span><span class='line'>  
</span><span class='line'>  <span class="no">return</span> <span class="err">_result</span>
</span><span class='line'><span class="k">end</span> <span class="nv">recurseFolder</span>
</span></code></pre></td></tr></table></div></figure>


<p>再补充一个shell版本同功能的脚本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nb">cd</span> ~/remote/movie
</span><span class='line'>
</span><span class='line'><span class="nv">TIMESTAMP</span><span class="o">=</span><span class="k">$(</span><span class="nb">eval </span>date <span class="s1">&#39;+%Y%m%d%h&#39;</span><span class="k">)</span>
</span><span class='line'><span class="nv">OUTPUT</span><span class="o">=</span>~/Desktop/movies/<span class="nv">$TIMESTAMP</span>.txt
</span><span class='line'>
</span><span class='line'>mount_smbfs //larryhou@10.11.8.66/IEDmovie<span class="nv">$ </span>.
</span><span class='line'>find -E . -regex <span class="s1">&#39;.*\.(mp4|rmvb|mkv)$&#39;</span> -size +300M -ctime -2d -exec ls -lhc <span class="o">{}</span> <span class="se">\;</span> <span class="p">|</span> sed -E <span class="s1">&#39;s|^.+staff[^a-z0-9]*||&#39;</span> <span class="p">|</span> sed -E <span class="s1">&#39;s|./([^/]+/)+([^/]+)$|\2 @&amp;|g&#39;</span> &gt; <span class="nv">$OUTPUT</span>
</span><span class='line'>
</span><span class='line'><span class="c">#| sed -E &#39;s|([0-9:]+ )+||g&#39; &gt; $OUTPUT</span>
</span><span class='line'>diskutil unmount force .
</span><span class='line'>
</span><span class='line'>mate <span class="nv">$OUTPUT</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
