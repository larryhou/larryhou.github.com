<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: shell | 沐风白桦]]></title>
  <link href="http://larryhou.github.io/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://larryhou.github.io/"/>
  <updated>2016-12-07T10:04:11+08:00</updated>
  <id>http://larryhou.github.io/</id>
  <author>
    <name><![CDATA[larryhou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[awk使用教程]]></title>
    <link href="http://larryhou.github.io/blog/2016/12/05/awk-tutorials/"/>
    <updated>2016-12-05T19:13:55+08:00</updated>
    <id>http://larryhou.github.io/blog/2016/12/05/awk-tutorials</id>
    <content type="html"><![CDATA[<h3>入门</h3>

<p><code>awk</code>在文本处理脚本<code>shell</code>里很常用，它从管道<code>|</code>或文件中读取每一行，然后按照一定规则把每行自动分成多列，默认使用<strong>空格</strong>自动分列。在<code>awk</code>里面，<strong>空格</strong>可以是<code>空白字符</code>、<code>TAB制表符</code>。分列可以让<code>awk</code>脚本很方便地引用这些分隔开的值，<code>$1</code>表示第一列，<code>$2</code>表示第二列，等等以此类推，当然<code>$</code>后面的数字可以是个很大的值，比如<code>$1024</code>。另外，在<code>awk</code>中使用<code>$0</code>表示整行,<code>$NF</code>表示最后一列。</p>

<p>先来看个示例
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="p">&amp;</span>lsquo<span class="p">;</span>this seems like a pretty nice example<span class="p">&amp;</span>rsquo<span class="p">;</span> <span class="p">|</span> awk <span class="p">&amp;</span>lsquo<span class="p">;</span><span class="o">{</span>print <span class="nv">$1</span><span class="o">}</span><span class="p">&amp;</span>rsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><code>$1</code>是<strong>this</strong>，<code>$2</code>是<strong>seems</strong>，<code>$7</code>和<code>$NF</code>是<strong>example</strong>，在该例子中使用<strong>空格</strong>分隔成7列，完整语法是这样的</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="p">&amp;</span>lsquo<span class="p">;</span>this seems like a pretty nice example<span class="p">&amp;</span>rsquo<span class="p">;</span> <span class="p">|</span> awk -F<span class="err">&#39;</span> <span class="p">&amp;</span>lsquo<span class="p">;</span> <span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">{</span>print <span class="nv">$1</span><span class="o">}</span><span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
可以看到<code>awk</code>多了一个<code>-F</code>参数，通过该参数可以设置各种分隔符，<strong>单字符</strong>、<strong>多字符</strong>都能很好的支持，同样的示例我可以添加<code>-F' like '</code>这样的多字符分隔符，可以得到结果<strong>this seems</strong>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="p">&amp;</span>lsquo<span class="p">;</span>this seems like a pretty nice example<span class="p">&amp;</span>rsquo<span class="p">;</span> <span class="p">|</span> awk -F<span class="err">&#39;</span> like <span class="p">&amp;</span>lsquo<span class="p">;</span> <span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">{</span>print <span class="nv">$1</span><span class="o">}</span><span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<!--more-->


<p>除了<code>NF</code>，<code>awk</code>还有一些其他内置变量，见下表</p>

<table>
<thead>
<tr>
<th style="text-align:right;">内置变量</th>
<th style="text-align:left;">变量描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right;">CONVFMT</td>
<td style="text-align:left;">转换数字使用的格式，默认为：%.6g</td>
</tr>
<tr>
<td style="text-align:right;">FS     </td>
<td style="text-align:left;">分列使用的正则表达式，可以通过-Ffs来设置</td>
</tr>
<tr>
<td style="text-align:right;">NF     </td>
<td style="text-align:left;">当前行分隔后的列数</td>
</tr>
<tr>
<td style="text-align:right;">NR     </td>
<td style="text-align:left;">当前行的序号</td>
</tr>
<tr>
<td style="text-align:right;">FNR    </td>
<td style="text-align:left;">当前文件中当前行的序号</td>
</tr>
<tr>
<td style="text-align:right;">FILENAME </td>
<td style="text-align:left;">当前输入文件名</td>
</tr>
<tr>
<td style="text-align:right;">RS     </td>
<td style="text-align:left;">行分隔符，默认为换行符\n</td>
</tr>
<tr>
<td style="text-align:right;">OFS    </td>
<td style="text-align:left;">输出列间隔符，默认为空格</td>
</tr>
<tr>
<td style="text-align:right;">ORS    </td>
<td style="text-align:left;">输出行分隔符，默认为换行符\n</td>
</tr>
<tr>
<td style="text-align:right;">OFMT   </td>
<td style="text-align:left;">数字的输出格式，默认为：%.6g</td>
</tr>
<tr>
<td style="text-align:right;">SUBSEP </td>
<td style="text-align:left;">下标分隔符，默认为：\034(双引号)，比如foo[&ldquo;A&rdquo;,&ldquo;B&rdquo;]，实际通过foo[&ldquo;A\034B&rdquo;]来访问</td>
</tr>
<tr>
<td style="text-align:right;">ARGC   </td>
<td style="text-align:left;">awk参数数量，可赋值</td>
</tr>
<tr>
<td style="text-align:right;">ARGV   </td>
<td style="text-align:left;">awk参数列表，可赋值，0..ARGC-1，非0索引表示输入文件名</td>
</tr>
<tr>
<td style="text-align:right;">ENVIRON </td>
<td style="text-align:left;">环境变量列表，通过下标变量名(ENVIRON[变量名])来访问，环境变量var=value，通过ENVIRON[var]=value方式存储</td>
</tr>
</tbody>
</table>


<p><code>&amp;#034;</code>=&#034;</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk <span class="p">&amp;</span>lsquo<span class="p">;</span>BEGIN<span class="o">{</span><span class="k">for</span><span class="o">(</span><span class="nv">i</span><span class="o">=</span>0<span class="p">;</span>i<span class="p">&amp;</span>lt<span class="p">;</span>ARGC<span class="p">;</span>i++<span class="o">)</span>print i,ARGV<span class="o">[</span>i<span class="o">]}</span><span class="p">&amp;</span>rsquo<span class="p">;</span> *.cs
</span></code></pre></td></tr></table></div></figure></p>

<pre>
0 awk
1 ArenaServer.cs
2 LogicServer.cs
3 Server.cs
4 Utils.cs
</pre>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk <span class="p">&amp;</span>lsquo<span class="p">;</span>BEGIN<span class="o">{</span><span class="k">for</span><span class="o">(</span>i in ENVIRON<span class="o">)</span>print i <span class="p">&amp;</span>ldquo<span class="p">;</span> <span class="o">=</span> <span class="p">&amp;</span>rdquo<span class="p">;</span> ENVIRON<span class="o">[</span>i<span class="o">]}</span><span class="p">&amp;</span>rsquo<span class="p">;</span> *.cs
</span></code></pre></td></tr></table></div></figure></p>

<pre>
DISPLAY = /private/tmp/com.apple.launchd.eKuWVlBt3M/org.macosforge.xquartz:0
Apple_PubSub_Socket_Render = /private/tmp/com.apple.launchd.grOg8OMLVo/Render
OLDPWD = /Users/larryhou/Documents/next/trunk
LOGNAME = larryhou
XPC_SERVICE_NAME = 0
JAVA_HOME = /Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home
USER = larryhou
PATH = /usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Applications/Server.app/Contents/ServerRoot/usr/bin:/Applications/Server.app/Contents/ServerRoot/usr/sbin:/Applications/Wireshark.app/Contents/MacOS
__CF_USER_TEXT_ENCODING = 0x1F5:0x0:0x0
TERM_SESSION_ID = A39F566B-15B3-4423-9716-491208377960
TERM_PROGRAM_VERSION = 388
TERM = xterm-256color
SHLVL = 1
TMPDIR = /var/folders/gb/2wdjrlq53fbdf0xbs145cv2m0000gn/T/
SECURITYSESSIONID = 186a6
HOME = /Users/larryhou
SHELL = /bin/bash
TERM_PROGRAM = Apple_Terminal
LC_CTYPE = UTF-8
_ = /usr/bin/awk
PWD = /Users/larryhou/Documents/next/trunk/TheNextMOBA/Assets/Scripts/Service/Network
SSH_AUTH_SOCK = /private/tmp/com.apple.launchd.eDbmxn43sK/Listeners
XPC_FLAGS = 0x0
</pre>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk <span class="p">&amp;</span>lsquo<span class="p">;</span><span class="o">{</span>print FILENAME <span class="p">&amp;</span>ldquo<span class="p">;</span>:<span class="p">&amp;</span>rdquo<span class="p">;</span> sprintf<span class="o">(</span><span class="p">&amp;</span>ldquo<span class="p">;</span>%02d<span class="p">&amp;</span>rdquo<span class="p">;</span>,NR<span class="o">)</span>,<span class="nv">$0</span><span class="o">}</span><span class="p">&amp;</span>rsquo<span class="p">;</span> Server.cs.meta&lt;br/&gt;
</span></code></pre></td></tr></table></div></figure></p>

<pre>
Server.cs.meta:01 fileFormatVersion: 2
Server.cs.meta:02 guid: c265c6b6a7a784f3bb1417ce67e9df3e
Server.cs.meta:03 timeCreated: 1456236560
Server.cs.meta:04 licenseType: Free
Server.cs.meta:05 MonoImporter:
Server.cs.meta:06   serializedVersion: 2
Server.cs.meta:07   defaultReferences: []
Server.cs.meta:08   executionOrder: 0
Server.cs.meta:09   icon: {instanceID: 0}
Server.cs.meta:10   userData: 
Server.cs.meta:11   assetBundleName: 
Server.cs.meta:12   assetBundleVariant: 
</pre>


<h3>正则表达式</h3>

<p>上面通过分隔符分列是<code>awk</code>的基本功能，<code>awk</code>还可以和<a href="https://www.gnu.org/software/gawk/manual/html_node/Regexp.html#Regexp" title="正则表达式">正则表达式结合</a>相结合做出复杂的效果</p>

<pre><code>1048592             |FowTexture:Init ()|Color[]             
262160              |AStar:.ctor (Map)|Int32[]             
196684              |TheNextMoba.Module.Arena.ArenaResourceLoader:OnItemLoadSuccess (string,object)|Byte[]              
192016              |Morefun.LockStep.LockstepProfiler/Stat:CreateFrameContext ()|FrameContext[]      
131088              |SignedDistanceField:.ctor (Map,int)|Int16[]             
81936               |GameObjectUtil:Init ()|String[]            
65568               |TheNext.Moba.Logic.FOWManager:Init ()|Byte[,]             
65568               |TheNext.Moba.Logic.FOWManager:Init ()|Byte[,]             
65568               |TheNext.Moba.Logic.FOWSystem:Init (TheNext.Moba.Logic.EnmTeamID,TheNext.Moba.Logic.IFOWSystem)|Byte[,]             
65568               |TheNext.Moba.Logic.FOWSystem:Init (TheNext.Moba.Logic.EnmTeamID,TheNext.Moba.Logic.IFOWSystem)|Byte[,] 
</code></pre>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk <span class="p">&amp;</span>lsquo<span class="p">;</span>/Init/ <span class="o">{</span>print <span class="nv">$0</span><span class="o">}</span><span class="p">&amp;</span>rsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<pre><code>1048592             |FowTexture:Init ()|Color[]             
81936               |GameObjectUtil:Init ()|String[]            
65568               |TheNext.Moba.Logic.FOWManager:Init ()|Byte[,]             
65568               |TheNext.Moba.Logic.FOWManager:Init ()|Byte[,]             
65568               |TheNext.Moba.Logic.FOWSystem:Init (TheNext.Moba.Logic.EnmTeamID,TheNext.Moba.Logic.IFOWSystem)|Byte[,]             
65568               |TheNext.Moba.Logic.FOWSystem:Init (TheNext.Moba.Logic.EnmTeamID,TheNext.Moba.Logic.IFOWSystem)|Byte[,] 
</code></pre>

<p>通过<code>awk '/Init/'</code>这个简单的例子可以知道，在双斜杠<code>'//'</code>中间可以添加正则表达式，正则表达式的作用过滤出匹配的行 然后再执行花括号里面<code>{}</code>逻辑，该示例中正则对整行进行匹配操作，也可以对某一列执行匹配
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk -F<span class="err">&#39;</span><span class="p">|&amp;</span>lsquo<span class="p">;</span> <span class="p">&amp;</span>rsquo<span class="p">;</span><span class="nv">$2</span> ~ /Init/ <span class="o">{</span>print <span class="nv">$0</span><span class="o">}</span><span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
脚本用<code>|</code>分隔符分列，把正则表达式应用到第二列进行匹配
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk -F<span class="p">&amp;</span>rsquo<span class="p">;|&amp;</span>lsquo<span class="p">;</span> <span class="p">&amp;</span>rsquo<span class="p">;</span><span class="nv">$2</span> ~ /Init/ <span class="o">{</span>print <span class="nv">$1</span>,<span class="nv">$3</span><span class="o">}</span><span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<pre><code>1048592              Color[]             
81936                String[]            
65568                Byte[,]             
65568                Byte[,]             
65568                Byte[,]             
65568                Byte[,] 
</code></pre>

<h3>表达式</h3>

<p><code>awk</code>也支持常见的流程控制语句<code>if...else</code>、<code>for</code>、<code>for...in</code>、<code>while</code>、<code>do...while</code></p>

<p><code>for</code>循环和三元表达式
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span>192.168.0.105 <span class="p">|</span> awk -F<span class="err">&#39;</span>.<span class="p">&amp;</span>lsquo<span class="p">;</span> <span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">{</span><span class="k">for</span><span class="o">(</span><span class="nv">i</span><span class="o">=</span>1<span class="p">;</span>i<span class="p">&amp;</span>lt<span class="p">;</span><span class="o">=</span>NF<span class="p">;</span>i++<span class="o">)</span><span class="nb">printf</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>%02X<span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="o">(</span>i<span class="p">&amp;</span>lt<span class="p">;</span>NF?<span class="p">&amp;</span>ldquo<span class="p">;</span>:<span class="p">&amp;</span>rdquo<span class="p">;</span>:<span class="p">&amp;</span>ldquo<span class="p">;&amp;</span>rdquo<span class="p">;</span><span class="o">)</span>,<span class="nv">$i</span><span class="o">}</span><span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span>192.168.0.105 <span class="p">|</span> awk -F<span class="p">&amp;</span>rsquo<span class="p">;</span>.<span class="p">&amp;</span>lsquo<span class="p">;</span> <span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">{</span><span class="k">for</span><span class="o">(</span><span class="nv">i</span><span class="o">=</span>1<span class="p">;</span>i<span class="p">&amp;</span>lt<span class="p">;</span><span class="o">=</span>NF<span class="p">;</span>i++<span class="o">)</span>
</span><span class='line'>                                        <span class="nb">printf</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>%02X<span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="o">(</span>i<span class="p">&amp;</span>lt<span class="p">;</span>NF?<span class="p">&amp;</span>ldquo<span class="p">;</span>:<span class="p">&amp;</span>rdquo<span class="p">;</span>:<span class="p">&amp;</span>ldquo<span class="p">;&amp;</span>rdquo<span class="p">;</span><span class="o">)</span>,<span class="nv">$i</span> <span class="o">}</span><span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><code>for</code>循环和<code>if</code>表达式
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span>192.168.0.105 <span class="p">|</span> awk -F<span class="err">&#39;</span>.<span class="p">&amp;</span>lsquo<span class="p">;</span> <span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">{</span><span class="k">for</span><span class="o">(</span><span class="nv">i</span><span class="o">=</span>1<span class="p">;</span>i<span class="p">&amp;</span>lt<span class="p">;</span><span class="o">=</span>NF<span class="p">;</span>i++<span class="o">){</span><span class="nb">printf</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>%02X<span class="p">&amp;</span>rdquo<span class="p">;</span>,<span class="nv">$i</span><span class="p">;</span><span class="k">if</span><span class="o">(</span>i<span class="p">&amp;</span>lt<span class="p">;</span>NF<span class="o">)</span><span class="nb">printf</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>:<span class="p">&amp;</span>rdquo<span class="p">;</span><span class="o">}}</span><span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span>192.168.0.105 <span class="p">|</span> awk -F<span class="err">&#39;</span>.<span class="p">&amp;</span>lsquo<span class="p">;</span> <span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">{</span><span class="k">for</span><span class="o">(</span><span class="nv">i</span><span class="o">=</span>1<span class="p">;</span>i<span class="p">&amp;</span>lt<span class="p">;</span><span class="o">=</span>NF<span class="p">;</span>i++<span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>        <span class="nb">printf</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>%02X<span class="p">&amp;</span>rdquo<span class="p">;</span>,<span class="nv">$i</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span>i<span class="p">&amp;</span>lt<span class="p">;</span>NF<span class="o">)</span><span class="nb">printf</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>:<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="o">}}</span><span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<pre><code>C0:A8:00:69
</code></pre>

<p><code>for...in</code>和<code>split</code>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span>192.168.0.105 <span class="p">|</span> awk -F<span class="err">&#39;</span>.<span class="p">&amp;</span>lsquo<span class="p">;</span> <span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">{</span>split<span class="o">(</span><span class="nv">$0</span>,a<span class="o">)</span><span class="p">;</span><span class="k">for</span><span class="o">(</span>i in a<span class="o">)</span> <span class="nb">printf</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>%d:%02X <span class="p">&amp;</span>rdquo<span class="p">;</span>,i,a<span class="o">[</span>i<span class="o">]}</span><span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><code>while</code>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>head -n <span class="m">5</span> mono.txt <span class="p">|</span> awk -F<span class="err">&#39;</span><span class="p">|&amp;</span>lsquo<span class="p">;</span> <span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">{</span><span class="nv">n</span><span class="o">=</span>1<span class="p">;</span><span class="k">while</span><span class="o">(</span>n++<span class="p">&amp;</span>lt<span class="p">;</span><span class="o">=</span>NF<span class="o">)</span>print <span class="nv">$n</span><span class="o">}</span><span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<pre><code>FowTexture:Init ()
Color[]             

AStar:.ctor (Map)
Int32[]             

TheNextMoba.Module.Arena.ArenaResourceLoader:OnItemLoadSuccess (string,object)
Byte[]              

Morefun.LockStep.LockstepProfiler/Stat:CreateFrameContext ()
FrameContext[]      

SignedDistanceField:.ctor (Map,int)
Int16[]         
</code></pre>

<p>其他各种表达式</p>

<pre><code>if( expression ) statement [ else statement ]
while( expression ) statement
for( expression ; expression ; expression ) statement
for( var in array ) statement
do statement while( expression )
break
continue
{ [ statement ... ] }
expression        # commonly var = expression
print [ expression-list ] [ &gt; expression ]
printf format [ , expression-list ] [ &gt; expression ]
return [ expression ]
next              # skip remaining patterns on this input line
nextfile              # skip rest of this file, open next, start at top
delete array[ expression ]# delete an array element
delete array          # delete all elements of array
exit [ expression ]     # exit immediately; status is expression
</code></pre>

<p>可以在表达式中使用的<code>awk</code>内置函数</p>

<table>
<thead>
<tr>
<th style="text-align:left;">函数名</th>
<th style="text-align:left;">函数描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">length</td>
<td style="text-align:left;">字符串长度</td>
</tr>
<tr>
<td style="text-align:left;">rand</td>
<td style="text-align:left;">生成(0&lt;=x&lt;1)范围的随机数</td>
</tr>
<tr>
<td style="text-align:left;">srand</td>
<td style="text-align:left;">设置随机种子并返回之前的随机种子</td>
</tr>
<tr>
<td style="text-align:left;">int</td>
<td style="text-align:left;">截尾转换成整数</td>
</tr>
<tr>
<td style="text-align:left;">substr(s,m,n)</td>
<td style="text-align:left;">返回字符串s自m位置(索引从1开始)开始的n个字符</td>
</tr>
<tr>
<td style="text-align:left;">index(s,t)</td>
<td style="text-align:left;">如果字符串s中包含t，则返回t在字符串中出现的位置(从1开始)，否则返回0</td>
</tr>
<tr>
<td style="text-align:left;">match(s,r)</td>
<td style="text-align:left;">返回字符串s匹配正则表达式r的位置(从1开始)</td>
</tr>
<tr>
<td style="text-align:left;">split(s,a,fs)</td>
<td style="text-align:left;">把字符串s通过正则fs分隔成数组a，并返回数组a长度n，如果fs未设置，则使用FS分隔符</td>
</tr>
<tr>
<td style="text-align:left;">sub(r,t,s)</td>
<td style="text-align:left;">在字符串s中，使用正则表达式r首次匹配的位置替换成t，如果s未设置，则使用$0</td>
</tr>
<tr>
<td style="text-align:left;">gsub(r,t,s)</td>
<td style="text-align:left;">与sub(r,t,s)参数相同，不过会把匹配的字符串全部替换，并返回替换的次数</td>
</tr>
<tr>
<td style="text-align:left;">sprintf(fmt,expr,&hellip;)</td>
<td style="text-align:left;">使用与printf相同的样式fmt格式表达式列表</td>
</tr>
<tr>
<td style="text-align:left;">system(cmd)</td>
<td style="text-align:left;">执行cmd并返回退出状态码</td>
</tr>
<tr>
<td style="text-align:left;">tolower(str)</td>
<td style="text-align:left;">把字符串str转换成小写</td>
</tr>
<tr>
<td style="text-align:left;">toupper(str)</td>
<td style="text-align:left;">把字符串str转换成大写</td>
</tr>
</tbody>
</table>


<p>以及各种运算符</p>

<table>
<thead>
<tr>
<th style="text-align:right;">运算符</th>
<th style="text-align:left;">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right;">=,+=,-=,*=,/=,%=,^=,**=</td>
<td style="text-align:left;">赋值</td>
</tr>
<tr>
<td style="text-align:right;">?:</td>
<td style="text-align:left;">C条件表达式，三元表达式</td>
</tr>
<tr>
<td style="text-align:right;">||</td>
<td style="text-align:left;">逻辑或</td>
</tr>
<tr>
<td style="text-align:right;">&amp;&amp;</td>
<td style="text-align:left;">逻辑与</td>
</tr>
<tr>
<td style="text-align:right;">~,~!</td>
<td style="text-align:left;">匹配正则表达式和不匹配正则表达式</td>
</tr>
<tr>
<td style="text-align:right;">&lt;,&lt;=,>,>=,!=,==</td>
<td style="text-align:left;">关系运算符</td>
</tr>
<tr>
<td style="text-align:right;">空格</td>
<td style="text-align:left;">连接</td>
</tr>
<tr>
<td style="text-align:right;">+,-</td>
<td style="text-align:left;">加，减</td>
</tr>
<tr>
<td style="text-align:right;">*,/,%</td>
<td style="text-align:left;">乘，除与求余</td>
</tr>
<tr>
<td style="text-align:right;">+,-,!</td>
<td style="text-align:left;">一元加，减和逻辑非</td>
</tr>
<tr>
<td style="text-align:right;">^,***</td>
<td style="text-align:left;">求幂</td>
</tr>
<tr>
<td style="text-align:right;">++,--</td>
<td style="text-align:left;">增加或减少，作为前缀或后缀</td>
</tr>
<tr>
<td style="text-align:right;">$</td>
<td style="text-align:left;">字段引用</td>
</tr>
<tr>
<td style="text-align:right;">in</td>
<td style="text-align:left;">数组成员</td>
</tr>
</tbody>
</table>


<h3>综合示例</h3>

<p>下面这个示例使用<code>awk</code>做了一个相对比较复杂的事情：把第二列相同的行归为一类，并把相同类的第一列数值相加求和，并输出汇总结果
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;export <span class="nv">LC_NUMERIC</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>en_US.UTF-8<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>cat data.txt <span class="p">|</span> awk <span class="p">&amp;</span>lsquo<span class="p">;</span>BEGIN<span class="o">{</span><span class="nv">sum</span><span class="o">=</span>0<span class="p">;</span><span class="nb">type</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;&amp;</span>rdquo<span class="p">;;</span><span class="nv">prev</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;&amp;</span>rdquo<span class="p">;</span><span class="o">}{</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="nb">type</span><span class="o">==</span><span class="p">&amp;</span>ldquo<span class="p">;&amp;</span>rdquo<span class="p">;</span> <span class="o">||</span> <span class="nb">type</span>!<span class="o">=</span><span class="nv">$2</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="nb">type</span>!<span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;&amp;</span>rdquo<span class="p">;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="nb">printf</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>%10<span class="p">&amp;</span>rsquo<span class="p">;</span><span class="se">\&amp;</span>lsquo<span class="p">;&amp;</span>rsquo<span class="p">;</span>.d %s %s<span class="se">\n</span><span class="p">&amp;</span>rdquo<span class="p">;</span>, sum, prev,<span class="p">&amp;</span>ldquo<span class="p">;</span><span class="c">#&amp;rdquo; NR</span>
</span><span class='line'>        <span class="o">}</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    <span class="nb">type</span><span class="o">=</span><span class="nv">$2</span>
</span><span class='line'>    <span class="nv">prev</span><span class="o">=</span>sprintf<span class="o">(</span><span class="s2">&quot;%9&#39;\&#39;&#39;.d %s %s&quot;</span>,<span class="nv">$1</span>,<span class="nv">$2</span>,<span class="nv">$3</span><span class="o">)</span>
</span><span class='line'>    <span class="nv">sum</span><span class="o">=</span>0
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>sum+<span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>
</span><span class='line'><span class="c"># if(NR&amp;gt;10000) exit</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span><span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<pre>
   656,632        96 System.Collections.Generic.List`1<int>:.ctor(System.Collections.Generic.IEnumerable`1<int>) Int32[] #315133
   859,648        64 System.Collections.Generic.Dictionary`2<object,object>:InitArrays(int) WeakObjectWrapper[] #347584
   964,608       976 System.Collections.Generic.List`1<UnityEngine.UIVertex>:.ctor(int) UIVertex[] #333434
 1,048,592 1,048,592 FowTexture:Init() Color[] #687192
 1,065,568       464 System.Collections.Generic.Dictionary`2<int16,Morefun.LockStep.LList`1<System.Delegate>>:InitArrays(int) Link[] #351569
 1,132,052       274 System.MonoType:get_AssemblyQualifiedName() String #243980
 1,181,198        48 UnityEngine.Object:Internal_InstantiateSingle(UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion) VisualsTowerAnim #124684
 1,187,060        64 System.Reflection.MonoCMethod:Invoke(object,System.Reflection.BindingFlags,System.Reflection.Binder,object[],System.Globalization.CultureInfo) WaypointFollower #239548
 1,790,736        98 string:Concat(string,string) String #62269
 2,219,368        16 HutongGames.PlayMaker.ActionData:Copy() MonoType #671794
</pre>


<p>如果在<code>awk</code>操作里面使用单引号<code>'</code>则需要<a href="http://stackoverflow.com/questions/9899001/how-to-escape-single-quote-in-awk-inside-printf" title="awk单引号转义">转义</a>，可以通过<code>'\''</code>来实现，上面这个示例中使用了两次单引号<code>'</code>。另外，使用了<code>printf</code>对数值进行<a href="http://stackoverflow.com/questions/14668094/add-commas-to-numeric-strings-in-unix" title="printf输出千分位格式数值">千分位格式化</a>，脚本使用的数据源文件通过<a class='.blog-link' href='http://larryhou.github.io/assets/awk-tutorials/data.txt.7z' title='下载数据文件：data.txt'>链接</a>下载。</p>

<p>延伸阅读：<br/>
<a href="https://www.gnu.org/software/gawk/manual/html_node/Very-Simple.html" title="Awk User's Guide:Very Simple">Awk User&rsquo;s Guide:Very Simple</a><br/>
<a href="https://www.gnu.org/software/gawk/manual/html_node/Fields.html" title="Awk User's Guide:Fields">Awk User&rsquo;s Guide:Fields</a><br/>
<a href="http://www.cnblogs.com/emanlee/p/3327576.html" title="awk用法">awk用法</a><br/></p>
]]></content>
  </entry>
  
</feed>
