<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: awk | 沐风白桦]]></title>
  <link href="http://larryhou.github.io/blog/categories/awk/atom.xml" rel="self"/>
  <link href="http://larryhou.github.io/"/>
  <updated>2016-12-06T11:06:51+08:00</updated>
  <id>http://larryhou.github.io/</id>
  <author>
    <name><![CDATA[larryhou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[awk使用教程]]></title>
    <link href="http://larryhou.github.io/blog/2016/12/05/awk-tutorials/"/>
    <updated>2016-12-05T19:13:55+08:00</updated>
    <id>http://larryhou.github.io/blog/2016/12/05/awk-tutorials</id>
    <content type="html"><![CDATA[<h3>入门</h3>

<p><code>awk</code>在文本处理脚本<code>shell</code>里很常用，它从管道<code>|</code>或文件中读取每一行，然后按照一定规则把每行自动分成多列，默认使用<strong>空格</strong>自动分列。在<code>awk</code>里面，<strong>空格</strong>可以是<code>空白字符</code>、<code>TAB制表符</code>。分列可以让<code>awk</code>脚本很方便地引用这些分隔开的值，<code>$1</code>表示第一列，<code>$2</code>表示第二列，等等以此类推，当然<code>$</code>后面的数字可以是个很大的值，比如<code>$1024</code>。另外，在<code>awk</code>中使用<code>$0</code>表示整行,<code>$NF</code>表示最后一列。</p>

<p>先来看个示例
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="p">&amp;</span>lsquo<span class="p">;</span>this seems like a pretty nice example<span class="p">&amp;</span>rsquo<span class="p">;</span> <span class="p">|</span> awk <span class="p">&amp;</span>lsquo<span class="p">;</span><span class="o">{</span>print <span class="nv">$1</span><span class="o">}</span><span class="p">&amp;</span>rsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><code>$1</code>是<strong>this</strong>，<code>$2</code>是<strong>seems</strong>，<code>$7</code>和<code>$NF</code>是<strong>example</strong>，在该例子中使用<strong>空格</strong>分隔成7列，完整语法是这样的</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="p">&amp;</span>lsquo<span class="p">;</span>this seems like a pretty nice example<span class="p">&amp;</span>rsquo<span class="p">;</span> <span class="p">|</span> awk -F<span class="err">&#39;</span> <span class="p">&amp;</span>lsquo<span class="p">;</span> <span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">{</span>print <span class="nv">$1</span><span class="o">}</span><span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
可以看到<code>awk</code>多了一个<code>-F</code>参数，通过该参数可以设置各种分隔符，<strong>单字符</strong>、<strong>多字符</strong>都能很好的支持，同样的示例我可以添加<code>-F' like '</code>这样的多字符分隔符，可以得到结果<strong>this seems</strong>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="p">&amp;</span>lsquo<span class="p">;</span>this seems like a pretty nice example<span class="p">&amp;</span>rsquo<span class="p">;</span> <span class="p">|</span> awk -F<span class="err">&#39;</span> like <span class="p">&amp;</span>lsquo<span class="p">;</span> <span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">{</span>print <span class="nv">$1</span><span class="o">}</span><span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<!--more-->


<p>除了<code>NF</code>，<code>awk</code>还有一些其他内置变量，见下表</p>

<table>
<thead>
<tr>
<th style="text-align:left;">内置变量</th>
<th style="text-align:center;">变量描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">CONVFMT</td>
<td style="text-align:center;">conversion format used when converting numbers (default %.6g)</td>
</tr>
<tr>
<td style="text-align:left;">FS     </td>
<td style="text-align:center;">regular expression used to separate  fields;  also  settable  by option -Ffs.</td>
</tr>
<tr>
<td style="text-align:left;">NF     </td>
<td style="text-align:center;">number of fields in the current record</td>
</tr>
<tr>
<td style="text-align:left;">NR     </td>
<td style="text-align:center;">ordinal number of the current record</td>
</tr>
<tr>
<td style="text-align:left;">FNR    </td>
<td style="text-align:center;">ordinal number of the current record in the current file</td>
</tr>
<tr>
<td style="text-align:left;">FILENAME </td>
<td style="text-align:center;">the name of the current input file</td>
</tr>
<tr>
<td style="text-align:left;">RS     </td>
<td style="text-align:center;">input record separator (default newline)</td>
</tr>
<tr>
<td style="text-align:left;">OFS    </td>
<td style="text-align:center;">output field separator (default blank)</td>
</tr>
<tr>
<td style="text-align:left;">ORS    </td>
<td style="text-align:center;">output record separator (default newline)</td>
</tr>
<tr>
<td style="text-align:left;">OFMT   </td>
<td style="text-align:center;">output format for numbers (default %.6g)</td>
</tr>
<tr>
<td style="text-align:left;">SUBSEP </td>
<td style="text-align:center;">separates multiple subscripts (default 034)</td>
</tr>
<tr>
<td style="text-align:left;">ARGC   </td>
<td style="text-align:center;">argument count, assignable</td>
</tr>
<tr>
<td style="text-align:left;">ARGV   </td>
<td style="text-align:center;">argument array, assignable; non-null members are taken as file-names</td>
</tr>
<tr>
<td style="text-align:left;">ENVIRON </td>
<td style="text-align:center;">array of environment variables; subscripts are names.</td>
</tr>
</tbody>
</table>


<table>
<thead>
<tr>
<th style="text-align:left;">变量名</th>
<th style="text-align:center;">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">ARGC</td>
<td style="text-align:center;">命令行变元个数</td>
</tr>
<tr>
<td style="text-align:left;">ARGV</td>
<td style="text-align:center;">命令行变元数组</td>
</tr>
<tr>
<td style="text-align:left;">FILENAME</td>
<td style="text-align:center;">当前输入文件名</td>
</tr>
<tr>
<td style="text-align:left;">FNR</td>
<td style="text-align:center;">当前文件中的记录号</td>
</tr>
<tr>
<td style="text-align:left;">FS</td>
<td style="text-align:center;">输入域分隔符，默认为一个空格</td>
</tr>
<tr>
<td style="text-align:left;">RS</td>
<td style="text-align:center;">输入记录分隔符</td>
</tr>
<tr>
<td style="text-align:left;">NF</td>
<td style="text-align:center;">当前记录里域个数</td>
</tr>
<tr>
<td style="text-align:left;">NR</td>
<td style="text-align:center;">到目前为止记录数</td>
</tr>
<tr>
<td style="text-align:left;">OFS</td>
<td style="text-align:center;">输出域分隔符</td>
</tr>
<tr>
<td style="text-align:left;">ORS</td>
<td style="text-align:center;">输出记录分隔符</td>
</tr>
</tbody>
</table>


<h3>正则表达式</h3>

<p>上面通过分隔符分列是<code>awk</code>的基本功能，<code>awk</code>还可以和<a href="https://www.gnu.org/software/gawk/manual/html_node/Regexp.html#Regexp" title="正则表达式">正则表达式结合</a>相结合做出复杂的效果</p>

<pre><code>1048592             |FowTexture:Init ()|Color[]             
262160              |AStar:.ctor (Map)|Int32[]             
196684              |TheNextMoba.Module.Arena.ArenaResourceLoader:OnItemLoadSuccess (string,object)|Byte[]              
192016              |Morefun.LockStep.LockstepProfiler/Stat:CreateFrameContext ()|FrameContext[]      
131088              |SignedDistanceField:.ctor (Map,int)|Int16[]             
81936               |GameObjectUtil:Init ()|String[]            
65568               |TheNext.Moba.Logic.FOWManager:Init ()|Byte[,]             
65568               |TheNext.Moba.Logic.FOWManager:Init ()|Byte[,]             
65568               |TheNext.Moba.Logic.FOWSystem:Init (TheNext.Moba.Logic.EnmTeamID,TheNext.Moba.Logic.IFOWSystem)|Byte[,]             
65568               |TheNext.Moba.Logic.FOWSystem:Init (TheNext.Moba.Logic.EnmTeamID,TheNext.Moba.Logic.IFOWSystem)|Byte[,] 
</code></pre>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk <span class="p">&amp;</span>lsquo<span class="p">;</span>/Init/ <span class="o">{</span>print <span class="nv">$0</span><span class="o">}</span><span class="p">&amp;</span>rsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<pre><code>1048592             |FowTexture:Init ()|Color[]             
81936               |GameObjectUtil:Init ()|String[]            
65568               |TheNext.Moba.Logic.FOWManager:Init ()|Byte[,]             
65568               |TheNext.Moba.Logic.FOWManager:Init ()|Byte[,]             
65568               |TheNext.Moba.Logic.FOWSystem:Init (TheNext.Moba.Logic.EnmTeamID,TheNext.Moba.Logic.IFOWSystem)|Byte[,]             
65568               |TheNext.Moba.Logic.FOWSystem:Init (TheNext.Moba.Logic.EnmTeamID,TheNext.Moba.Logic.IFOWSystem)|Byte[,] 
</code></pre>

<p>通过<code>awk '/Init/'</code>这个简单的例子可以知道，在双斜杠<code>'//'</code>中间可以添加正则表达式，正则表达式的作用过滤出匹配的行 然后再执行花括号里面<code>{}</code>逻辑，该示例中正则对整行进行匹配操作，也可以对某一列执行匹配
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk -F<span class="err">&#39;</span><span class="p">|&amp;</span>lsquo<span class="p">;</span> <span class="p">&amp;</span>rsquo<span class="p">;</span><span class="nv">$2</span> ~ /Init/ <span class="o">{</span>print <span class="nv">$0</span><span class="o">}</span><span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
脚本用<code>|</code>分隔符分列，把正则表达式应用到第二列进行匹配
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>awk -F<span class="p">&amp;</span>rsquo<span class="p">;|&amp;</span>lsquo<span class="p">;</span> <span class="p">&amp;</span>rsquo<span class="p">;</span><span class="nv">$2</span> ~ /Init/ <span class="o">{</span>print <span class="nv">$1</span>,<span class="nv">$3</span><span class="o">}</span><span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<pre><code>1048592              Color[]             
81936                String[]            
65568                Byte[,]             
65568                Byte[,]             
65568                Byte[,]             
65568                Byte[,] 
</code></pre>

<h3>表达式</h3>

<p><code>awk</code>也支持常见的流程控制语句<code>if...else</code>、<code>for</code>、<code>for...in</code>、<code>while</code>、<code>do...while</code></p>

<p><code>for</code>循环和三元表达式
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span>192.168.0.105 <span class="p">|</span> awk -F<span class="err">&#39;</span>.<span class="p">&amp;</span>lsquo<span class="p">;</span> <span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">{</span><span class="k">for</span><span class="o">(</span><span class="nv">i</span><span class="o">=</span>1<span class="p">;</span>i<span class="p">&amp;</span>lt<span class="p">;</span><span class="o">=</span>NF<span class="p">;</span>i++<span class="o">)</span><span class="nb">printf</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>%02X<span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="o">(</span>i<span class="p">&amp;</span>lt<span class="p">;</span>NF?<span class="p">&amp;</span>ldquo<span class="p">;</span>:<span class="p">&amp;</span>rdquo<span class="p">;</span>:<span class="p">&amp;</span>ldquo<span class="p">;&amp;</span>rdquo<span class="p">;</span><span class="o">)</span>,<span class="nv">$i</span><span class="o">}</span><span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span>192.168.0.105 <span class="p">|</span> awk -F<span class="p">&amp;</span>rsquo<span class="p">;</span>.<span class="p">&amp;</span>lsquo<span class="p">;</span> <span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">{</span><span class="k">for</span><span class="o">(</span><span class="nv">i</span><span class="o">=</span>1<span class="p">;</span>i<span class="p">&amp;</span>lt<span class="p">;</span><span class="o">=</span>NF<span class="p">;</span>i++<span class="o">)</span>
</span><span class='line'>                                        <span class="nb">printf</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>%02X<span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="o">(</span>i<span class="p">&amp;</span>lt<span class="p">;</span>NF?<span class="p">&amp;</span>ldquo<span class="p">;</span>:<span class="p">&amp;</span>rdquo<span class="p">;</span>:<span class="p">&amp;</span>ldquo<span class="p">;&amp;</span>rdquo<span class="p">;</span><span class="o">)</span>,<span class="nv">$i</span> <span class="o">}</span><span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><code>for</code>循环和<code>if</code>表达式
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span>192.168.0.105 <span class="p">|</span> awk -F<span class="err">&#39;</span>.<span class="p">&amp;</span>lsquo<span class="p">;</span> <span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">{</span><span class="k">for</span><span class="o">(</span><span class="nv">i</span><span class="o">=</span>1<span class="p">;</span>i<span class="p">&amp;</span>lt<span class="p">;</span><span class="o">=</span>NF<span class="p">;</span>i++<span class="o">){</span><span class="nb">printf</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>%02X<span class="p">&amp;</span>rdquo<span class="p">;</span>,<span class="nv">$i</span><span class="p">;</span><span class="k">if</span><span class="o">(</span>i<span class="p">&amp;</span>lt<span class="p">;</span>NF<span class="o">)</span><span class="nb">printf</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>:<span class="p">&amp;</span>rdquo<span class="p">;</span><span class="o">}}</span><span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span>192.168.0.105 <span class="p">|</span> awk -F<span class="err">&#39;</span>.<span class="p">&amp;</span>lsquo<span class="p">;</span> <span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">{</span><span class="k">for</span><span class="o">(</span><span class="nv">i</span><span class="o">=</span>1<span class="p">;</span>i<span class="p">&amp;</span>lt<span class="p">;</span><span class="o">=</span>NF<span class="p">;</span>i++<span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>        <span class="nb">printf</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>%02X<span class="p">&amp;</span>rdquo<span class="p">;</span>,<span class="nv">$i</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span>i<span class="p">&amp;</span>lt<span class="p">;</span>NF<span class="o">)</span><span class="nb">printf</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>:<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="o">}}</span><span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<pre><code>C0:A8:00:69
</code></pre>

<p><code>for...in</code>和<code>split</code>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span>192.168.0.105 <span class="p">|</span> awk -F<span class="err">&#39;</span>.<span class="p">&amp;</span>lsquo<span class="p">;</span> <span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">{</span>split<span class="o">(</span><span class="nv">$0</span>,a<span class="o">)</span><span class="p">;</span><span class="k">for</span><span class="o">(</span>i in a<span class="o">)</span> <span class="nb">printf</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>%d:%02X <span class="p">&amp;</span>rdquo<span class="p">;</span>,i,a<span class="o">[</span>i<span class="o">]}</span><span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><code>while</code>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>head -n <span class="m">5</span> mono.txt <span class="p">|</span> awk -F<span class="err">&#39;</span><span class="p">|&amp;</span>lsquo<span class="p">;</span> <span class="p">&amp;</span>rsquo<span class="p">;</span><span class="o">{</span><span class="nv">n</span><span class="o">=</span>1<span class="p">;</span><span class="k">while</span><span class="o">(</span>n++<span class="p">&amp;</span>lt<span class="p">;</span><span class="o">=</span>NF<span class="o">)</span>print <span class="nv">$n</span><span class="o">}</span><span class="p">&amp;</span>lsquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<pre><code>FowTexture:Init ()
Color[]             

AStar:.ctor (Map)
Int32[]             

TheNextMoba.Module.Arena.ArenaResourceLoader:OnItemLoadSuccess (string,object)
Byte[]              

Morefun.LockStep.LockstepProfiler/Stat:CreateFrameContext ()
FrameContext[]      

SignedDistanceField:.ctor (Map,int)
Int16[]         
</code></pre>

<p>其他各种表达式</p>

<pre><code>if( expression ) statement [ else statement ]
while( expression ) statement
for( expression ; expression ; expression ) statement
for( var in array ) statement
do statement while( expression )
break
continue
{ [ statement ... ] }
expression        # commonly var = expression
print [ expression-list ] [ &gt; expression ]
printf format [ , expression-list ] [ &gt; expression ]
return [ expression ]
next              # skip remaining patterns on this input line
nextfile              # skip rest of this file, open next, start at top
delete array[ expression ]# delete an array element
delete array          # delete all elements of array
exit [ expression ]     # exit immediately; status is expression
</code></pre>

<p>可以在表达式中使用的<code>awk</code>内置函数</p>

<table>
<thead>
<tr>
<th style="text-align:left;">函数名</th>
<th style="text-align:center;">函数描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">length</td>
<td style="text-align:center;">字符串长度</td>
</tr>
<tr>
<td style="text-align:left;">rand</td>
<td style="text-align:center;">(0&lt;=x&lt;1)的随机数</td>
</tr>
<tr>
<td style="text-align:left;">srand</td>
<td style="text-align:center;">设置随机种子并返回之前的随机种子</td>
</tr>
<tr>
<td style="text-align:left;">int</td>
<td style="text-align:center;">截尾转换成整数</td>
</tr>
<tr>
<td style="text-align:left;">substr(s,m,n)</td>
<td style="text-align:center;">返回字符串s自m位置(索引从1开始)开始的n个字符</td>
</tr>
<tr>
<td style="text-align:left;">index(s,t)</td>
<td style="text-align:center;">如果字符串s中包含t则返回1，否则返回0</td>
</tr>
<tr>
<td style="text-align:left;">match(s,r)</td>
<td style="text-align:center;">返回字符串s匹配正则表达式r的位置(从1开始)</td>
</tr>
<tr>
<td style="text-align:left;">split(s,a,fs)</td>
<td style="text-align:center;">把字符串s通过正则fs分隔成数组a，并返回数组a长度n，如果fs未设置，则使用FS分隔符</td>
</tr>
<tr>
<td style="text-align:left;">sub(r,t,s)</td>
<td style="text-align:center;">在字符串s中，使用正则表达式r首次匹配的位置替换成t，如果s未设置，则使用$0</td>
</tr>
<tr>
<td style="text-align:left;">gsub(r,t,s)</td>
<td style="text-align:center;">与sub(r,t,s)参数相同，不过会把匹配的字符串全部替换，并返回替换的次数</td>
</tr>
<tr>
<td style="text-align:left;">sprintf(fmt,expr,&hellip;)</td>
<td style="text-align:center;">依据printf相同的样式fmt格式表达式列表</td>
</tr>
<tr>
<td style="text-align:left;">system(cmd)</td>
<td style="text-align:center;">执行cmd并返回退出状态码</td>
</tr>
<tr>
<td style="text-align:left;">tolower(str)</td>
<td style="text-align:center;">把字符串str转换成小写</td>
</tr>
<tr>
<td style="text-align:left;">toupper(str)</td>
<td style="text-align:center;">把字符串str转换成大写</td>
</tr>
</tbody>
</table>


<p>以及各种运算符</p>

<table>
<thead>
<tr>
<th style="text-align:left;">运算符</th>
<th style="text-align:center;">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">=,+=,-=,*=,/=,%=,^=,**=</td>
<td style="text-align:center;">赋值</td>
</tr>
<tr>
<td style="text-align:left;">?:</td>
<td style="text-align:center;">C条件表达式</td>
</tr>
<tr>
<td style="text-align:left;">||</td>
<td style="text-align:center;">逻辑或</td>
</tr>
<tr>
<td style="text-align:left;">&amp;&amp;</td>
<td style="text-align:center;">逻辑与</td>
</tr>
<tr>
<td style="text-align:left;">~,~!</td>
<td style="text-align:center;">匹配正则表达式和不匹配正则表达式</td>
</tr>
<tr>
<td style="text-align:left;">&lt;,&lt;=,>,>=,!=,==</td>
<td style="text-align:center;">关系运算符</td>
</tr>
<tr>
<td style="text-align:left;">空格</td>
<td style="text-align:center;">连接</td>
</tr>
<tr>
<td style="text-align:left;">+,-</td>
<td style="text-align:center;">加，减</td>
</tr>
<tr>
<td style="text-align:left;">*,/,%</td>
<td style="text-align:center;">乘，除与求余</td>
</tr>
<tr>
<td style="text-align:left;">+,-,!</td>
<td style="text-align:center;">一元加，减和逻辑非</td>
</tr>
<tr>
<td style="text-align:left;">^,***</td>
<td style="text-align:center;">求幂</td>
</tr>
<tr>
<td style="text-align:left;">++,&ndash;</td>
<td style="text-align:center;">增加或减少，作为前缀或后缀</td>
</tr>
<tr>
<td style="text-align:left;">$</td>
<td style="text-align:center;">字段引用</td>
</tr>
<tr>
<td style="text-align:left;">in</td>
<td style="text-align:center;">数组成员</td>
</tr>
</tbody>
</table>


<p>延伸阅读：<br/>
<a href="https://www.gnu.org/software/gawk/manual/html_node/Very-Simple.html" title="Awk User's Guide:Very Simple">Awk User&rsquo;s Guide:Very Simple</a><br/>
<a href="https://www.gnu.org/software/gawk/manual/html_node/Fields.html" title="Awk User's Guide:Fields">Awk User&rsquo;s Guide:Fields</a><br/>
<a href="http://www.cnblogs.com/emanlee/p/3327576.html" title="awk用法">awk用法</a><br/></p>
]]></content>
  </entry>
  
</feed>
